!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(T,e){"use strict";var t=[],S=T.document,n=Object.getPrototypeOf,a=t.slice,g=t.concat,l=t.push,r=t.indexOf,i={},o=i.toString,m=i.hasOwnProperty,s=m.toString,u=s.call(Object),v={},_=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},y=function(e){return null!=e&&e===e.window},c={type:!0,src:!0,noModule:!0};function x(e,t,i){var n,r=(t=t||S).createElement("script");if(r.text=e,i)for(n in c)i[n]&&(r[n]=i[n]);t.head.appendChild(r).parentNode.removeChild(r)}function b(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?i[o.call(e)]||"object":typeof e}var f="3.3.1",P=function(e,t){return new P.fn.init(e,t)},h=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function p(e){var t=!!e&&"length"in e&&e.length,i=b(e);return!_(e)&&!y(e)&&("array"===i||0===t||"number"==typeof t&&0<t&&t-1 in e)}P.fn=P.prototype={jquery:f,constructor:P,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=P.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return P.each(this,e)},map:function(i){return this.pushStack(P.map(this,function(e,t){return i.call(e,t,e)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,i=+e+(e<0?t:0);return this.pushStack(0<=i&&i<t?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},P.extend=P.fn.extend=function(){var e,t,i,n,r,o,s=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||_(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)i=s[t],s!==(n=e[t])&&(u&&n&&(P.isPlainObject(n)||(r=Array.isArray(n)))?(o=r?(r=!1,i&&Array.isArray(i)?i:[]):i&&P.isPlainObject(i)?i:{},s[t]=P.extend(u,o,n)):void 0!==n&&(s[t]=n));return s},P.extend({expando:"jQuery"+(f+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,i;return!(!e||"[object Object]"!==o.call(e))&&(!(t=n(e))||"function"==typeof(i=m.call(t,"constructor")&&t.constructor)&&s.call(i)===u)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){x(e)},each:function(e,t){var i,n=0;if(p(e))for(i=e.length;n<i&&!1!==t.call(e[n],n,e[n]);n++);else for(n in e)if(!1===t.call(e[n],n,e[n]))break;return e},trim:function(e){return null==e?"":(e+"").replace(h,"")},makeArray:function(e,t){var i=t||[];return null!=e&&(p(Object(e))?P.merge(i,"string"==typeof e?[e]:e):l.call(i,e)),i},inArray:function(e,t,i){return null==t?-1:r.call(t,e,i)},merge:function(e,t){for(var i=+t.length,n=0,r=e.length;n<i;n++)e[r++]=t[n];return e.length=r,e},grep:function(e,t,i){for(var n=[],r=0,o=e.length,s=!i;r<o;r++)!t(e[r],r)!==s&&n.push(e[r]);return n},map:function(e,t,i){var n,r,o=0,s=[];if(p(e))for(n=e.length;o<n;o++)null!=(r=t(e[o],o,i))&&s.push(r);else for(o in e)null!=(r=t(e[o],o,i))&&s.push(r);return g.apply([],s)},guid:1,support:v}),"function"==typeof Symbol&&(P.fn[Symbol.iterator]=t[Symbol.iterator]),P.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){i["[object "+t+"]"]=t.toLowerCase()});var d=function(i){var e,p,x,o,r,d,f,g,b,l,u,w,T,s,S,m,a,c,v,P="sizzle"+1*new Date,_=i.document,C=0,n=0,h=se(),y=se(),k=se(),A=function(e,t){return e===t&&(u=!0),0},O={}.hasOwnProperty,t=[],R=t.pop,E=t.push,D=t.push,N=t.slice,M=function(e,t){for(var i=0,n=e.length;i<n;i++)if(e[i]===t)return i;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",j="[\\x20\\t\\r\\n\\f]",F="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",I="\\["+j+"*("+F+")(?:"+j+"*([*^$|!~]?=)"+j+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+F+"))|)"+j+"*\\]",z=":("+F+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+I+")*)|.*)\\)|)",q=new RegExp(j+"+","g"),V=new RegExp("^"+j+"+|((?:^|[^\\\\])(?:\\\\.)*)"+j+"+$","g"),H=new RegExp("^"+j+"*,"+j+"*"),B=new RegExp("^"+j+"*([>+~]|"+j+")"+j+"*"),X=new RegExp("="+j+"*([^\\]'\"]*?)"+j+"*\\]","g"),G=new RegExp(z),W=new RegExp("^"+F+"$"),$={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),TAG:new RegExp("^("+F+"|[*])"),ATTR:new RegExp("^"+I),PSEUDO:new RegExp("^"+z),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+j+"*(even|odd|(([+-]|)(\\d*)n|)"+j+"*(?:([+-]|)"+j+"*(\\d+)|))"+j+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+j+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+j+"*((?:-\\d)?\\d*)"+j+"*\\)|)(?=[^-]|$)","i")},U=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,J=/[+~]/,K=new RegExp("\\\\([\\da-f]{1,6}"+j+"?|("+j+")|.)","ig"),ee=function(e,t,i){var n="0x"+t-65536;return n!=n||i?t:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ne=function(){w()},re=_e(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{D.apply(t=N.call(_.childNodes),_.childNodes),t[_.childNodes.length].nodeType}catch(e){D={apply:t.length?function(e,t){E.apply(e,N.call(t))}:function(e,t){for(var i=e.length,n=0;e[i++]=t[n++];);e.length=i-1}}}function oe(e,t,i,n){var r,o,s,a,l,u,c,f=t&&t.ownerDocument,h=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return i;if(!n&&((t?t.ownerDocument||t:_)!==T&&w(t),t=t||T,S)){if(11!==h&&(l=Z.exec(e)))if(r=l[1]){if(9===h){if(!(s=t.getElementById(r)))return i;if(s.id===r)return i.push(s),i}else if(f&&(s=f.getElementById(r))&&v(t,s)&&s.id===r)return i.push(s),i}else{if(l[2])return D.apply(i,t.getElementsByTagName(e)),i;if((r=l[3])&&p.getElementsByClassName&&t.getElementsByClassName)return D.apply(i,t.getElementsByClassName(r)),i}if(p.qsa&&!k[e+" "]&&(!m||!m.test(e))){if(1!==h)f=t,c=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(te,ie):t.setAttribute("id",a=P),o=(u=d(e)).length;o--;)u[o]="#"+a+" "+ve(u[o]);c=u.join(","),f=J.test(e)&&ge(t.parentNode)||t}if(c)try{return D.apply(i,f.querySelectorAll(c)),i}catch(e){}finally{a===P&&t.removeAttribute("id")}}}return g(e.replace(V,"$1"),t,i,n)}function se(){var n=[];return function e(t,i){return n.push(t+" ")>x.cacheLength&&delete e[n.shift()],e[t+" "]=i}}function ae(e){return e[P]=!0,e}function le(e){var t=T.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ue(e,t){for(var i=e.split("|"),n=i.length;n--;)x.attrHandle[i[n]]=t}function ce(e,t){var i=t&&e,n=i&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===t)return-1;return e?1:-1}function fe(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function he(i){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===i}}function pe(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&re(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function de(s){return ae(function(o){return o=+o,ae(function(e,t){for(var i,n=s([],e.length,o),r=n.length;r--;)e[i=n[r]]&&(e[i]=!(t[i]=e[i]))})})}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in p=oe.support={},r=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},w=oe.setDocument=function(e){var t,i,n=e?e.ownerDocument||e:_;return n!==T&&9===n.nodeType&&n.documentElement&&(s=(T=n).documentElement,S=!r(T),_!==T&&(i=T.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",ne,!1):i.attachEvent&&i.attachEvent("onunload",ne)),p.attributes=le(function(e){return e.className="i",!e.getAttribute("className")}),p.getElementsByTagName=le(function(e){return e.appendChild(T.createComment("")),!e.getElementsByTagName("*").length}),p.getElementsByClassName=Q.test(T.getElementsByClassName),p.getById=le(function(e){return s.appendChild(e).id=P,!T.getElementsByName||!T.getElementsByName(P).length}),p.getById?(x.filter.ID=function(e){var t=e.replace(K,ee);return function(e){return e.getAttribute("id")===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&S){var i=t.getElementById(e);return i?[i]:[]}}):(x.filter.ID=function(e){var i=e.replace(K,ee);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===i}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&S){var i,n,r,o=t.getElementById(e);if(o){if((i=o.getAttributeNode("id"))&&i.value===e)return[o];for(r=t.getElementsByName(e),n=0;o=r[n++];)if((i=o.getAttributeNode("id"))&&i.value===e)return[o]}return[]}}),x.find.TAG=p.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):p.qsa?t.querySelectorAll(e):void 0}:function(e,t){var i,n=[],r=0,o=t.getElementsByTagName(e);if("*"!==e)return o;for(;i=o[r++];)1===i.nodeType&&n.push(i);return n},x.find.CLASS=p.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&S)return t.getElementsByClassName(e)},a=[],m=[],(p.qsa=Q.test(T.querySelectorAll))&&(le(function(e){s.appendChild(e).innerHTML="<a id='"+P+"'></a><select id='"+P+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+j+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+j+"*(?:value|"+L+")"),e.querySelectorAll("[id~="+P+"-]").length||m.push("~="),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+P+"+*").length||m.push(".#.+[+~]")}),le(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=T.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+j+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),s.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")})),(p.matchesSelector=Q.test(c=s.matches||s.webkitMatchesSelector||s.mozMatchesSelector||s.oMatchesSelector||s.msMatchesSelector))&&le(function(e){p.disconnectedMatch=c.call(e,"*"),c.call(e,"[s!='']:x"),a.push("!=",z)}),m=m.length&&new RegExp(m.join("|")),a=a.length&&new RegExp(a.join("|")),t=Q.test(s.compareDocumentPosition),v=t||Q.test(s.contains)?function(e,t){var i=9===e.nodeType?e.documentElement:e,n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},A=t?function(e,t){if(e===t)return u=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!p.sortDetached&&t.compareDocumentPosition(e)===i?e===T||e.ownerDocument===_&&v(_,e)?-1:t===T||t.ownerDocument===_&&v(_,t)?1:l?M(l,e)-M(l,t):0:4&i?-1:1)}:function(e,t){if(e===t)return u=!0,0;var i,n=0,r=e.parentNode,o=t.parentNode,s=[e],a=[t];if(!r||!o)return e===T?-1:t===T?1:r?-1:o?1:l?M(l,e)-M(l,t):0;if(r===o)return ce(e,t);for(i=e;i=i.parentNode;)s.unshift(i);for(i=t;i=i.parentNode;)a.unshift(i);for(;s[n]===a[n];)n++;return n?ce(s[n],a[n]):s[n]===_?-1:a[n]===_?1:0}),T},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==T&&w(e),t=t.replace(X,"='$1']"),p.matchesSelector&&S&&!k[t+" "]&&(!a||!a.test(t))&&(!m||!m.test(t)))try{var i=c.call(e,t);if(i||p.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return 0<oe(t,T,null,[e]).length},oe.contains=function(e,t){return(e.ownerDocument||e)!==T&&w(e),v(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==T&&w(e);var i=x.attrHandle[t.toLowerCase()],n=i&&O.call(x.attrHandle,t.toLowerCase())?i(e,t,!S):void 0;return void 0!==n?n:p.attributes||!S?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},oe.escape=function(e){return(e+"").replace(te,ie)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,i=[],n=0,r=0;if(u=!p.detectDuplicates,l=!p.sortStable&&e.slice(0),e.sort(A),u){for(;t=e[r++];)t===e[r]&&(n=i.push(r));for(;n--;)e.splice(i[n],1)}return l=null,e},o=oe.getText=function(e){var t,i="",n=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)i+=o(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[n++];)i+=o(t);return i},(x=oe.selectors={cacheLength:50,createPseudo:ae,match:$,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(K,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(K,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,i=!e[6]&&e[2];return $.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":i&&G.test(i)&&(t=d(i,!0))&&(t=i.indexOf(")",i.length-t)-i.length)&&(e[0]=e[0].slice(0,t),e[2]=i.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(K,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=h[e+" "];return t||(t=new RegExp("(^|"+j+")"+e+"("+j+"|$)"))&&h(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(i,n,r){return function(e){var t=oe.attr(e,i);return null==t?"!="===n:!n||(t+="","="===n?t===r:"!="===n?t!==r:"^="===n?r&&0===t.indexOf(r):"*="===n?r&&-1<t.indexOf(r):"$="===n?r&&t.slice(-r.length)===r:"~="===n?-1<(" "+t.replace(q," ")+" ").indexOf(r):"|="===n&&(t===r||t.slice(0,r.length+1)===r+"-"))}},CHILD:function(d,e,t,g,m){var v="nth"!==d.slice(0,3),_="last"!==d.slice(-4),y="of-type"===e;return 1===g&&0===m?function(e){return!!e.parentNode}:function(e,t,i){var n,r,o,s,a,l,u=v!==_?"nextSibling":"previousSibling",c=e.parentNode,f=y&&e.nodeName.toLowerCase(),h=!i&&!y,p=!1;if(c){if(v){for(;u;){for(s=e;s=s[u];)if(y?s.nodeName.toLowerCase()===f:1===s.nodeType)return!1;l=u="only"===d&&!l&&"nextSibling"}return!0}if(l=[_?c.firstChild:c.lastChild],_&&h){for(p=(a=(n=(r=(o=(s=c)[P]||(s[P]={}))[s.uniqueID]||(o[s.uniqueID]={}))[d]||[])[0]===C&&n[1])&&n[2],s=a&&c.childNodes[a];s=++a&&s&&s[u]||(p=a=0)||l.pop();)if(1===s.nodeType&&++p&&s===e){r[d]=[C,a,p];break}}else if(h&&(p=a=(n=(r=(o=(s=e)[P]||(s[P]={}))[s.uniqueID]||(o[s.uniqueID]={}))[d]||[])[0]===C&&n[1]),!1===p)for(;(s=++a&&s&&s[u]||(p=a=0)||l.pop())&&((y?s.nodeName.toLowerCase()!==f:1!==s.nodeType)||!++p||(h&&((r=(o=s[P]||(s[P]={}))[s.uniqueID]||(o[s.uniqueID]={}))[d]=[C,p]),s!==e)););return(p-=m)===g||p%g==0&&0<=p/g}}},PSEUDO:function(e,o){var t,s=x.pseudos[e]||x.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return s[P]?s(o):1<s.length?(t=[e,e,"",o],x.setFilters.hasOwnProperty(e.toLowerCase())?ae(function(e,t){for(var i,n=s(e,o),r=n.length;r--;)e[i=M(e,n[r])]=!(t[i]=n[r])}):function(e){return s(e,0,t)}):s}},pseudos:{not:ae(function(e){var n=[],r=[],a=f(e.replace(V,"$1"));return a[P]?ae(function(e,t,i,n){for(var r,o=a(e,null,n,[]),s=e.length;s--;)(r=o[s])&&(e[s]=!(t[s]=r))}):function(e,t,i){return n[0]=e,a(n,null,i,r),n[0]=null,!r.pop()}}),has:ae(function(t){return function(e){return 0<oe(t,e).length}}),contains:ae(function(t){return t=t.replace(K,ee),function(e){return-1<(e.textContent||e.innerText||o(e)).indexOf(t)}}),lang:ae(function(i){return W.test(i||"")||oe.error("unsupported lang: "+i),i=i.replace(K,ee).toLowerCase(),function(e){var t;do{if(t=S?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===i||0===t.indexOf(i+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=i.location&&i.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===s},focus:function(e){return e===T.activeElement&&(!T.hasFocus||T.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:pe(!1),disabled:pe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return Y.test(e.nodeName)},input:function(e){return U.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:de(function(){return[0]}),last:de(function(e,t){return[t-1]}),eq:de(function(e,t,i){return[i<0?i+t:i]}),even:de(function(e,t){for(var i=0;i<t;i+=2)e.push(i);return e}),odd:de(function(e,t){for(var i=1;i<t;i+=2)e.push(i);return e}),lt:de(function(e,t,i){for(var n=i<0?i+t:i;0<=--n;)e.push(n);return e}),gt:de(function(e,t,i){for(var n=i<0?i+t:i;++n<t;)e.push(n);return e})}}).pseudos.nth=x.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[e]=fe(e);for(e in{submit:!0,reset:!0})x.pseudos[e]=he(e);function me(){}function ve(e){for(var t=0,i=e.length,n="";t<i;t++)n+=e[t].value;return n}function _e(a,e,t){var l=e.dir,u=e.next,c=u||l,f=t&&"parentNode"===c,h=n++;return e.first?function(e,t,i){for(;e=e[l];)if(1===e.nodeType||f)return a(e,t,i);return!1}:function(e,t,i){var n,r,o,s=[C,h];if(i){for(;e=e[l];)if((1===e.nodeType||f)&&a(e,t,i))return!0}else for(;e=e[l];)if(1===e.nodeType||f)if(r=(o=e[P]||(e[P]={}))[e.uniqueID]||(o[e.uniqueID]={}),u&&u===e.nodeName.toLowerCase())e=e[l]||e;else{if((n=r[c])&&n[0]===C&&n[1]===h)return s[2]=n[2];if((r[c]=s)[2]=a(e,t,i))return!0}return!1}}function ye(r){return 1<r.length?function(e,t,i){for(var n=r.length;n--;)if(!r[n](e,t,i))return!1;return!0}:r[0]}function xe(e,t,i,n,r){for(var o,s=[],a=0,l=e.length,u=null!=t;a<l;a++)(o=e[a])&&(i&&!i(o,n,r)||(s.push(o),u&&t.push(a)));return s}function be(p,d,g,m,v,e){return m&&!m[P]&&(m=be(m)),v&&!v[P]&&(v=be(v,e)),ae(function(e,t,i,n){var r,o,s,a=[],l=[],u=t.length,c=e||function(e,t,i){for(var n=0,r=t.length;n<r;n++)oe(e,t[n],i);return i}(d||"*",i.nodeType?[i]:i,[]),f=!p||!e&&d?c:xe(c,a,p,i,n),h=g?v||(e?p:u||m)?[]:t:f;if(g&&g(f,h,i,n),m)for(r=xe(h,l),m(r,[],i,n),o=r.length;o--;)(s=r[o])&&(h[l[o]]=!(f[l[o]]=s));if(e){if(v||p){if(v){for(r=[],o=h.length;o--;)(s=h[o])&&r.push(f[o]=s);v(null,h=[],r,n)}for(o=h.length;o--;)(s=h[o])&&-1<(r=v?M(e,s):a[o])&&(e[r]=!(t[r]=s))}}else h=xe(h===t?h.splice(u,h.length):h),v?v(null,t,h,n):D.apply(t,h)})}function we(e){for(var r,t,i,n=e.length,o=x.relative[e[0].type],s=o||x.relative[" "],a=o?1:0,l=_e(function(e){return e===r},s,!0),u=_e(function(e){return-1<M(r,e)},s,!0),c=[function(e,t,i){var n=!o&&(i||t!==b)||((r=t).nodeType?l(e,t,i):u(e,t,i));return r=null,n}];a<n;a++)if(t=x.relative[e[a].type])c=[_e(ye(c),t)];else{if((t=x.filter[e[a].type].apply(null,e[a].matches))[P]){for(i=++a;i<n&&!x.relative[e[i].type];i++);return be(1<a&&ye(c),1<a&&ve(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(V,"$1"),t,a<i&&we(e.slice(a,i)),i<n&&we(e=e.slice(i)),i<n&&ve(e))}c.push(t)}return ye(c)}return me.prototype=x.filters=x.pseudos,x.setFilters=new me,d=oe.tokenize=function(e,t){var i,n,r,o,s,a,l,u=y[e+" "];if(u)return t?0:u.slice(0);for(s=e,a=[],l=x.preFilter;s;){for(o in i&&!(n=H.exec(s))||(n&&(s=s.slice(n[0].length)||s),a.push(r=[])),i=!1,(n=B.exec(s))&&(i=n.shift(),r.push({value:i,type:n[0].replace(V," ")}),s=s.slice(i.length)),x.filter)!(n=$[o].exec(s))||l[o]&&!(n=l[o](n))||(i=n.shift(),r.push({value:i,type:o,matches:n}),s=s.slice(i.length));if(!i)break}return t?s.length:s?oe.error(e):y(e,a).slice(0)},f=oe.compile=function(e,t){var i,m,v,_,y,n,r=[],o=[],s=k[e+" "];if(!s){for(t||(t=d(e)),i=t.length;i--;)(s=we(t[i]))[P]?r.push(s):o.push(s);(s=k(e,(m=o,_=0<(v=r).length,y=0<m.length,n=function(e,t,i,n,r){var o,s,a,l=0,u="0",c=e&&[],f=[],h=b,p=e||y&&x.find.TAG("*",r),d=C+=null==h?1:Math.random()||.1,g=p.length;for(r&&(b=t===T||t||r);u!==g&&null!=(o=p[u]);u++){if(y&&o){for(s=0,t||o.ownerDocument===T||(w(o),i=!S);a=m[s++];)if(a(o,t||T,i)){n.push(o);break}r&&(C=d)}_&&((o=!a&&o)&&l--,e&&c.push(o))}if(l+=u,_&&u!==l){for(s=0;a=v[s++];)a(c,f,t,i);if(e){if(0<l)for(;u--;)c[u]||f[u]||(f[u]=R.call(n));f=xe(f)}D.apply(n,f),r&&!e&&0<f.length&&1<l+v.length&&oe.uniqueSort(n)}return r&&(C=d,b=h),c},_?ae(n):n))).selector=e}return s},g=oe.select=function(e,t,i,n){var r,o,s,a,l,u="function"==typeof e&&e,c=!n&&d(e=u.selector||e);if(i=i||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&"ID"===(s=o[0]).type&&9===t.nodeType&&S&&x.relative[o[1].type]){if(!(t=(x.find.ID(s.matches[0].replace(K,ee),t)||[])[0]))return i;u&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(r=$.needsContext.test(e)?0:o.length;r--&&(s=o[r],!x.relative[a=s.type]);)if((l=x.find[a])&&(n=l(s.matches[0].replace(K,ee),J.test(o[0].type)&&ge(t.parentNode)||t))){if(o.splice(r,1),!(e=n.length&&ve(o)))return D.apply(i,n),i;break}}return(u||f(e,c))(n,t,!S,i,!t||J.test(e)&&ge(t.parentNode)||t),i},p.sortStable=P.split("").sort(A).join("")===P,p.detectDuplicates=!!u,w(),p.sortDetached=le(function(e){return 1&e.compareDocumentPosition(T.createElement("fieldset"))}),le(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ue("type|href|height|width",function(e,t,i){if(!i)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),p.attributes&&le(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ue("value",function(e,t,i){if(!i&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),le(function(e){return null==e.getAttribute("disabled")})||ue(L,function(e,t,i){var n;if(!i)return!0===e[t]?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}),oe}(T);P.find=d,P.expr=d.selectors,P.expr[":"]=P.expr.pseudos,P.uniqueSort=P.unique=d.uniqueSort,P.text=d.getText,P.isXMLDoc=d.isXML,P.contains=d.contains,P.escapeSelector=d.escape;var w=function(e,t,i){for(var n=[],r=void 0!==i;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&P(e).is(i))break;n.push(e)}return n},C=function(e,t){for(var i=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&i.push(e);return i},k=P.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var O=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function R(e,i,n){return _(i)?P.grep(e,function(e,t){return!!i.call(e,t,e)!==n}):i.nodeType?P.grep(e,function(e){return e===i!==n}):"string"!=typeof i?P.grep(e,function(e){return-1<r.call(i,e)!==n}):P.filter(i,e,n)}P.filter=function(e,t,i){var n=t[0];return i&&(e=":not("+e+")"),1===t.length&&1===n.nodeType?P.find.matchesSelector(n,e)?[n]:[]:P.find.matches(e,P.grep(t,function(e){return 1===e.nodeType}))},P.fn.extend({find:function(e){var t,i,n=this.length,r=this;if("string"!=typeof e)return this.pushStack(P(e).filter(function(){for(t=0;t<n;t++)if(P.contains(r[t],this))return!0}));for(i=this.pushStack([]),t=0;t<n;t++)P.find(e,r[t],i);return 1<n?P.uniqueSort(i):i},filter:function(e){return this.pushStack(R(this,e||[],!1))},not:function(e){return this.pushStack(R(this,e||[],!0))},is:function(e){return!!R(this,"string"==typeof e&&k.test(e)?P(e):e||[],!1).length}});var E,D=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(P.fn.init=function(e,t,i){var n,r;if(!e)return this;if(i=i||E,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):_(e)?void 0!==i.ready?i.ready(e):e(P):P.makeArray(e,this);if(!(n="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:D.exec(e))||!n[1]&&t)return!t||t.jquery?(t||i).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof P?t[0]:t,P.merge(this,P.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:S,!0)),O.test(n[1])&&P.isPlainObject(t))for(n in t)_(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return(r=S.getElementById(n[2]))&&(this[0]=r,this.length=1),this}).prototype=P.fn,E=P(S);var N=/^(?:parents|prev(?:Until|All))/,M={children:!0,contents:!0,next:!0,prev:!0};function L(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}P.fn.extend({has:function(e){var t=P(e,this),i=t.length;return this.filter(function(){for(var e=0;e<i;e++)if(P.contains(this,t[e]))return!0})},closest:function(e,t){var i,n=0,r=this.length,o=[],s="string"!=typeof e&&P(e);if(!k.test(e))for(;n<r;n++)for(i=this[n];i&&i!==t;i=i.parentNode)if(i.nodeType<11&&(s?-1<s.index(i):1===i.nodeType&&P.find.matchesSelector(i,e))){o.push(i);break}return this.pushStack(1<o.length?P.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?r.call(P(e),this[0]):r.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(P.uniqueSort(P.merge(this.get(),P(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),P.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return w(e,"parentNode")},parentsUntil:function(e,t,i){return w(e,"parentNode",i)},next:function(e){return L(e,"nextSibling")},prev:function(e){return L(e,"previousSibling")},nextAll:function(e){return w(e,"nextSibling")},prevAll:function(e){return w(e,"previousSibling")},nextUntil:function(e,t,i){return w(e,"nextSibling",i)},prevUntil:function(e,t,i){return w(e,"previousSibling",i)},siblings:function(e){return C((e.parentNode||{}).firstChild,e)},children:function(e){return C(e.firstChild)},contents:function(e){return A(e,"iframe")?e.contentDocument:(A(e,"template")&&(e=e.content||e),P.merge([],e.childNodes))}},function(n,r){P.fn[n]=function(e,t){var i=P.map(this,r,e);return"Until"!==n.slice(-5)&&(t=e),t&&"string"==typeof t&&(i=P.filter(t,i)),1<this.length&&(M[n]||P.uniqueSort(i),N.test(n)&&i.reverse()),this.pushStack(i)}});var j=/[^\x20\t\r\n\f]+/g;function F(e){return e}function I(e){throw e}function z(e,t,i,n){var r;try{e&&_(r=e.promise)?r.call(e).done(t).fail(i):e&&_(r=e.then)?r.call(e,t,i):t.apply(void 0,[e].slice(n))}catch(e){i.apply(void 0,[e])}}P.Callbacks=function(n){var e,i;n="string"==typeof n?(e=n,i={},P.each(e.match(j)||[],function(e,t){i[t]=!0}),i):P.extend({},n);var r,t,o,s,a=[],l=[],u=-1,c=function(){for(s=s||n.once,o=r=!0;l.length;u=-1)for(t=l.shift();++u<a.length;)!1===a[u].apply(t[0],t[1])&&n.stopOnFalse&&(u=a.length,t=!1);n.memory||(t=!1),r=!1,s&&(a=t?[]:"")},f={add:function(){return a&&(t&&!r&&(u=a.length-1,l.push(t)),function i(e){P.each(e,function(e,t){_(t)?n.unique&&f.has(t)||a.push(t):t&&t.length&&"string"!==b(t)&&i(t)})}(arguments),t&&!r&&c()),this},remove:function(){return P.each(arguments,function(e,t){for(var i;-1<(i=P.inArray(t,a,i));)a.splice(i,1),i<=u&&u--}),this},has:function(e){return e?-1<P.inArray(e,a):0<a.length},empty:function(){return a&&(a=[]),this},disable:function(){return s=l=[],a=t="",this},disabled:function(){return!a},lock:function(){return s=l=[],t||r||(a=t=""),this},locked:function(){return!!s},fireWith:function(e,t){return s||(t=[e,(t=t||[]).slice?t.slice():t],l.push(t),r||c()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!o}};return f},P.extend({Deferred:function(e){var o=[["notify","progress",P.Callbacks("memory"),P.Callbacks("memory"),2],["resolve","done",P.Callbacks("once memory"),P.Callbacks("once memory"),0,"resolved"],["reject","fail",P.Callbacks("once memory"),P.Callbacks("once memory"),1,"rejected"]],r="pending",s={state:function(){return r},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return s.then(null,e)},pipe:function(){var r=arguments;return P.Deferred(function(n){P.each(o,function(e,t){var i=_(r[t[4]])&&r[t[4]];a[t[1]](function(){var e=i&&i.apply(this,arguments);e&&_(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[t[0]+"With"](this,i?[e]:arguments)})}),r=null}).promise()},then:function(t,i,n){var l=0;function u(r,o,s,a){return function(){var i=this,n=arguments,e=function(){var e,t;if(!(r<l)){if((e=s.apply(i,n))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,_(t)?a?t.call(e,u(l,o,F,a),u(l,o,I,a)):(l++,t.call(e,u(l,o,F,a),u(l,o,I,a),u(l,o,F,o.notifyWith))):(s!==F&&(i=void 0,n=[e]),(a||o.resolveWith)(i,n))}},t=a?e:function(){try{e()}catch(e){P.Deferred.exceptionHook&&P.Deferred.exceptionHook(e,t.stackTrace),l<=r+1&&(s!==I&&(i=void 0,n=[e]),o.rejectWith(i,n))}};r?t():(P.Deferred.getStackHook&&(t.stackTrace=P.Deferred.getStackHook()),T.setTimeout(t))}}return P.Deferred(function(e){o[0][3].add(u(0,e,_(n)?n:F,e.notifyWith)),o[1][3].add(u(0,e,_(t)?t:F)),o[2][3].add(u(0,e,_(i)?i:I))}).promise()},promise:function(e){return null!=e?P.extend(e,s):s}},a={};return P.each(o,function(e,t){var i=t[2],n=t[5];s[t[1]]=i.add,n&&i.add(function(){r=n},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),i.add(t[3].fire),a[t[0]]=function(){return a[t[0]+"With"](this===a?void 0:this,arguments),this},a[t[0]+"With"]=i.fireWith}),s.promise(a),e&&e.call(a,a),a},when:function(e){var i=arguments.length,t=i,n=Array(t),r=a.call(arguments),o=P.Deferred(),s=function(t){return function(e){n[t]=this,r[t]=1<arguments.length?a.call(arguments):e,--i||o.resolveWith(n,r)}};if(i<=1&&(z(e,o.done(s(t)).resolve,o.reject,!i),"pending"===o.state()||_(r[t]&&r[t].then)))return o.then();for(;t--;)z(r[t],s(t),o.reject);return o.promise()}});var q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;P.Deferred.exceptionHook=function(e,t){T.console&&T.console.warn&&e&&q.test(e.name)&&T.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},P.readyException=function(e){T.setTimeout(function(){throw e})};var V=P.Deferred();function H(){S.removeEventListener("DOMContentLoaded",H),T.removeEventListener("load",H),P.ready()}P.fn.ready=function(e){return V.then(e).catch(function(e){P.readyException(e)}),this},P.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--P.readyWait:P.isReady)||(P.isReady=!0)!==e&&0<--P.readyWait||V.resolveWith(S,[P])}}),P.ready.then=V.then,"complete"===S.readyState||"loading"!==S.readyState&&!S.documentElement.doScroll?T.setTimeout(P.ready):(S.addEventListener("DOMContentLoaded",H),T.addEventListener("load",H));var B=function(e,t,i,n,r,o,s){var a=0,l=e.length,u=null==i;if("object"===b(i))for(a in r=!0,i)B(e,t,a,i[a],!0,o,s);else if(void 0!==n&&(r=!0,_(n)||(s=!0),u&&(t=s?(t.call(e,n),null):(u=t,function(e,t,i){return u.call(P(e),i)})),t))for(;a<l;a++)t(e[a],i,s?n:n.call(e[a],a,t(e[a],i)));return r?e:u?t.call(e):l?t(e[0],i):o},X=/^-ms-/,G=/-([a-z])/g;function W(e,t){return t.toUpperCase()}function $(e){return e.replace(X,"ms-").replace(G,W)}var U=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Y(){this.expando=P.expando+Y.uid++}Y.uid=1,Y.prototype={cache:function(e){var t=e[this.expando];return t||(t={},U(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,i){var n,r=this.cache(e);if("string"==typeof t)r[$(t)]=i;else for(n in t)r[$(n)]=t[n];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][$(t)]},access:function(e,t,i){return void 0===t||t&&"string"==typeof t&&void 0===i?this.get(e,t):(this.set(e,t,i),void 0!==i?i:t)},remove:function(e,t){var i,n=e[this.expando];if(void 0!==n){if(void 0!==t){i=(t=Array.isArray(t)?t.map($):(t=$(t))in n?[t]:t.match(j)||[]).length;for(;i--;)delete n[t[i]]}(void 0===t||P.isEmptyObject(n))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!P.isEmptyObject(t)}};var Q=new Y,Z=new Y,J=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,K=/[A-Z]/g;function ee(e,t,i){var n,r;if(void 0===i&&1===e.nodeType)if(n="data-"+t.replace(K,"-$&").toLowerCase(),"string"==typeof(i=e.getAttribute(n))){try{i="true"===(r=i)||"false"!==r&&("null"===r?null:r===+r+""?+r:J.test(r)?JSON.parse(r):r)}catch(e){}Z.set(e,t,i)}else i=void 0;return i}P.extend({hasData:function(e){return Z.hasData(e)||Q.hasData(e)},data:function(e,t,i){return Z.access(e,t,i)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,i){return Q.access(e,t,i)},_removeData:function(e,t){Q.remove(e,t)}}),P.fn.extend({data:function(i,e){var t,n,r,o=this[0],s=o&&o.attributes;if(void 0!==i)return"object"==typeof i?this.each(function(){Z.set(this,i)}):B(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=Z.get(o,i))?t:void 0!==(t=ee(o,i))?t:void 0;this.each(function(){Z.set(this,i,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(r=Z.get(o),1===o.nodeType&&!Q.get(o,"hasDataAttrs"))){for(t=s.length;t--;)s[t]&&0===(n=s[t].name).indexOf("data-")&&(n=$(n.slice(5)),ee(o,n,r[n]));Q.set(o,"hasDataAttrs",!0)}return r},removeData:function(e){return this.each(function(){Z.remove(this,e)})}}),P.extend({queue:function(e,t,i){var n;if(e)return t=(t||"fx")+"queue",n=Q.get(e,t),i&&(!n||Array.isArray(i)?n=Q.access(e,t,P.makeArray(i)):n.push(i)),n||[]},dequeue:function(e,t){t=t||"fx";var i=P.queue(e,t),n=i.length,r=i.shift(),o=P._queueHooks(e,t);"inprogress"===r&&(r=i.shift(),n--),r&&("fx"===t&&i.unshift("inprogress"),delete o.stop,r.call(e,function(){P.dequeue(e,t)},o)),!n&&o&&o.empty.fire()},_queueHooks:function(e,t){var i=t+"queueHooks";return Q.get(e,i)||Q.access(e,i,{empty:P.Callbacks("once memory").add(function(){Q.remove(e,[t+"queue",i])})})}}),P.fn.extend({queue:function(t,i){var e=2;return"string"!=typeof t&&(i=t,t="fx",e--),arguments.length<e?P.queue(this[0],t):void 0===i?this:this.each(function(){var e=P.queue(this,t,i);P._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&P.dequeue(this,t)})},dequeue:function(e){return this.each(function(){P.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var i,n=1,r=P.Deferred(),o=this,s=this.length,a=function(){--n||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(i=Q.get(o[s],e+"queueHooks"))&&i.empty&&(n++,i.empty.add(a));return a(),r.promise(t)}});var te=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+te+")([a-z%]*)$","i"),ne=["Top","Right","Bottom","Left"],re=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&P.contains(e.ownerDocument,e)&&"none"===P.css(e,"display")},oe=function(e,t,i,n){var r,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];for(o in r=i.apply(e,n||[]),t)e.style[o]=s[o];return r};function se(e,t,i,n){var r,o,s=20,a=n?function(){return n.cur()}:function(){return P.css(e,t,"")},l=a(),u=i&&i[3]||(P.cssNumber[t]?"":"px"),c=(P.cssNumber[t]||"px"!==u&&+l)&&ie.exec(P.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;s--;)P.style(e,t,c+u),(1-o)*(1-(o=a()/l||.5))<=0&&(s=0),c/=o;c*=2,P.style(e,t,c+u),i=i||[]}return i&&(c=+c||+l||0,r=i[1]?c+(i[1]+1)*i[2]:+i[2],n&&(n.unit=u,n.start=c,n.end=r)),r}var ae={};function le(e,t){for(var i,n,r,o,s,a,l,u=[],c=0,f=e.length;c<f;c++)(n=e[c]).style&&(i=n.style.display,t?("none"===i&&(u[c]=Q.get(n,"display")||null,u[c]||(n.style.display="")),""===n.style.display&&re(n)&&(u[c]=(l=s=o=void 0,s=(r=n).ownerDocument,a=r.nodeName,(l=ae[a])||(o=s.body.appendChild(s.createElement(a)),l=P.css(o,"display"),o.parentNode.removeChild(o),"none"===l&&(l="block"),ae[a]=l)))):"none"!==i&&(u[c]="none",Q.set(n,"display",i)));for(c=0;c<f;c++)null!=u[c]&&(e[c].style.display=u[c]);return e}P.fn.extend({show:function(){return le(this,!0)},hide:function(){return le(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){re(this)?P(this).show():P(this).hide()})}});var ue=/^(?:checkbox|radio)$/i,ce=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,fe=/^$|^module$|\/(?:java|ecma)script/i,he={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function pe(e,t){var i;return i=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&A(e,t)?P.merge([e],i):i}function de(e,t){for(var i=0,n=e.length;i<n;i++)Q.set(e[i],"globalEval",!t||Q.get(t[i],"globalEval"))}he.optgroup=he.option,he.tbody=he.tfoot=he.colgroup=he.caption=he.thead,he.th=he.td;var ge,me,ve=/<|&#?\w+;/;function _e(e,t,i,n,r){for(var o,s,a,l,u,c,f=t.createDocumentFragment(),h=[],p=0,d=e.length;p<d;p++)if((o=e[p])||0===o)if("object"===b(o))P.merge(h,o.nodeType?[o]:o);else if(ve.test(o)){for(s=s||f.appendChild(t.createElement("div")),a=(ce.exec(o)||["",""])[1].toLowerCase(),l=he[a]||he._default,s.innerHTML=l[1]+P.htmlPrefilter(o)+l[2],c=l[0];c--;)s=s.lastChild;P.merge(h,s.childNodes),(s=f.firstChild).textContent=""}else h.push(t.createTextNode(o));for(f.textContent="",p=0;o=h[p++];)if(n&&-1<P.inArray(o,n))r&&r.push(o);else if(u=P.contains(o.ownerDocument,o),s=pe(f.appendChild(o),"script"),u&&de(s),i)for(c=0;o=s[c++];)fe.test(o.type||"")&&i.push(o);return f}ge=S.createDocumentFragment().appendChild(S.createElement("div")),(me=S.createElement("input")).setAttribute("type","radio"),me.setAttribute("checked","checked"),me.setAttribute("name","t"),ge.appendChild(me),v.checkClone=ge.cloneNode(!0).cloneNode(!0).lastChild.checked,ge.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!ge.cloneNode(!0).lastChild.defaultValue;var ye=S.documentElement,xe=/^key/,be=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,we=/^([^.]*)(?:\.(.+)|)/;function Te(){return!0}function Se(){return!1}function Pe(){try{return S.activeElement}catch(e){}}function Ce(e,t,i,n,r,o){var s,a;if("object"==typeof t){for(a in"string"!=typeof i&&(n=n||i,i=void 0),t)Ce(e,a,i,n,t[a],o);return e}if(null==n&&null==r?(r=i,n=i=void 0):null==r&&("string"==typeof i?(r=n,n=void 0):(r=n,n=i,i=void 0)),!1===r)r=Se;else if(!r)return e;return 1===o&&(s=r,(r=function(e){return P().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=P.guid++)),e.each(function(){P.event.add(this,t,r,n,i)})}P.event={global:{},add:function(t,e,i,n,r){var o,s,a,l,u,c,f,h,p,d,g,m=Q.get(t);if(m)for(i.handler&&(i=(o=i).handler,r=o.selector),r&&P.find.matchesSelector(ye,r),i.guid||(i.guid=P.guid++),(l=m.events)||(l=m.events={}),(s=m.handle)||(s=m.handle=function(e){return void 0!==P&&P.event.triggered!==e.type?P.event.dispatch.apply(t,arguments):void 0}),u=(e=(e||"").match(j)||[""]).length;u--;)p=g=(a=we.exec(e[u])||[])[1],d=(a[2]||"").split(".").sort(),p&&(f=P.event.special[p]||{},p=(r?f.delegateType:f.bindType)||p,f=P.event.special[p]||{},c=P.extend({type:p,origType:g,data:n,handler:i,guid:i.guid,selector:r,needsContext:r&&P.expr.match.needsContext.test(r),namespace:d.join(".")},o),(h=l[p])||((h=l[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,n,d,s)||t.addEventListener&&t.addEventListener(p,s)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=i.guid)),r?h.splice(h.delegateCount++,0,c):h.push(c),P.event.global[p]=!0)},remove:function(e,t,i,n,r){var o,s,a,l,u,c,f,h,p,d,g,m=Q.hasData(e)&&Q.get(e);if(m&&(l=m.events)){for(u=(t=(t||"").match(j)||[""]).length;u--;)if(p=g=(a=we.exec(t[u])||[])[1],d=(a[2]||"").split(".").sort(),p){for(f=P.event.special[p]||{},h=l[p=(n?f.delegateType:f.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=h.length;o--;)c=h[o],!r&&g!==c.origType||i&&i.guid!==c.guid||a&&!a.test(c.namespace)||n&&n!==c.selector&&("**"!==n||!c.selector)||(h.splice(o,1),c.selector&&h.delegateCount--,f.remove&&f.remove.call(e,c));s&&!h.length&&(f.teardown&&!1!==f.teardown.call(e,d,m.handle)||P.removeEvent(e,p,m.handle),delete l[p])}else for(p in l)P.event.remove(e,p+t[u],i,n,!0);P.isEmptyObject(l)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,i,n,r,o,s,a=P.event.fix(e),l=new Array(arguments.length),u=(Q.get(this,"events")||{})[a.type]||[],c=P.event.special[a.type]||{};for(l[0]=a,t=1;t<arguments.length;t++)l[t]=arguments[t];if(a.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,a)){for(s=P.event.handlers.call(this,a,u),t=0;(r=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,i=0;(o=r.handlers[i++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(n=((P.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,l))&&!1===(a.result=n)&&(a.preventDefault(),a.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,a),a.result}},handlers:function(e,t){var i,n,r,o,s,a=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&1<=e.button))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(o=[],s={},i=0;i<l;i++)void 0===s[r=(n=t[i]).selector+" "]&&(s[r]=n.needsContext?-1<P(r,this).index(u):P.find(r,this,null,[u]).length),s[r]&&o.push(n);o.length&&a.push({elem:u,handlers:o})}return u=this,l<t.length&&a.push({elem:u,handlers:t.slice(l)}),a},addProp:function(t,e){Object.defineProperty(P.Event.prototype,t,{enumerable:!0,configurable:!0,get:_(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[P.expando]?e:new P.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Pe()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Pe()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&A(this,"input"))return this.click(),!1},_default:function(e){return A(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},P.removeEvent=function(e,t,i){e.removeEventListener&&e.removeEventListener(t,i)},P.Event=function(e,t){if(!(this instanceof P.Event))return new P.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Te:Se,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&P.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[P.expando]=!0},P.Event.prototype={constructor:P.Event,isDefaultPrevented:Se,isPropagationStopped:Se,isImmediatePropagationStopped:Se,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Te,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Te,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Te,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},P.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&xe.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&be.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},P.event.addProp),P.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,r){P.event.special[e]={delegateType:r,bindType:r,handle:function(e){var t,i=e.relatedTarget,n=e.handleObj;return i&&(i===this||P.contains(this,i))||(e.type=n.origType,t=n.handler.apply(this,arguments),e.type=r),t}}}),P.fn.extend({on:function(e,t,i,n){return Ce(this,e,t,i,n)},one:function(e,t,i,n){return Ce(this,e,t,i,n,1)},off:function(e,t,i){var n,r;if(e&&e.preventDefault&&e.handleObj)return n=e.handleObj,P(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(i=t,t=void 0),!1===i&&(i=Se),this.each(function(){P.event.remove(this,e,i,t)});for(r in e)this.off(r,t,e[r]);return this}});var ke=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ae=/<script|<style|<link/i,Oe=/checked\s*(?:[^=]|=\s*.checked.)/i,Re=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ee(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&P(e).children("tbody")[0]||e}function De(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Ne(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Me(e,t){var i,n,r,o,s,a,l,u;if(1===t.nodeType){if(Q.hasData(e)&&(o=Q.access(e),s=Q.set(t,o),u=o.events))for(r in delete s.handle,s.events={},u)for(i=0,n=u[r].length;i<n;i++)P.event.add(t,r,u[r][i]);Z.hasData(e)&&(a=Z.access(e),l=P.extend({},a),Z.set(t,l))}}function Le(i,n,r,o){n=g.apply([],n);var e,t,s,a,l,u,c=0,f=i.length,h=f-1,p=n[0],d=_(p);if(d||1<f&&"string"==typeof p&&!v.checkClone&&Oe.test(p))return i.each(function(e){var t=i.eq(e);d&&(n[0]=p.call(this,e,t.html())),Le(t,n,r,o)});if(f&&(t=(e=_e(n,i[0].ownerDocument,!1,i,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(a=(s=P.map(pe(e,"script"),De)).length;c<f;c++)l=e,c!==h&&(l=P.clone(l,!0,!0),a&&P.merge(s,pe(l,"script"))),r.call(i[c],l,c);if(a)for(u=s[s.length-1].ownerDocument,P.map(s,Ne),c=0;c<a;c++)l=s[c],fe.test(l.type||"")&&!Q.access(l,"globalEval")&&P.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?P._evalUrl&&P._evalUrl(l.src):x(l.textContent.replace(Re,""),u,l))}return i}function je(e,t,i){for(var n,r=t?P.filter(t,e):e,o=0;null!=(n=r[o]);o++)i||1!==n.nodeType||P.cleanData(pe(n)),n.parentNode&&(i&&P.contains(n.ownerDocument,n)&&de(pe(n,"script")),n.parentNode.removeChild(n));return e}P.extend({htmlPrefilter:function(e){return e.replace(ke,"<$1></$2>")},clone:function(e,t,i){var n,r,o,s,a,l,u,c=e.cloneNode(!0),f=P.contains(e.ownerDocument,e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||P.isXMLDoc(e)))for(s=pe(c),n=0,r=(o=pe(e)).length;n<r;n++)a=o[n],l=s[n],void 0,"input"===(u=l.nodeName.toLowerCase())&&ue.test(a.type)?l.checked=a.checked:"input"!==u&&"textarea"!==u||(l.defaultValue=a.defaultValue);if(t)if(i)for(o=o||pe(e),s=s||pe(c),n=0,r=o.length;n<r;n++)Me(o[n],s[n]);else Me(e,c);return 0<(s=pe(c,"script")).length&&de(s,!f&&pe(e,"script")),c},cleanData:function(e){for(var t,i,n,r=P.event.special,o=0;void 0!==(i=e[o]);o++)if(U(i)){if(t=i[Q.expando]){if(t.events)for(n in t.events)r[n]?P.event.remove(i,n):P.removeEvent(i,n,t.handle);i[Q.expando]=void 0}i[Z.expando]&&(i[Z.expando]=void 0)}}}),P.fn.extend({detach:function(e){return je(this,e,!0)},remove:function(e){return je(this,e)},text:function(e){return B(this,function(e){return void 0===e?P.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Le(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ee(this,e).appendChild(e)})},prepend:function(){return Le(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ee(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Le(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Le(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(P.cleanData(pe(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return P.clone(this,e,t)})},html:function(e){return B(this,function(e){var t=this[0]||{},i=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ae.test(e)&&!he[(ce.exec(e)||["",""])[1].toLowerCase()]){e=P.htmlPrefilter(e);try{for(;i<n;i++)1===(t=this[i]||{}).nodeType&&(P.cleanData(pe(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var i=[];return Le(this,arguments,function(e){var t=this.parentNode;P.inArray(this,i)<0&&(P.cleanData(pe(this)),t&&t.replaceChild(e,this))},i)}}),P.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,s){P.fn[e]=function(e){for(var t,i=[],n=P(e),r=n.length-1,o=0;o<=r;o++)t=o===r?this:this.clone(!0),P(n[o])[s](t),l.apply(i,t.get());return this.pushStack(i)}});var Fe=new RegExp("^("+te+")(?!px)[a-z%]+$","i"),Ie=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=T),t.getComputedStyle(e)},ze=new RegExp(ne.join("|"),"i");function qe(e,t,i){var n,r,o,s,a=e.style;return(i=i||Ie(e))&&(""!==(s=i.getPropertyValue(t)||i[t])||P.contains(e.ownerDocument,e)||(s=P.style(e,t)),!v.pixelBoxStyles()&&Fe.test(s)&&ze.test(t)&&(n=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=i.width,a.width=n,a.minWidth=r,a.maxWidth=o)),void 0!==s?s+"":s}function Ve(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){a.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ye.appendChild(a).appendChild(l);var e=T.getComputedStyle(l);i="1%"!==e.top,s=12===t(e.marginLeft),l.style.right="60%",o=36===t(e.right),n=36===t(e.width),l.style.position="absolute",r=36===l.offsetWidth||"absolute",ye.removeChild(a),l=null}}function t(e){return Math.round(parseFloat(e))}var i,n,r,o,s,a=S.createElement("div"),l=S.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===l.style.backgroundClip,P.extend(v,{boxSizingReliable:function(){return e(),n},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),i},reliableMarginLeft:function(){return e(),s},scrollboxSize:function(){return e(),r}}))}();var He=/^(none|table(?!-c[ea]).+)/,Be=/^--/,Xe={position:"absolute",visibility:"hidden",display:"block"},Ge={letterSpacing:"0",fontWeight:"400"},We=["Webkit","Moz","ms"],$e=S.createElement("div").style;function Ue(e){var t=P.cssProps[e];return t||(t=P.cssProps[e]=function(e){if(e in $e)return e;for(var t=e[0].toUpperCase()+e.slice(1),i=We.length;i--;)if((e=We[i]+t)in $e)return e}(e)||e),t}function Ye(e,t,i){var n=ie.exec(t);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):t}function Qe(e,t,i,n,r,o){var s="width"===t?1:0,a=0,l=0;if(i===(n?"border":"content"))return 0;for(;s<4;s+=2)"margin"===i&&(l+=P.css(e,i+ne[s],!0,r)),n?("content"===i&&(l-=P.css(e,"padding"+ne[s],!0,r)),"margin"!==i&&(l-=P.css(e,"border"+ne[s]+"Width",!0,r))):(l+=P.css(e,"padding"+ne[s],!0,r),"padding"!==i?l+=P.css(e,"border"+ne[s]+"Width",!0,r):a+=P.css(e,"border"+ne[s]+"Width",!0,r));return!n&&0<=o&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-a-.5))),l}function Ze(e,t,i){var n=Ie(e),r=qe(e,t,n),o="border-box"===P.css(e,"boxSizing",!1,n),s=o;if(Fe.test(r)){if(!i)return r;r="auto"}return s=s&&(v.boxSizingReliable()||r===e.style[t]),("auto"===r||!parseFloat(r)&&"inline"===P.css(e,"display",!1,n))&&(r=e["offset"+t[0].toUpperCase()+t.slice(1)],s=!0),(r=parseFloat(r)||0)+Qe(e,t,i||(o?"border":"content"),s,n,r)+"px"}function Je(e,t,i,n,r){return new Je.prototype.init(e,t,i,n,r)}P.extend({cssHooks:{opacity:{get:function(e,t){if(t){var i=qe(e,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,i,n){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,s,a=$(t),l=Be.test(t),u=e.style;if(l||(t=Ue(a)),s=P.cssHooks[t]||P.cssHooks[a],void 0===i)return s&&"get"in s&&void 0!==(r=s.get(e,!1,n))?r:u[t];"string"===(o=typeof i)&&(r=ie.exec(i))&&r[1]&&(i=se(e,t,r),o="number"),null!=i&&i==i&&("number"===o&&(i+=r&&r[3]||(P.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==i||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(i=s.set(e,i,n))||(l?u.setProperty(t,i):u[t]=i))}},css:function(e,t,i,n){var r,o,s,a=$(t);return Be.test(t)||(t=Ue(a)),(s=P.cssHooks[t]||P.cssHooks[a])&&"get"in s&&(r=s.get(e,!0,i)),void 0===r&&(r=qe(e,t,n)),"normal"===r&&t in Ge&&(r=Ge[t]),""===i||i?(o=parseFloat(r),!0===i||isFinite(o)?o||0:r):r}}),P.each(["height","width"],function(e,a){P.cssHooks[a]={get:function(e,t,i){if(t)return!He.test(P.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?Ze(e,a,i):oe(e,Xe,function(){return Ze(e,a,i)})},set:function(e,t,i){var n,r=Ie(e),o="border-box"===P.css(e,"boxSizing",!1,r),s=i&&Qe(e,a,i,o,r);return o&&v.scrollboxSize()===r.position&&(s-=Math.ceil(e["offset"+a[0].toUpperCase()+a.slice(1)]-parseFloat(r[a])-Qe(e,a,"border",!1,r)-.5)),s&&(n=ie.exec(t))&&"px"!==(n[3]||"px")&&(e.style[a]=t,t=P.css(e,a)),Ye(0,t,s)}}}),P.cssHooks.marginLeft=Ve(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(qe(e,"marginLeft"))||e.getBoundingClientRect().left-oe(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),P.each({margin:"",padding:"",border:"Width"},function(r,o){P.cssHooks[r+o]={expand:function(e){for(var t=0,i={},n="string"==typeof e?e.split(" "):[e];t<4;t++)i[r+ne[t]+o]=n[t]||n[t-2]||n[0];return i}},"margin"!==r&&(P.cssHooks[r+o].set=Ye)}),P.fn.extend({css:function(e,t){return B(this,function(e,t,i){var n,r,o={},s=0;if(Array.isArray(t)){for(n=Ie(e),r=t.length;s<r;s++)o[t[s]]=P.css(e,t[s],!1,n);return o}return void 0!==i?P.style(e,t,i):P.css(e,t)},e,t,1<arguments.length)}}),((P.Tween=Je).prototype={constructor:Je,init:function(e,t,i,n,r,o){this.elem=e,this.prop=i,this.easing=r||P.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=n,this.unit=o||(P.cssNumber[i]?"":"px")},cur:function(){var e=Je.propHooks[this.prop];return e&&e.get?e.get(this):Je.propHooks._default.get(this)},run:function(e){var t,i=Je.propHooks[this.prop];return this.options.duration?this.pos=t=P.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):Je.propHooks._default.set(this),this}}).init.prototype=Je.prototype,(Je.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=P.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){P.fx.step[e.prop]?P.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[P.cssProps[e.prop]]&&!P.cssHooks[e.prop]?e.elem[e.prop]=e.now:P.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=Je.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},P.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},P.fx=Je.prototype.init,P.fx.step={};var Ke,et,tt,it,nt=/^(?:toggle|show|hide)$/,rt=/queueHooks$/;function ot(){et&&(!1===S.hidden&&T.requestAnimationFrame?T.requestAnimationFrame(ot):T.setTimeout(ot,P.fx.interval),P.fx.tick())}function st(){return T.setTimeout(function(){Ke=void 0}),Ke=Date.now()}function at(e,t){var i,n=0,r={height:e};for(t=t?1:0;n<4;n+=2-t)r["margin"+(i=ne[n])]=r["padding"+i]=e;return t&&(r.opacity=r.width=e),r}function lt(e,t,i){for(var n,r=(ut.tweeners[t]||[]).concat(ut.tweeners["*"]),o=0,s=r.length;o<s;o++)if(n=r[o].call(i,t,e))return n}function ut(o,e,t){var i,s,n=0,r=ut.prefilters.length,a=P.Deferred().always(function(){delete l.elem}),l=function(){if(s)return!1;for(var e=Ke||st(),t=Math.max(0,u.startTime+u.duration-e),i=1-(t/u.duration||0),n=0,r=u.tweens.length;n<r;n++)u.tweens[n].run(i);return a.notifyWith(o,[u,i,t]),i<1&&r?t:(r||a.notifyWith(o,[u,1,0]),a.resolveWith(o,[u]),!1)},u=a.promise({elem:o,props:P.extend({},e),opts:P.extend(!0,{specialEasing:{},easing:P.easing._default},t),originalProperties:e,originalOptions:t,startTime:Ke||st(),duration:t.duration,tweens:[],createTween:function(e,t){var i=P.Tween(o,u.opts,e,t,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(i),i},stop:function(e){var t=0,i=e?u.tweens.length:0;if(s)return this;for(s=!0;t<i;t++)u.tweens[t].run(1);return e?(a.notifyWith(o,[u,1,0]),a.resolveWith(o,[u,e])):a.rejectWith(o,[u,e]),this}}),c=u.props;for(!function(e,t){var i,n,r,o,s;for(i in e)if(r=t[n=$(i)],o=e[i],Array.isArray(o)&&(r=o[1],o=e[i]=o[0]),i!==n&&(e[n]=o,delete e[i]),(s=P.cssHooks[n])&&"expand"in s)for(i in o=s.expand(o),delete e[n],o)i in e||(e[i]=o[i],t[i]=r);else t[n]=r}(c,u.opts.specialEasing);n<r;n++)if(i=ut.prefilters[n].call(u,o,c,u.opts))return _(i.stop)&&(P._queueHooks(u.elem,u.opts.queue).stop=i.stop.bind(i)),i;return P.map(c,lt,u),_(u.opts.start)&&u.opts.start.call(o,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),P.fx.timer(P.extend(l,{elem:o,anim:u,queue:u.opts.queue})),u}P.Animation=P.extend(ut,{tweeners:{"*":[function(e,t){var i=this.createTween(e,t);return se(i.elem,e,ie.exec(t),i),i}]},tweener:function(e,t){for(var i,n=0,r=(e=_(e)?(t=e,["*"]):e.match(j)).length;n<r;n++)i=e[n],ut.tweeners[i]=ut.tweeners[i]||[],ut.tweeners[i].unshift(t)},prefilters:[function(e,t,i){var n,r,o,s,a,l,u,c,f="width"in t||"height"in t,h=this,p={},d=e.style,g=e.nodeType&&re(e),m=Q.get(e,"fxshow");for(n in i.queue||(null==(s=P._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,h.always(function(){h.always(function(){s.unqueued--,P.queue(e,"fx").length||s.empty.fire()})})),t)if(r=t[n],nt.test(r)){if(delete t[n],o=o||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!m||void 0===m[n])continue;g=!0}p[n]=m&&m[n]||P.style(e,n)}if((l=!P.isEmptyObject(t))||!P.isEmptyObject(p))for(n in f&&1===e.nodeType&&(i.overflow=[d.overflow,d.overflowX,d.overflowY],null==(u=m&&m.display)&&(u=Q.get(e,"display")),"none"===(c=P.css(e,"display"))&&(u?c=u:(le([e],!0),u=e.style.display||u,c=P.css(e,"display"),le([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===P.css(e,"float")&&(l||(h.done(function(){d.display=u}),null==u&&(c=d.display,u="none"===c?"":c)),d.display="inline-block")),i.overflow&&(d.overflow="hidden",h.always(function(){d.overflow=i.overflow[0],d.overflowX=i.overflow[1],d.overflowY=i.overflow[2]})),l=!1,p)l||(m?"hidden"in m&&(g=m.hidden):m=Q.access(e,"fxshow",{display:u}),o&&(m.hidden=!g),g&&le([e],!0),h.done(function(){for(n in g||le([e]),Q.remove(e,"fxshow"),p)P.style(e,n,p[n])})),l=lt(g?m[n]:0,n,h),n in m||(m[n]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?ut.prefilters.unshift(e):ut.prefilters.push(e)}}),P.speed=function(e,t,i){var n=e&&"object"==typeof e?P.extend({},e):{complete:i||!i&&t||_(e)&&e,duration:e,easing:i&&t||t&&!_(t)&&t};return P.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in P.fx.speeds?n.duration=P.fx.speeds[n.duration]:n.duration=P.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){_(n.old)&&n.old.call(this),n.queue&&P.dequeue(this,n.queue)},n},P.fn.extend({fadeTo:function(e,t,i,n){return this.filter(re).css("opacity",0).show().end().animate({opacity:t},e,i,n)},animate:function(t,e,i,n){var r=P.isEmptyObject(t),o=P.speed(e,i,n),s=function(){var e=ut(this,P.extend({},t),o);(r||Q.get(this,"finish"))&&e.stop(!0)};return s.finish=s,r||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(r,e,o){var s=function(e){var t=e.stop;delete e.stop,t(o)};return"string"!=typeof r&&(o=e,e=r,r=void 0),e&&!1!==r&&this.queue(r||"fx",[]),this.each(function(){var e=!0,t=null!=r&&r+"queueHooks",i=P.timers,n=Q.get(this);if(t)n[t]&&n[t].stop&&s(n[t]);else for(t in n)n[t]&&n[t].stop&&rt.test(t)&&s(n[t]);for(t=i.length;t--;)i[t].elem!==this||null!=r&&i[t].queue!==r||(i[t].anim.stop(o),e=!1,i.splice(t,1));!e&&o||P.dequeue(this,r)})},finish:function(s){return!1!==s&&(s=s||"fx"),this.each(function(){var e,t=Q.get(this),i=t[s+"queue"],n=t[s+"queueHooks"],r=P.timers,o=i?i.length:0;for(t.finish=!0,P.queue(this,s,[]),n&&n.stop&&n.stop.call(this,!0),e=r.length;e--;)r[e].elem===this&&r[e].queue===s&&(r[e].anim.stop(!0),r.splice(e,1));for(e=0;e<o;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete t.finish})}}),P.each(["toggle","show","hide"],function(e,n){var r=P.fn[n];P.fn[n]=function(e,t,i){return null==e||"boolean"==typeof e?r.apply(this,arguments):this.animate(at(n,!0),e,t,i)}}),P.each({slideDown:at("show"),slideUp:at("hide"),slideToggle:at("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,n){P.fn[e]=function(e,t,i){return this.animate(n,e,t,i)}}),P.timers=[],P.fx.tick=function(){var e,t=0,i=P.timers;for(Ke=Date.now();t<i.length;t++)(e=i[t])()||i[t]!==e||i.splice(t--,1);i.length||P.fx.stop(),Ke=void 0},P.fx.timer=function(e){P.timers.push(e),P.fx.start()},P.fx.interval=13,P.fx.start=function(){et||(et=!0,ot())},P.fx.stop=function(){et=null},P.fx.speeds={slow:600,fast:200,_default:400},P.fn.delay=function(n,e){return n=P.fx&&P.fx.speeds[n]||n,e=e||"fx",this.queue(e,function(e,t){var i=T.setTimeout(e,n);t.stop=function(){T.clearTimeout(i)}})},tt=S.createElement("input"),it=S.createElement("select").appendChild(S.createElement("option")),tt.type="checkbox",v.checkOn=""!==tt.value,v.optSelected=it.selected,(tt=S.createElement("input")).value="t",tt.type="radio",v.radioValue="t"===tt.value;var ct,ft=P.expr.attrHandle;P.fn.extend({attr:function(e,t){return B(this,P.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){P.removeAttr(this,e)})}}),P.extend({attr:function(e,t,i){var n,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?P.prop(e,t,i):(1===o&&P.isXMLDoc(e)||(r=P.attrHooks[t.toLowerCase()]||(P.expr.match.bool.test(t)?ct:void 0)),void 0!==i?null===i?void P.removeAttr(e,t):r&&"set"in r&&void 0!==(n=r.set(e,i,t))?n:(e.setAttribute(t,i+""),i):r&&"get"in r&&null!==(n=r.get(e,t))?n:null==(n=P.find.attr(e,t))?void 0:n)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&A(e,"input")){var i=e.value;return e.setAttribute("type",t),i&&(e.value=i),t}}}},removeAttr:function(e,t){var i,n=0,r=t&&t.match(j);if(r&&1===e.nodeType)for(;i=r[n++];)e.removeAttribute(i)}}),ct={set:function(e,t,i){return!1===t?P.removeAttr(e,i):e.setAttribute(i,i),i}},P.each(P.expr.match.bool.source.match(/\w+/g),function(e,t){var s=ft[t]||P.find.attr;ft[t]=function(e,t,i){var n,r,o=t.toLowerCase();return i||(r=ft[o],ft[o]=n,n=null!=s(e,t,i)?o:null,ft[o]=r),n}});var ht=/^(?:input|select|textarea|button)$/i,pt=/^(?:a|area)$/i;function dt(e){return(e.match(j)||[]).join(" ")}function gt(e){return e.getAttribute&&e.getAttribute("class")||""}function mt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(j)||[]}P.fn.extend({prop:function(e,t){return B(this,P.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[P.propFix[e]||e]})}}),P.extend({prop:function(e,t,i){var n,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&P.isXMLDoc(e)||(t=P.propFix[t]||t,r=P.propHooks[t]),void 0!==i?r&&"set"in r&&void 0!==(n=r.set(e,i,t))?n:e[t]=i:r&&"get"in r&&null!==(n=r.get(e,t))?n:e[t]},propHooks:{tabIndex:{get:function(e){var t=P.find.attr(e,"tabindex");return t?parseInt(t,10):ht.test(e.nodeName)||pt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(P.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),P.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){P.propFix[this.toLowerCase()]=this}),P.fn.extend({addClass:function(t){var e,i,n,r,o,s,a,l=0;if(_(t))return this.each(function(e){P(this).addClass(t.call(this,e,gt(this)))});if((e=mt(t)).length)for(;i=this[l++];)if(r=gt(i),n=1===i.nodeType&&" "+dt(r)+" "){for(s=0;o=e[s++];)n.indexOf(" "+o+" ")<0&&(n+=o+" ");r!==(a=dt(n))&&i.setAttribute("class",a)}return this},removeClass:function(t){var e,i,n,r,o,s,a,l=0;if(_(t))return this.each(function(e){P(this).removeClass(t.call(this,e,gt(this)))});if(!arguments.length)return this.attr("class","");if((e=mt(t)).length)for(;i=this[l++];)if(r=gt(i),n=1===i.nodeType&&" "+dt(r)+" "){for(s=0;o=e[s++];)for(;-1<n.indexOf(" "+o+" ");)n=n.replace(" "+o+" "," ");r!==(a=dt(n))&&i.setAttribute("class",a)}return this},toggleClass:function(r,t){var o=typeof r,s="string"===o||Array.isArray(r);return"boolean"==typeof t&&s?t?this.addClass(r):this.removeClass(r):_(r)?this.each(function(e){P(this).toggleClass(r.call(this,e,gt(this),t),t)}):this.each(function(){var e,t,i,n;if(s)for(t=0,i=P(this),n=mt(r);e=n[t++];)i.hasClass(e)?i.removeClass(e):i.addClass(e);else void 0!==r&&"boolean"!==o||((e=gt(this))&&Q.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===r?"":Q.get(this,"__className__")||""))})},hasClass:function(e){var t,i,n=0;for(t=" "+e+" ";i=this[n++];)if(1===i.nodeType&&-1<(" "+dt(gt(i))+" ").indexOf(t))return!0;return!1}});var vt=/\r/g;P.fn.extend({val:function(i){var n,e,r,t=this[0];return arguments.length?(r=_(i),this.each(function(e){var t;1===this.nodeType&&(null==(t=r?i.call(this,e,P(this).val()):i)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=P.map(t,function(e){return null==e?"":e+""})),(n=P.valHooks[this.type]||P.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,t,"value")||(this.value=t))})):t?(n=P.valHooks[t.type]||P.valHooks[t.nodeName.toLowerCase()])&&"get"in n&&void 0!==(e=n.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(vt,""):null==e?"":e:void 0}}),P.extend({valHooks:{option:{get:function(e){var t=P.find.attr(e,"value");return null!=t?t:dt(P.text(e))}},select:{get:function(e){var t,i,n,r=e.options,o=e.selectedIndex,s="select-one"===e.type,a=s?null:[],l=s?o+1:r.length;for(n=o<0?l:s?o:0;n<l;n++)if(((i=r[n]).selected||n===o)&&!i.disabled&&(!i.parentNode.disabled||!A(i.parentNode,"optgroup"))){if(t=P(i).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var i,n,r=e.options,o=P.makeArray(t),s=r.length;s--;)((n=r[s]).selected=-1<P.inArray(P.valHooks.option.get(n),o))&&(i=!0);return i||(e.selectedIndex=-1),o}}}}),P.each(["radio","checkbox"],function(){P.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<P.inArray(P(e).val(),t)}},v.checkOn||(P.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),v.focusin="onfocusin"in T;var _t=/^(?:focusinfocus|focusoutblur)$/,yt=function(e){e.stopPropagation()};P.extend(P.event,{trigger:function(e,t,i,n){var r,o,s,a,l,u,c,f,h=[i||S],p=m.call(e,"type")?e.type:e,d=m.call(e,"namespace")?e.namespace.split("."):[];if(o=f=s=i=i||S,3!==i.nodeType&&8!==i.nodeType&&!_t.test(p+P.event.triggered)&&(-1<p.indexOf(".")&&(p=(d=p.split(".")).shift(),d.sort()),l=p.indexOf(":")<0&&"on"+p,(e=e[P.expando]?e:new P.Event(p,"object"==typeof e&&e)).isTrigger=n?2:3,e.namespace=d.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:P.makeArray(t,[e]),c=P.event.special[p]||{},n||!c.trigger||!1!==c.trigger.apply(i,t))){if(!n&&!c.noBubble&&!y(i)){for(a=c.delegateType||p,_t.test(a+p)||(o=o.parentNode);o;o=o.parentNode)h.push(o),s=o;s===(i.ownerDocument||S)&&h.push(s.defaultView||s.parentWindow||T)}for(r=0;(o=h[r++])&&!e.isPropagationStopped();)f=o,e.type=1<r?a:c.bindType||p,(u=(Q.get(o,"events")||{})[e.type]&&Q.get(o,"handle"))&&u.apply(o,t),(u=l&&o[l])&&u.apply&&U(o)&&(e.result=u.apply(o,t),!1===e.result&&e.preventDefault());return e.type=p,n||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(h.pop(),t)||!U(i)||l&&_(i[p])&&!y(i)&&((s=i[l])&&(i[l]=null),P.event.triggered=p,e.isPropagationStopped()&&f.addEventListener(p,yt),i[p](),e.isPropagationStopped()&&f.removeEventListener(p,yt),P.event.triggered=void 0,s&&(i[l]=s)),e.result}},simulate:function(e,t,i){var n=P.extend(new P.Event,i,{type:e,isSimulated:!0});P.event.trigger(n,null,t)}}),P.fn.extend({trigger:function(e,t){return this.each(function(){P.event.trigger(e,t,this)})},triggerHandler:function(e,t){var i=this[0];if(i)return P.event.trigger(e,t,i,!0)}}),v.focusin||P.each({focus:"focusin",blur:"focusout"},function(i,n){var r=function(e){P.event.simulate(n,e.target,P.event.fix(e))};P.event.special[n]={setup:function(){var e=this.ownerDocument||this,t=Q.access(e,n);t||e.addEventListener(i,r,!0),Q.access(e,n,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this,t=Q.access(e,n)-1;t?Q.access(e,n,t):(e.removeEventListener(i,r,!0),Q.remove(e,n))}}});var xt=T.location,bt=Date.now(),wt=/\?/;P.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new T.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||P.error("Invalid XML: "+e),t};var Tt=/\[\]$/,St=/\r?\n/g,Pt=/^(?:submit|button|image|reset|file)$/i,Ct=/^(?:input|select|textarea|keygen)/i;function kt(i,e,n,r){var t;if(Array.isArray(e))P.each(e,function(e,t){n||Tt.test(i)?r(i,t):kt(i+"["+("object"==typeof t&&null!=t?e:"")+"]",t,n,r)});else if(n||"object"!==b(e))r(i,e);else for(t in e)kt(i+"["+t+"]",e[t],n,r)}P.param=function(e,t){var i,n=[],r=function(e,t){var i=_(t)?t():t;n[n.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==i?"":i)};if(Array.isArray(e)||e.jquery&&!P.isPlainObject(e))P.each(e,function(){r(this.name,this.value)});else for(i in e)kt(i,e[i],t,r);return n.join("&")},P.fn.extend({serialize:function(){return P.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=P.prop(this,"elements");return e?P.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!P(this).is(":disabled")&&Ct.test(this.nodeName)&&!Pt.test(e)&&(this.checked||!ue.test(e))}).map(function(e,t){var i=P(this).val();return null==i?null:Array.isArray(i)?P.map(i,function(e){return{name:t.name,value:e.replace(St,"\r\n")}}):{name:t.name,value:i.replace(St,"\r\n")}}).get()}});var At=/%20/g,Ot=/#.*$/,Rt=/([?&])_=[^&]*/,Et=/^(.*?):[ \t]*([^\r\n]*)$/gm,Dt=/^(?:GET|HEAD)$/,Nt=/^\/\//,Mt={},Lt={},jt="*/".concat("*"),Ft=S.createElement("a");function It(o){return function(e,t){"string"!=typeof e&&(t=e,e="*");var i,n=0,r=e.toLowerCase().match(j)||[];if(_(t))for(;i=r[n++];)"+"===i[0]?(i=i.slice(1)||"*",(o[i]=o[i]||[]).unshift(t)):(o[i]=o[i]||[]).push(t)}}function zt(t,r,o,s){var a={},l=t===Lt;function u(e){var n;return a[e]=!0,P.each(t[e]||[],function(e,t){var i=t(r,o,s);return"string"!=typeof i||l||a[i]?l?!(n=i):void 0:(r.dataTypes.unshift(i),u(i),!1)}),n}return u(r.dataTypes[0])||!a["*"]&&u("*")}function qt(e,t){var i,n,r=P.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((r[i]?e:n||(n={}))[i]=t[i]);return n&&P.extend(!0,e,n),e}Ft.href=xt.href,P.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:xt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(xt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":jt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":P.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?qt(qt(e,P.ajaxSettings),t):qt(P.ajaxSettings,e)},ajaxPrefilter:It(Mt),ajaxTransport:It(Lt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var c,f,h,i,p,n,d,g,r,o,m=P.ajaxSetup({},t),v=m.context||m,_=m.context&&(v.nodeType||v.jquery)?P(v):P.event,y=P.Deferred(),x=P.Callbacks("once memory"),b=m.statusCode||{},s={},a={},l="canceled",w={readyState:0,getResponseHeader:function(e){var t;if(d){if(!i)for(i={};t=Et.exec(h);)i[t[1].toLowerCase()]=t[2];t=i[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return d?h:null},setRequestHeader:function(e,t){return null==d&&(e=a[e.toLowerCase()]=a[e.toLowerCase()]||e,s[e]=t),this},overrideMimeType:function(e){return null==d&&(m.mimeType=e),this},statusCode:function(e){var t;if(e)if(d)w.always(e[w.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||l;return c&&c.abort(t),u(0,t),this}};if(y.promise(w),m.url=((e||m.url||xt.href)+"").replace(Nt,xt.protocol+"//"),m.type=t.method||t.type||m.method||m.type,m.dataTypes=(m.dataType||"*").toLowerCase().match(j)||[""],null==m.crossDomain){n=S.createElement("a");try{n.href=m.url,n.href=n.href,m.crossDomain=Ft.protocol+"//"+Ft.host!=n.protocol+"//"+n.host}catch(e){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=P.param(m.data,m.traditional)),zt(Mt,m,t,w),d)return w;for(r in(g=P.event&&m.global)&&0==P.active++&&P.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!Dt.test(m.type),f=m.url.replace(Ot,""),m.hasContent?m.data&&m.processData&&0===(m.contentType||"").indexOf("application/x-www-form-urlencoded")&&(m.data=m.data.replace(At,"+")):(o=m.url.slice(f.length),m.data&&(m.processData||"string"==typeof m.data)&&(f+=(wt.test(f)?"&":"?")+m.data,delete m.data),!1===m.cache&&(f=f.replace(Rt,"$1"),o=(wt.test(f)?"&":"?")+"_="+bt+++o),m.url=f+o),m.ifModified&&(P.lastModified[f]&&w.setRequestHeader("If-Modified-Since",P.lastModified[f]),P.etag[f]&&w.setRequestHeader("If-None-Match",P.etag[f])),(m.data&&m.hasContent&&!1!==m.contentType||t.contentType)&&w.setRequestHeader("Content-Type",m.contentType),w.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+jt+"; q=0.01":""):m.accepts["*"]),m.headers)w.setRequestHeader(r,m.headers[r]);if(m.beforeSend&&(!1===m.beforeSend.call(v,w,m)||d))return w.abort();if(l="abort",x.add(m.complete),w.done(m.success),w.fail(m.error),c=zt(Lt,m,t,w)){if(w.readyState=1,g&&_.trigger("ajaxSend",[w,m]),d)return w;m.async&&0<m.timeout&&(p=T.setTimeout(function(){w.abort("timeout")},m.timeout));try{d=!1,c.send(s,u)}catch(e){if(d)throw e;u(-1,e)}}else u(-1,"No Transport");function u(e,t,i,n){var r,o,s,a,l,u=t;d||(d=!0,p&&T.clearTimeout(p),c=void 0,h=n||"",w.readyState=0<e?4:0,r=200<=e&&e<300||304===e,i&&(a=function(e,t,i){for(var n,r,o,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=e.mimeType||t.getResponseHeader("Content-Type"));if(n)for(r in a)if(a[r]&&a[r].test(n)){l.unshift(r);break}if(l[0]in i)o=l[0];else{for(r in i){if(!l[0]||e.converters[r+" "+l[0]]){o=r;break}s||(s=r)}o=o||s}if(o)return o!==l[0]&&l.unshift(o),i[o]}(m,w,i)),a=function(e,t,i,n){var r,o,s,a,l,u={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(o=c.shift();o;)if(e.responseFields[o]&&(i[e.responseFields[o]]=t),!l&&n&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(s=u[l+" "+o]||u["* "+o]))for(r in u)if((a=r.split(" "))[1]===o&&(s=u[l+" "+a[0]]||u["* "+a[0]])){!0===s?s=u[r]:!0!==u[r]&&(o=a[0],c.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(m,a,w,r),r?(m.ifModified&&((l=w.getResponseHeader("Last-Modified"))&&(P.lastModified[f]=l),(l=w.getResponseHeader("etag"))&&(P.etag[f]=l)),204===e||"HEAD"===m.type?u="nocontent":304===e?u="notmodified":(u=a.state,o=a.data,r=!(s=a.error))):(s=u,!e&&u||(u="error",e<0&&(e=0))),w.status=e,w.statusText=(t||u)+"",r?y.resolveWith(v,[o,u,w]):y.rejectWith(v,[w,u,s]),w.statusCode(b),b=void 0,g&&_.trigger(r?"ajaxSuccess":"ajaxError",[w,m,r?o:s]),x.fireWith(v,[w,u]),g&&(_.trigger("ajaxComplete",[w,m]),--P.active||P.event.trigger("ajaxStop")))}return w},getJSON:function(e,t,i){return P.get(e,t,i,"json")},getScript:function(e,t){return P.get(e,void 0,t,"script")}}),P.each(["get","post"],function(e,r){P[r]=function(e,t,i,n){return _(t)&&(n=n||i,i=t,t=void 0),P.ajax(P.extend({url:e,type:r,dataType:n,data:t,success:i},P.isPlainObject(e)&&e))}}),P._evalUrl=function(e){return P.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},P.fn.extend({wrapAll:function(e){var t;return this[0]&&(_(e)&&(e=e.call(this[0])),t=P(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(i){return _(i)?this.each(function(e){P(this).wrapInner(i.call(this,e))}):this.each(function(){var e=P(this),t=e.contents();t.length?t.wrapAll(i):e.append(i)})},wrap:function(t){var i=_(t);return this.each(function(e){P(this).wrapAll(i?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){P(this).replaceWith(this.childNodes)}),this}}),P.expr.pseudos.hidden=function(e){return!P.expr.pseudos.visible(e)},P.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},P.ajaxSettings.xhr=function(){try{return new T.XMLHttpRequest}catch(e){}};var Vt={0:200,1223:204},Ht=P.ajaxSettings.xhr();v.cors=!!Ht&&"withCredentials"in Ht,v.ajax=Ht=!!Ht,P.ajaxTransport(function(r){var o,s;if(v.cors||Ht&&!r.crossDomain)return{send:function(e,t){var i,n=r.xhr();if(n.open(r.type,r.url,r.async,r.username,r.password),r.xhrFields)for(i in r.xhrFields)n[i]=r.xhrFields[i];for(i in r.mimeType&&n.overrideMimeType&&n.overrideMimeType(r.mimeType),r.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)n.setRequestHeader(i,e[i]);o=function(e){return function(){o&&(o=s=n.onload=n.onerror=n.onabort=n.ontimeout=n.onreadystatechange=null,"abort"===e?n.abort():"error"===e?"number"!=typeof n.status?t(0,"error"):t(n.status,n.statusText):t(Vt[n.status]||n.status,n.statusText,"text"!==(n.responseType||"text")||"string"!=typeof n.responseText?{binary:n.response}:{text:n.responseText},n.getAllResponseHeaders()))}},n.onload=o(),s=n.onerror=n.ontimeout=o("error"),void 0!==n.onabort?n.onabort=s:n.onreadystatechange=function(){4===n.readyState&&T.setTimeout(function(){o&&s()})},o=o("abort");try{n.send(r.hasContent&&r.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}}),P.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),P.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return P.globalEval(e),e}}}),P.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),P.ajaxTransport("script",function(i){var n,r;if(i.crossDomain)return{send:function(e,t){n=P("<script>").prop({charset:i.scriptCharset,src:i.url}).on("load error",r=function(e){n.remove(),r=null,e&&t("error"===e.type?404:200,e.type)}),S.head.appendChild(n[0])},abort:function(){r&&r()}}});var Bt,Xt=[],Gt=/(=)\?(?=&|$)|\?\?/;P.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Xt.pop()||P.expando+"_"+bt++;return this[e]=!0,e}}),P.ajaxPrefilter("json jsonp",function(e,t,i){var n,r,o,s=!1!==e.jsonp&&(Gt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return n=e.jsonpCallback=_(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Gt,"$1"+n):!1!==e.jsonp&&(e.url+=(wt.test(e.url)?"&":"?")+e.jsonp+"="+n),e.converters["script json"]=function(){return o||P.error(n+" was not called"),o[0]},e.dataTypes[0]="json",r=T[n],T[n]=function(){o=arguments},i.always(function(){void 0===r?P(T).removeProp(n):T[n]=r,e[n]&&(e.jsonpCallback=t.jsonpCallback,Xt.push(n)),o&&_(r)&&r(o[0]),o=r=void 0}),"script"}),v.createHTMLDocument=((Bt=S.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Bt.childNodes.length),P.parseHTML=function(e,t,i){return"string"!=typeof e?[]:("boolean"==typeof t&&(i=t,t=!1),t||(v.createHTMLDocument?((n=(t=S.implementation.createHTMLDocument("")).createElement("base")).href=S.location.href,t.head.appendChild(n)):t=S),o=!i&&[],(r=O.exec(e))?[t.createElement(r[1])]:(r=_e([e],t,o),o&&o.length&&P(o).remove(),P.merge([],r.childNodes)));var n,r,o},P.fn.load=function(e,t,i){var n,r,o,s=this,a=e.indexOf(" ");return-1<a&&(n=dt(e.slice(a)),e=e.slice(0,a)),_(t)?(i=t,t=void 0):t&&"object"==typeof t&&(r="POST"),0<s.length&&P.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(n?P("<div>").append(P.parseHTML(e)).find(n):e)}).always(i&&function(e,t){s.each(function(){i.apply(this,o||[e.responseText,t,e])})}),this},P.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){P.fn[t]=function(e){return this.on(t,e)}}),P.expr.pseudos.animated=function(t){return P.grep(P.timers,function(e){return t===e.elem}).length},P.offset={setOffset:function(e,t,i){var n,r,o,s,a,l,u=P.css(e,"position"),c=P(e),f={};"static"===u&&(e.style.position="relative"),a=c.offset(),o=P.css(e,"top"),l=P.css(e,"left"),r=("absolute"===u||"fixed"===u)&&-1<(o+l).indexOf("auto")?(s=(n=c.position()).top,n.left):(s=parseFloat(o)||0,parseFloat(l)||0),_(t)&&(t=t.call(e,i,P.extend({},a))),null!=t.top&&(f.top=t.top-a.top+s),null!=t.left&&(f.left=t.left-a.left+r),"using"in t?t.using.call(e,f):c.css(f)}},P.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){P.offset.setOffset(this,t,e)});var e,i,n=this[0];return n?n.getClientRects().length?(e=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:e.top+i.pageYOffset,left:e.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,i,n=this[0],r={top:0,left:0};if("fixed"===P.css(n,"position"))t=n.getBoundingClientRect();else{for(t=this.offset(),i=n.ownerDocument,e=n.offsetParent||i.documentElement;e&&(e===i.body||e===i.documentElement)&&"static"===P.css(e,"position");)e=e.parentNode;e&&e!==n&&1===e.nodeType&&((r=P(e).offset()).top+=P.css(e,"borderTopWidth",!0),r.left+=P.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-P.css(n,"marginTop",!0),left:t.left-r.left-P.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===P.css(e,"position");)e=e.offsetParent;return e||ye})}}),P.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,r){var o="pageYOffset"===r;P.fn[t]=function(e){return B(this,function(e,t,i){var n;if(y(e)?n=e:9===e.nodeType&&(n=e.defaultView),void 0===i)return n?n[r]:e[t];n?n.scrollTo(o?n.pageXOffset:i,o?i:n.pageYOffset):e[t]=i},t,e,arguments.length)}}),P.each(["top","left"],function(e,i){P.cssHooks[i]=Ve(v.pixelPosition,function(e,t){if(t)return t=qe(e,i),Fe.test(t)?P(e).position()[i]+"px":t})}),P.each({Height:"height",Width:"width"},function(s,a){P.each({padding:"inner"+s,content:a,"":"outer"+s},function(n,o){P.fn[o]=function(e,t){var i=arguments.length&&(n||"boolean"!=typeof e),r=n||(!0===e||!0===t?"margin":"border");return B(this,function(e,t,i){var n;return y(e)?0===o.indexOf("outer")?e["inner"+s]:e.document.documentElement["client"+s]:9===e.nodeType?(n=e.documentElement,Math.max(e.body["scroll"+s],n["scroll"+s],e.body["offset"+s],n["offset"+s],n["client"+s])):void 0===i?P.css(e,t,r):P.style(e,t,i,r)},a,i?e:void 0,i)}})}),P.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,i){P.fn[i]=function(e,t){return 0<arguments.length?this.on(i,null,e,t):this.trigger(i)}}),P.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),P.fn.extend({bind:function(e,t,i){return this.on(e,null,t,i)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,i,n){return this.on(t,e,i,n)},undelegate:function(e,t,i){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",i)}}),P.proxy=function(e,t){var i,n,r;if("string"==typeof t&&(i=e[t],t=e,e=i),_(e))return n=a.call(arguments,2),(r=function(){return e.apply(t||this,n.concat(a.call(arguments)))}).guid=e.guid=e.guid||P.guid++,r},P.holdReady=function(e){e?P.readyWait++:P.ready(!0)},P.isArray=Array.isArray,P.parseJSON=JSON.parse,P.nodeName=A,P.isFunction=_,P.isWindow=y,P.camelCase=$,P.type=b,P.now=Date.now,P.isNumeric=function(e){var t=P.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return P});var Wt=T.jQuery,$t=T.$;return P.noConflict=function(e){return T.$===P&&(T.$=$t),e&&T.jQuery===P&&(T.jQuery=Wt),P},e||(T.jQuery=T.$=P),P}),function(t){if(!t.jQuery){var c=function(e,t){return new c.fn.init(e,t)};c.isWindow=function(e){return null!=e&&e==e.window},c.type=function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?i[r.call(e)]||"object":typeof e},c.isArray=Array.isArray||function(e){return"array"===c.type(e)},c.isPlainObject=function(e){var t;if(!e||"object"!==c.type(e)||e.nodeType||c.isWindow(e))return!1;try{if(e.constructor&&!n.call(e,"constructor")&&!n.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(e){return!1}for(t in e);return void 0===t||n.call(e,t)},c.each=function(e,t,i){var n=0,r=e.length,o=a(e);if(i){if(o)for(;n<r&&!1!==t.apply(e[n],i);n++);else for(n in e)if(!1===t.apply(e[n],i))break}else if(o)for(;n<r&&!1!==t.call(e[n],n,e[n]);n++);else for(n in e)if(!1===t.call(e[n],n,e[n]))break;return e},c.data=function(e,t,i){if(void 0===i){var n=(r=e[c.expando])&&o[r];if(void 0===t)return n;if(n&&t in n)return n[t]}else if(void 0!==t){var r=e[c.expando]||(e[c.expando]=++c.uuid);return o[r]=o[r]||{},o[r][t]=i}},c.removeData=function(e,t){var i=e[c.expando],n=i&&o[i];n&&c.each(t,function(e,t){delete n[t]})},c.extend=function(){var e,t,i,n,r,o,s=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"!=typeof s&&"function"!==c.type(s)&&(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(r=arguments[a]))for(n in r)e=s[n],s!==(i=r[n])&&(u&&i&&(c.isPlainObject(i)||(t=c.isArray(i)))?(o=t?(t=!1,e&&c.isArray(e)?e:[]):e&&c.isPlainObject(e)?e:{},s[n]=c.extend(u,o,i)):void 0!==i&&(s[n]=i));return s},c.queue=function(e,t,i){if(e){t=(t||"fx")+"queue";var n,r,o,s=c.data(e,t);return i?(!s||c.isArray(i)?s=c.data(e,t,(o=r||[],null!=(n=i)&&(a(Object(n))?function(e,t){for(var i=+t.length,n=0,r=e.length;n<i;)e[r++]=t[n++];if(i!=i)for(;void 0!==t[n];)e[r++]=t[n++];e.length=r}(o,"string"==typeof n?[n]:n):[].push.call(o,n)),o)):s.push(i),s):s||[]}},c.dequeue=function(e,r){c.each(e.nodeType?[e]:e,function(e,t){r=r||"fx";var i=c.queue(t,r),n=i.shift();"inprogress"===n&&(n=i.shift()),n&&("fx"===r&&i.unshift("inprogress"),n.call(t,function(){c.dequeue(t,r)}))})},c.fn=c.prototype={init:function(e){if(e.nodeType)return this[0]=e,this;throw new Error("Not a DOM node.")},offset:function(){var e=this[0].getBoundingClientRect?this[0].getBoundingClientRect():{top:0,left:0};return{top:e.top+(t.pageYOffset||document.scrollTop||0)-(document.clientTop||0),left:e.left+(t.pageXOffset||document.scrollLeft||0)-(document.clientLeft||0)}},position:function(){function e(){for(var e=this.offsetParent||document;e&&"html"===!e.nodeType.toLowerCase&&"static"===e.style.position;)e=e.offsetParent;return e||document}var t=this[0],e=e.apply(t),i=this.offset(),n=/^(?:body|html)$/i.test(e.nodeName)?{top:0,left:0}:c(e).offset();return i.top-=parseFloat(t.style.marginTop)||0,i.left-=parseFloat(t.style.marginLeft)||0,e.style&&(n.top+=parseFloat(e.style.borderTopWidth)||0,n.left+=parseFloat(e.style.borderLeftWidth)||0),{top:i.top-n.top,left:i.left-n.left}}};var o={};c.expando="velocity"+(new Date).getTime(),c.uuid=0;for(var i={},n=i.hasOwnProperty,r=i.toString,e="Boolean Number String Function Array Date RegExp Object Error".split(" "),s=0;s<e.length;s++)i["[object "+e[s]+"]"]=e[s].toLowerCase();c.fn.init.prototype=c.fn,t.Velocity={Utilities:c}}function a(e){var t=e.length,i=c.type(e);return"function"!==i&&!c.isWindow(e)&&(!(1!==e.nodeType||!t)||("array"===i||0===t||"number"==typeof t&&0<t&&t-1 in e))}}(window),function(e){"object"==typeof module&&"object"==typeof module.exports?module.exports=e():"function"==typeof define&&define.amd?define(e):e()}(function(){return function(e,F,I,z){var n,f=function(){if(I.documentMode)return I.documentMode;for(var e=7;4<e;e--){var t=I.createElement("div");if(t.innerHTML="\x3c!--[if IE "+e+"]><span></span><![endif]--\x3e",t.getElementsByTagName("span").length)return t=null,e}return z}(),t=(n=0,F.webkitRequestAnimationFrame||F.mozRequestAnimationFrame||function(e){var t,i=(new Date).getTime();return t=Math.max(0,16-(i-n)),n=i+t,setTimeout(function(){e(i+t)},t)});function d(e){return V.isWrapped(e)?e=[].slice.call(e):V.isNode(e)&&(e=[e]),e}var q,V={isString:function(e){return"string"==typeof e},isArray:Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},isFunction:function(e){return"[object Function]"===Object.prototype.toString.call(e)},isNode:function(e){return e&&e.nodeType},isNodeList:function(e){return"object"==typeof e&&/^\[object (HTMLCollection|NodeList|Object)\]$/.test(Object.prototype.toString.call(e))&&e.length!==z&&(0===e.length||"object"==typeof e[0]&&0<e[0].nodeType)},isWrapped:function(e){return e&&(e.jquery||F.Zepto&&F.Zepto.zepto.isZ(e))},isSVG:function(e){return F.SVGElement&&e instanceof F.SVGElement},isEmptyObject:function(e){for(var t in e)return!1;return!0}},i=!1;if(e.fn&&e.fn.jquery?(q=e,i=!0):q=F.Velocity.Utilities,f<=8&&!i)throw new Error("Velocity: IE8 and below require jQuery to be loaded before Velocity.");if(!(f<=7)){var r="swing",H={State:{isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),isAndroid:/Android/i.test(navigator.userAgent),isGingerbread:/Android 2\.3\.[3-7]/i.test(navigator.userAgent),isChrome:F.chrome,isFirefox:/Firefox/i.test(navigator.userAgent),prefixElement:I.createElement("div"),prefixMatches:{},scrollAnchor:null,scrollPropertyLeft:null,scrollPropertyTop:null,isTicking:!1,calls:[]},CSS:{},Utilities:q,Redirects:{},Easings:{},Promise:F.Promise,defaults:{queue:"",duration:400,easing:r,begin:z,complete:z,progress:z,display:z,visibility:z,loop:!1,delay:!1,mobileHA:!0,_cacheValues:!0},init:function(e){q.data(e,"velocity",{isSVG:V.isSVG(e),isAnimating:!1,computedStyle:null,tweensContainer:null,rootPropertyValueCache:{},transformCache:{}})},hook:null,mock:!1,version:{major:1,minor:2,patch:2},debug:!1};F.pageYOffset!==z?(H.State.scrollAnchor=F,H.State.scrollPropertyLeft="pageXOffset",H.State.scrollPropertyTop="pageYOffset"):(H.State.scrollAnchor=I.documentElement||I.body.parentNode||I.body,H.State.scrollPropertyLeft="scrollLeft",H.State.scrollPropertyTop="scrollTop");var o=function(){function _(e){return-e.tension*e.x-e.friction*e.v}function y(e,t,i){var n={x:e.x+i.dx*t,v:e.v+i.dv*t,tension:e.tension,friction:e.friction};return{dx:n.v,dv:_(n)}}return function e(t,i,n){var r,o,s,a,l,u,c,f,h,p,d,g={x:-1,v:0,tension:null,friction:null},m=[0],v=0;for(t=parseFloat(t)||500,i=parseFloat(i)||20,n=n||null,g.tension=t,g.friction=i,o=(r=null!==n)?(v=e(t,i))/n*.016:.016;l=o,void 0,u={dx:(a=s||g).v,dv:_(a)},c=y(a,.5*l,u),f=y(a,.5*l,c),h=y(a,l,f),p=1/6*(u.dx+2*(c.dx+f.dx)+h.dx),d=1/6*(u.dv+2*(c.dv+f.dv)+h.dv),a.x=a.x+p*l,a.v=a.v+d*l,s=a,m.push(1+s.x),v+=16,1e-4<Math.abs(s.x)&&1e-4<Math.abs(s.v););return r?function(e){return m[e*(m.length-1)|0]}:v}}();H.Easings={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},spring:function(e){return 1-Math.cos(4.5*e*Math.PI)*Math.exp(6*-e)}},q.each([["ease",[.25,.1,.25,1]],["ease-in",[.42,0,1,1]],["ease-out",[0,0,.58,1]],["ease-in-out",[.42,0,.58,1]],["easeInSine",[.47,0,.745,.715]],["easeOutSine",[.39,.575,.565,1]],["easeInOutSine",[.445,.05,.55,.95]],["easeInQuad",[.55,.085,.68,.53]],["easeOutQuad",[.25,.46,.45,.94]],["easeInOutQuad",[.455,.03,.515,.955]],["easeInCubic",[.55,.055,.675,.19]],["easeOutCubic",[.215,.61,.355,1]],["easeInOutCubic",[.645,.045,.355,1]],["easeInQuart",[.895,.03,.685,.22]],["easeOutQuart",[.165,.84,.44,1]],["easeInOutQuart",[.77,0,.175,1]],["easeInQuint",[.755,.05,.855,.06]],["easeOutQuint",[.23,1,.32,1]],["easeInOutQuint",[.86,0,.07,1]],["easeInExpo",[.95,.05,.795,.035]],["easeOutExpo",[.19,1,.22,1]],["easeInOutExpo",[1,0,0,1]],["easeInCirc",[.6,.04,.98,.335]],["easeOutCirc",[.075,.82,.165,1]],["easeInOutCirc",[.785,.135,.15,.86]]],function(e,t){H.Easings[t[0]]=s.apply(null,t[1])});var B=H.CSS={RegEx:{isHex:/^#([A-f\d]{3}){1,2}$/i,valueUnwrap:/^[A-z]+\((.*)\)$/i,wrappedValueAlreadyExtracted:/[0-9.]+ [0-9.]+ [0-9.]+( [0-9.]+)?/,valueSplit:/([A-z]+\(.+\))|(([A-z0-9#-.]+?)(?=\s|$))/gi},Lists:{colors:["fill","stroke","stopColor","color","backgroundColor","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","outlineColor"],transformsBase:["translateX","translateY","scale","scaleX","scaleY","skewX","skewY","rotateZ"],transforms3D:["transformPerspective","translateZ","scaleZ","rotateX","rotateY"]},Hooks:{templates:{textShadow:["Color X Y Blur","black 0px 0px 0px"],boxShadow:["Color X Y Blur Spread","black 0px 0px 0px 0px"],clip:["Top Right Bottom Left","0px 0px 0px 0px"],backgroundPosition:["X Y","0% 0%"],transformOrigin:["X Y Z","50% 50% 0px"],perspectiveOrigin:["X Y","50% 50%"]},registered:{},register:function(){for(var e=0;e<B.Lists.colors.length;e++){var t="color"===B.Lists.colors[e]?"0 0 0 1":"255 255 255 1";B.Hooks.templates[B.Lists.colors[e]]=["Red Green Blue Alpha",t]}var i,n,r;if(f)for(i in B.Hooks.templates){r=(n=B.Hooks.templates[i])[0].split(" ");var o=n[1].match(B.RegEx.valueSplit);"Color"===r[0]&&(r.push(r.shift()),o.push(o.shift()),B.Hooks.templates[i]=[r.join(" "),o.join(" ")])}for(i in B.Hooks.templates)for(var e in r=(n=B.Hooks.templates[i])[0].split(" ")){var s=i+r[e],a=e;B.Hooks.registered[s]=[i,a]}},getRoot:function(e){var t=B.Hooks.registered[e];return t?t[0]:e},cleanRootPropertyValue:function(e,t){return B.RegEx.valueUnwrap.test(t)&&(t=t.match(B.RegEx.valueUnwrap)[1]),B.Values.isCSSNullValue(t)&&(t=B.Hooks.templates[e][1]),t},extractValue:function(e,t){var i=B.Hooks.registered[e];if(i){var n=i[0],r=i[1];return(t=B.Hooks.cleanRootPropertyValue(n,t)).toString().match(B.RegEx.valueSplit)[r]}return t},injectValue:function(e,t,i){var n=B.Hooks.registered[e];if(n){var r,o=n[0],s=n[1];return(r=(i=B.Hooks.cleanRootPropertyValue(o,i)).toString().match(B.RegEx.valueSplit))[s]=t,r.join(" ")}return i}},Normalizations:{registered:{clip:function(e,t,i){switch(e){case"name":return"clip";case"extract":var n;return n=B.RegEx.wrappedValueAlreadyExtracted.test(i)?i:(n=i.toString().match(B.RegEx.valueUnwrap))?n[1].replace(/,(\s+)?/g," "):i;case"inject":return"rect("+i+")"}},blur:function(e,t,i){switch(e){case"name":return H.State.isFirefox?"filter":"-webkit-filter";case"extract":var n=parseFloat(i);if(!n&&0!==n){var r=i.toString().match(/blur\(([0-9]+[A-z]+)\)/i);n=r?r[1]:0}return n;case"inject":return parseFloat(i)?"blur("+i+")":"none"}},opacity:function(e,t,i){if(f<=8)switch(e){case"name":return"filter";case"extract":var n=i.toString().match(/alpha\(opacity=(.*)\)/i);return i=n?n[1]/100:1;case"inject":return(t.style.zoom=1)<=parseFloat(i)?"":"alpha(opacity="+parseInt(100*parseFloat(i),10)+")"}else switch(e){case"name":return"opacity";case"extract":case"inject":return i}}},register:function(){f<=9||H.State.isGingerbread||(B.Lists.transformsBase=B.Lists.transformsBase.concat(B.Lists.transforms3D));for(var e=0;e<B.Lists.transformsBase.length;e++)!function(){var r=B.Lists.transformsBase[e];B.Normalizations.registered[r]=function(e,t,i){switch(e){case"name":return"transform";case"extract":return X(t)===z||X(t).transformCache[r]===z?/^scale/i.test(r)?1:0:X(t).transformCache[r].replace(/[()]/g,"");case"inject":var n=!1;switch(r.substr(0,r.length-1)){case"translate":n=!/(%|px|em|rem|vw|vh|\d)$/i.test(i);break;case"scal":case"scale":H.State.isAndroid&&X(t).transformCache[r]===z&&i<1&&(i=1),n=!/(\d)$/i.test(i);break;case"skew":case"rotate":n=!/(deg|\d)$/i.test(i)}return n||(X(t).transformCache[r]="("+i+")"),X(t).transformCache[r]}}}();for(e=0;e<B.Lists.colors.length;e++)!function(){var s=B.Lists.colors[e];B.Normalizations.registered[s]=function(e,t,i){switch(e){case"name":return s;case"extract":var n;if(B.RegEx.wrappedValueAlreadyExtracted.test(i))n=i;else{var r,o={black:"rgb(0, 0, 0)",blue:"rgb(0, 0, 255)",gray:"rgb(128, 128, 128)",green:"rgb(0, 128, 0)",red:"rgb(255, 0, 0)",white:"rgb(255, 255, 255)"};/^[A-z]+$/i.test(i)?r=o[i]!==z?o[i]:o.black:B.RegEx.isHex.test(i)?r="rgb("+B.Values.hexToRgb(i).join(" ")+")":/^rgba?\(/i.test(i)||(r=o.black),n=(r||i).toString().match(B.RegEx.valueUnwrap)[1].replace(/,(\s+)?/g," ")}return f<=8||3!==n.split(" ").length||(n+=" 1"),n;case"inject":return f<=8?4===i.split(" ").length&&(i=i.split(/\s+/).slice(0,3).join(" ")):3===i.split(" ").length&&(i+=" 1"),(f<=8?"rgb":"rgba")+"("+i.replace(/\s+/g,",").replace(/\.(\d)+(?=,)/g,"")+")"}}}()}},Names:{camelCase:function(e){return e.replace(/-(\w)/g,function(e,t){return t.toUpperCase()})},SVGAttribute:function(e){var t="width|height|x|y|cx|cy|r|rx|ry|x1|x2|y1|y2";return(f||H.State.isAndroid&&!H.State.isChrome)&&(t+="|transform"),new RegExp("^("+t+")$","i").test(e)},prefixCheck:function(e){if(H.State.prefixMatches[e])return[H.State.prefixMatches[e],!0];for(var t=["","Webkit","Moz","ms","O"],i=0,n=t.length;i<n;i++){var r;if(r=0===i?e:t[i]+e.replace(/^\w/,function(e){return e.toUpperCase()}),V.isString(H.State.prefixElement.style[r]))return[H.State.prefixMatches[e]=r,!0]}return[e,!1]}},Values:{hexToRgb:function(e){var t;return e=e.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,function(e,t,i,n){return t+t+i+i+n+n}),(t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e))?[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]:[0,0,0]},isCSSNullValue:function(e){return 0==e||/^(none|auto|transparent|(rgba\(0, ?0, ?0, ?0\)))$/i.test(e)},getUnitType:function(e){return/^(rotate|skew)/i.test(e)?"deg":/(^(scale|scaleX|scaleY|scaleZ|alpha|flexGrow|flexHeight|zIndex|fontWeight)$)|((opacity|red|green|blue|alpha)$)/i.test(e)?"":"px"},getDisplayType:function(e){var t=e&&e.tagName.toString().toLowerCase();return/^(b|big|i|small|tt|abbr|acronym|cite|code|dfn|em|kbd|strong|samp|var|a|bdo|br|img|map|object|q|script|span|sub|sup|button|input|label|select|textarea)$/i.test(t)?"inline":/^(li)$/i.test(t)?"list-item":/^(tr)$/i.test(t)?"table-row":/^(table)$/i.test(t)?"table":/^(tbody)$/i.test(t)?"table-row-group":"block"},addClass:function(e,t){e.classList?e.classList.add(t):e.className+=(e.className.length?" ":"")+t},removeClass:function(e,t){e.classList?e.classList.remove(t):e.className=e.className.toString().replace(new RegExp("(^|\\s)"+t.split(" ").join("|")+"(\\s|$)","gi")," ")}},getPropertyValue:function(e,t,i,u){function c(e,t){var i=0;if(f<=8)i=q.css(e,t);else{var n,r=!1;function o(){r&&B.setPropertyValue(e,"display","none")}if(/^(width|height)$/.test(t)&&0===B.getPropertyValue(e,"display")&&(r=!0,B.setPropertyValue(e,"display",B.Values.getDisplayType(e))),!u){if("height"===t&&"border-box"!==B.getPropertyValue(e,"boxSizing").toString().toLowerCase()){var s=e.offsetHeight-(parseFloat(B.getPropertyValue(e,"borderTopWidth"))||0)-(parseFloat(B.getPropertyValue(e,"borderBottomWidth"))||0)-(parseFloat(B.getPropertyValue(e,"paddingTop"))||0)-(parseFloat(B.getPropertyValue(e,"paddingBottom"))||0);return o(),s}if("width"===t&&"border-box"!==B.getPropertyValue(e,"boxSizing").toString().toLowerCase()){var a=e.offsetWidth-(parseFloat(B.getPropertyValue(e,"borderLeftWidth"))||0)-(parseFloat(B.getPropertyValue(e,"borderRightWidth"))||0)-(parseFloat(B.getPropertyValue(e,"paddingLeft"))||0)-(parseFloat(B.getPropertyValue(e,"paddingRight"))||0);return o(),a}}n=X(e)===z?F.getComputedStyle(e,null):X(e).computedStyle?X(e).computedStyle:X(e).computedStyle=F.getComputedStyle(e,null),"borderColor"===t&&(t="borderTopColor"),""!==(i=9===f&&"filter"===t?n.getPropertyValue(t):n[t])&&null!==i||(i=e.style[t]),o()}if("auto"===i&&/^(top|right|bottom|left)$/i.test(t)){var l=c(e,"position");("fixed"===l||"absolute"===l&&/top|left/i.test(t))&&(i=q(e).position()[t]+"px")}return i}var n;if(B.Hooks.registered[t]){var r=t,o=B.Hooks.getRoot(r);i===z&&(i=B.getPropertyValue(e,B.Names.prefixCheck(o)[0])),B.Normalizations.registered[o]&&(i=B.Normalizations.registered[o]("extract",e,i)),n=B.Hooks.extractValue(r,i)}else if(B.Normalizations.registered[t]){var s,a;"transform"!==(s=B.Normalizations.registered[t]("name",e))&&(a=c(e,B.Names.prefixCheck(s)[0]),B.Values.isCSSNullValue(a)&&B.Hooks.templates[t]&&(a=B.Hooks.templates[t][1])),n=B.Normalizations.registered[t]("extract",e,a)}if(!/^[\d-]/.test(n))if(X(e)&&X(e).isSVG&&B.Names.SVGAttribute(t))if(/^(height|width)$/i.test(t))try{n=e.getBBox()[t]}catch(e){n=0}else n=e.getAttribute(t);else n=c(e,B.Names.prefixCheck(t)[0]);return B.Values.isCSSNullValue(n)&&(n=0),2<=H.debug&&console.log("Get "+t+": "+n),n},setPropertyValue:function(e,t,i,n,r){var o=t;if("scroll"===t)r.container?r.container["scroll"+r.direction]=i:"Left"===r.direction?F.scrollTo(i,r.alternateValue):F.scrollTo(r.alternateValue,i);else if(B.Normalizations.registered[t]&&"transform"===B.Normalizations.registered[t]("name",e))B.Normalizations.registered[t]("inject",e,i),o="transform",i=X(e).transformCache[t];else{if(B.Hooks.registered[t]){var s=t,a=B.Hooks.getRoot(t);n=n||B.getPropertyValue(e,a),i=B.Hooks.injectValue(s,i,n),t=a}if(B.Normalizations.registered[t]&&(i=B.Normalizations.registered[t]("inject",e,i),t=B.Normalizations.registered[t]("name",e)),o=B.Names.prefixCheck(t)[0],f<=8)try{e.style[o]=i}catch(e){H.debug&&console.log("Browser does not support ["+i+"] for ["+o+"]")}else X(e)&&X(e).isSVG&&B.Names.SVGAttribute(t)?e.setAttribute(t,i):e.style[o]=i;2<=H.debug&&console.log("Set "+t+" ("+o+"): "+i)}return[o,i]},flushTransformCache:function(t){var i="";if((f||H.State.isAndroid&&!H.State.isChrome)&&X(t).isSVG){function e(e){return parseFloat(B.getPropertyValue(t,e))}var n={translate:[e("translateX"),e("translateY")],skewX:[e("skewX")],skewY:[e("skewY")],scale:1!==e("scale")?[e("scale"),e("scale")]:[e("scaleX"),e("scaleY")],rotate:[e("rotateZ"),0,0]};q.each(X(t).transformCache,function(e){/^translate/i.test(e)?e="translate":/^scale/i.test(e)?e="scale":/^rotate/i.test(e)&&(e="rotate"),n[e]&&(i+=e+"("+n[e].join(" ")+") ",delete n[e])})}else{var r,o;q.each(X(t).transformCache,function(e){if(r=X(t).transformCache[e],"transformPerspective"===e)return o=r,!0;9===f&&"rotateZ"===e&&(e="rotate"),i+=e+r+" "}),o&&(i="perspective"+o+" "+i)}B.setPropertyValue(t,"transform",i)}};B.Hooks.register(),B.Normalizations.register(),H.hook=function(e,n,r){var o=z;return e=d(e),q.each(e,function(e,t){if(X(t)===z&&H.init(t),r===z)o===z&&(o=H.CSS.getPropertyValue(t,n));else{var i=H.CSS.setPropertyValue(t,n,r);"transform"===i[0]&&H.CSS.flushTransformCache(t),o=i}}),o};var g=function(){function e(){return t?M.promise||null:i}var t,i,n,A,O,R,r=arguments[0]&&(arguments[0].p||q.isPlainObject(arguments[0].properties)&&!arguments[0].properties.names||V.isString(arguments[0].properties));if(V.isWrapped(this)?(t=!1,n=0,i=A=this):(t=!0,n=1,A=r?arguments[0].elements||arguments[0].e:arguments[0]),A=d(A)){R=r?(O=arguments[0].properties||arguments[0].p,arguments[0].options||arguments[0].o):(O=arguments[n],arguments[n+1]);var E=A.length,D=0;if(!/^(stop|finish)$/i.test(O)&&!q.isPlainObject(R)){R={};for(var o=n+1;o<arguments.length;o++)V.isArray(arguments[o])||!/^(fast|normal|slow)$/i.test(arguments[o])&&!/^\d/.test(arguments[o])?V.isString(arguments[o])||V.isArray(arguments[o])?R.easing=arguments[o]:V.isFunction(arguments[o])&&(R.complete=arguments[o]):R.duration=arguments[o]}var N,M={promise:null,resolver:null,rejecter:null};switch(t&&H.Promise&&(M.promise=new H.Promise(function(e,t){M.resolver=e,M.rejecter=t})),O){case"scroll":N="scroll";break;case"reverse":N="reverse";break;case"finish":case"stop":q.each(A,function(e,t){X(t)&&X(t).delayTimer&&(clearTimeout(X(t).delayTimer.setTimeout),X(t).delayTimer.next&&X(t).delayTimer.next(),delete X(t).delayTimer)});var s=[];return q.each(H.State.calls,function(r,o){o&&q.each(o[1],function(e,i){var n=R===z?"":R;if(!0!==n&&o[2].queue!==n&&(R!==z||!1!==o[2].queue))return!0;q.each(A,function(e,t){t===i&&((!0===R||V.isString(R))&&(q.each(q.queue(t,V.isString(R)?R:""),function(e,t){V.isFunction(t)&&t(null,!0)}),q.queue(t,V.isString(R)?R:"",[])),"stop"===O?(X(t)&&X(t).tweensContainer&&!1!==n&&q.each(X(t).tweensContainer,function(e,t){t.endValue=t.currentValue}),s.push(r)):"finish"===O&&(o[2].duration=1))})})}),"stop"===O&&(q.each(s,function(e,t){P(t,!0)}),M.promise&&M.resolver(A)),e();default:if(!q.isPlainObject(O)||V.isEmptyObject(O)){if(V.isString(O)&&H.Redirects[O]){var a=(c=q.extend({},R)).duration,l=c.delay||0;return!0===c.backwards&&(A=q.extend(!0,[],A).reverse()),q.each(A,function(e,t){parseFloat(c.stagger)?c.delay=l+parseFloat(c.stagger)*e:V.isFunction(c.stagger)&&(c.delay=l+c.stagger.call(t,e,E)),c.drag&&(c.duration=parseFloat(a)||(/^(callout|transition)/.test(O)?1e3:400),c.duration=Math.max(c.duration*(c.backwards?1-e/E:(e+1)/E),.75*c.duration,200)),H.Redirects[O].call(t,t,c||{},e,E,A,M.promise?M:z)}),e()}var u="Velocity: First argument ("+O+") was not a property map, a known action, or a registered redirect. Aborting.";return M.promise?M.rejecter(new Error(u)):console.log(u),e()}N="start"}var c,f,L={lastParent:null,lastPosition:null,lastFontSize:null,lastPercentToPxWidth:null,lastPercentToPxHeight:null,lastEmToPx:null,remToPx:null,vwToPx:null,vhToPx:null},j=[];if(q.each(A,function(e,t){V.isNode(t)&&function(){var S,P=this,C=q.extend({},H.defaults,R),k={};switch(X(P)===z&&H.init(P),parseFloat(C.delay)&&!1!==C.queue&&q.queue(P,C.queue,function(e){H.velocityQueueEntryFlag=!0,X(P).delayTimer={setTimeout:setTimeout(e,parseFloat(C.delay)),next:e}}),C.duration.toString().toLowerCase()){case"fast":C.duration=200;break;case"normal":C.duration=400;break;case"slow":C.duration=600;break;default:C.duration=parseFloat(C.duration)||1}function i(e){if(C.begin&&0===D)try{C.begin.call(A,A)}catch(e){setTimeout(function(){throw e},1)}if("scroll"===N){var t,i,n,r=/^x$/i.test(C.axis)?"Left":"Top",o=parseFloat(C.offset)||0;C.container?V.isWrapped(C.container)||V.isNode(C.container)?(C.container=C.container[0]||C.container,n=(t=C.container["scroll"+r])+q(P).position()[r.toLowerCase()]+o):C.container=null:(t=H.State.scrollAnchor[H.State["scrollProperty"+r]],i=H.State.scrollAnchor[H.State["scrollProperty"+("Left"===r?"Top":"Left")]],n=q(P).offset()[r.toLowerCase()]+o),k={scroll:{rootPropertyValue:!1,startValue:t,currentValue:t,endValue:n,unitType:"",easing:C.easing,scrollData:{container:C.container,direction:r,alternateValue:i}},element:P},H.debug&&console.log("tweensContainer (scroll): ",k.scroll,P)}else if("reverse"===N){if(!X(P).tweensContainer)return void q.dequeue(P,C.queue);"none"===X(P).opts.display&&(X(P).opts.display="auto"),"hidden"===X(P).opts.visibility&&(X(P).opts.visibility="visible"),X(P).opts.loop=!1,X(P).opts.begin=null,X(P).opts.complete=null,R.easing||delete C.easing,R.duration||delete C.duration,C=q.extend({},X(P).opts,C);var s=q.extend(!0,{},X(P).tweensContainer);for(var a in s)if("element"!==a){var l=s[a].startValue;s[a].startValue=s[a].currentValue=s[a].endValue,s[a].endValue=l,V.isEmptyObject(R)||(s[a].easing=C.easing),H.debug&&console.log("reverse tweensContainer ("+a+"): "+JSON.stringify(s[a]),P)}k=s}else if("start"===N){function f(e,t){var i=z,n=z,r=z;return V.isArray(e)?(i=e[0],!V.isArray(e[1])&&/^[\d-]/.test(e[1])||V.isFunction(e[1])||B.RegEx.isHex.test(e[1])?r=e[1]:(V.isString(e[1])&&!B.RegEx.isHex.test(e[1])||V.isArray(e[1]))&&(n=t?e[1]:G(e[1],C.duration),e[2]!==z&&(r=e[2]))):i=e,t||(n=n||C.easing),V.isFunction(i)&&(i=i.call(P,D,E)),V.isFunction(r)&&(r=r.call(P,D,E)),[i||0,n,r]}for(var u in X(P).tweensContainer&&!0===X(P).isAnimating&&(s=X(P).tweensContainer),q.each(O,function(e,t){if(RegExp("^"+B.Lists.colors.join("$|^")+"$").test(e)){var i=f(t,!0),n=i[0],r=i[1],o=i[2];if(B.RegEx.isHex.test(n)){for(var s=["Red","Green","Blue"],a=B.Values.hexToRgb(n),l=o?B.Values.hexToRgb(o):z,u=0;u<s.length;u++){var c=[a[u]];r&&c.push(r),l!==z&&c.push(l[u]),O[e+s[u]]=c}delete O[e]}}}),O){var c=f(O[u]),h=c[0],p=c[1],d=c[2];u=B.Names.camelCase(u);var g=B.Hooks.getRoot(u),m=!1;if(X(P).isSVG||"tween"===g||!1!==B.Names.prefixCheck(g)[1]||B.Normalizations.registered[g]!==z){(C.display!==z&&null!==C.display&&"none"!==C.display||C.visibility!==z&&"hidden"!==C.visibility)&&/opacity|filter/.test(u)&&!d&&0!==h&&(d=0),C._cacheValues&&s&&s[u]?(d===z&&(d=s[u].endValue+s[u].unitType),m=X(P).rootPropertyValueCache[g]):B.Hooks.registered[u]?d===z?(m=B.getPropertyValue(P,g),d=B.getPropertyValue(P,u,m)):m=B.Hooks.templates[g][1]:d===z&&(d=B.getPropertyValue(P,u));var v,_,y,x=!1;if(d=(v=w(u,d))[0],y=v[1],h=(v=w(u,h))[0].replace(/^([+-\/*])=/,function(e,t){return x=t,""}),_=v[1],d=parseFloat(d)||0,h=parseFloat(h)||0,"%"===_&&(/^(fontSize|lineHeight)$/.test(u)?(h/=100,_="em"):/^scale/.test(u)?(h/=100,_=""):/(Red|Green|Blue)$/i.test(u)&&(h=h/100*255,_="")),/[\/*]/.test(x))_=y;else if(y!==_&&0!==d)if(0===h)_=y;else{S=S||T();var b=/margin|padding|left|right|width|text|word|letter/i.test(u)||/X$/.test(u)||"x"===u?"x":"y";switch(y){case"%":d*="x"===b?S.percentToPxWidth:S.percentToPxHeight;break;case"px":break;default:d*=S[y+"ToPx"]}switch(_){case"%":d*=1/("x"===b?S.percentToPxWidth:S.percentToPxHeight);break;case"px":break;default:d*=1/S[_+"ToPx"]}}switch(x){case"+":h=d+h;break;case"-":h=d-h;break;case"*":h*=d;break;case"/":h=d/h}k[u]={rootPropertyValue:m,startValue:d,currentValue:d,endValue:h,unitType:_,easing:p},H.debug&&console.log("tweensContainer ("+u+"): "+JSON.stringify(k[u]),P)}else H.debug&&console.log("Skipping ["+g+"] due to a lack of browser support.");function w(e,t){var i,n;return n=(t||"0").toString().toLowerCase().replace(/[%A-z]+$/,function(e){return i=e,""}),i||(i=B.Values.getUnitType(e)),[n,i]}function T(){var e={myParent:P.parentNode||I.body,position:B.getPropertyValue(P,"position"),fontSize:B.getPropertyValue(P,"fontSize")},t=e.position===L.lastPosition&&e.myParent===L.lastParent,i=e.fontSize===L.lastFontSize;L.lastParent=e.myParent,L.lastPosition=e.position,L.lastFontSize=e.fontSize;var n={};if(i&&t)n.emToPx=L.lastEmToPx,n.percentToPxWidth=L.lastPercentToPxWidth,n.percentToPxHeight=L.lastPercentToPxHeight;else{var r=X(P).isSVG?I.createElementNS("http://www.w3.org/2000/svg","rect"):I.createElement("div");H.init(r),e.myParent.appendChild(r),q.each(["overflow","overflowX","overflowY"],function(e,t){H.CSS.setPropertyValue(r,t,"hidden")}),H.CSS.setPropertyValue(r,"position",e.position),H.CSS.setPropertyValue(r,"fontSize",e.fontSize),H.CSS.setPropertyValue(r,"boxSizing","content-box"),q.each(["minWidth","maxWidth","width","minHeight","maxHeight","height"],function(e,t){H.CSS.setPropertyValue(r,t,"100%")}),H.CSS.setPropertyValue(r,"paddingLeft","100em"),n.percentToPxWidth=L.lastPercentToPxWidth=(parseFloat(B.getPropertyValue(r,"width",null,!0))||1)/100,n.percentToPxHeight=L.lastPercentToPxHeight=(parseFloat(B.getPropertyValue(r,"height",null,!0))||1)/100,n.emToPx=L.lastEmToPx=(parseFloat(B.getPropertyValue(r,"paddingLeft"))||1)/100,e.myParent.removeChild(r)}return null===L.remToPx&&(L.remToPx=parseFloat(B.getPropertyValue(I.body,"fontSize"))||16),null===L.vwToPx&&(L.vwToPx=parseFloat(F.innerWidth)/100,L.vhToPx=parseFloat(F.innerHeight)/100),n.remToPx=L.remToPx,n.vwToPx=L.vwToPx,n.vhToPx=L.vhToPx,1<=H.debug&&console.log("Unit ratios: "+JSON.stringify(n),P),n}}k.element=P}k.element&&(B.Values.addClass(P,"velocity-animating"),j.push(k),""===C.queue&&(X(P).tweensContainer=k,X(P).opts=C),X(P).isAnimating=!0,D===E-1?(H.State.calls.push([j,A,C,null,M.resolver]),!1===H.State.isTicking&&(H.State.isTicking=!0,W())):D++)}!1!==H.mock&&(!0===H.mock?C.duration=C.delay=1:(C.duration*=parseFloat(H.mock)||1,C.delay*=parseFloat(H.mock)||1)),C.easing=G(C.easing,C.duration),C.begin&&!V.isFunction(C.begin)&&(C.begin=null),C.progress&&!V.isFunction(C.progress)&&(C.progress=null),C.complete&&!V.isFunction(C.complete)&&(C.complete=null),C.display!==z&&null!==C.display&&(C.display=C.display.toString().toLowerCase(),"auto"===C.display&&(C.display=H.CSS.Values.getDisplayType(P))),C.visibility!==z&&null!==C.visibility&&(C.visibility=C.visibility.toString().toLowerCase()),C.mobileHA=C.mobileHA&&H.State.isMobile&&!H.State.isGingerbread,!1===C.queue?C.delay?setTimeout(i,C.delay):i():q.queue(P,C.queue,function(e,t){if(!0===t)return M.promise&&M.resolver(A),!0;H.velocityQueueEntryFlag=!0,i()}),""!==C.queue&&"fx"!==C.queue||"inprogress"===q.queue(P)[0]||q.dequeue(P)}.call(t)}),(c=q.extend({},H.defaults,R)).loop=parseInt(c.loop),f=2*c.loop-1,c.loop)for(var h=0;h<f;h++){var p={delay:c.delay,progress:c.progress};h===f-1&&(p.display=c.display,p.visibility=c.visibility,p.complete=c.complete),g(A,"reverse",p)}return e()}};(H=q.extend(g,H)).animate=g;var S=F.requestAnimationFrame||t;return H.State.isMobile||I.hidden===z||I.addEventListener("visibilitychange",function(){I.hidden?(S=function(e){return setTimeout(function(){e(!0)},16)},W()):S=F.requestAnimationFrame||t}),e.Velocity=H,e!==F&&(e.fn.velocity=g,e.fn.velocity.defaults=H.defaults),q.each(["Down","Up"],function(e,f){H.Redirects["slide"+f]=function(i,e,t,n,r,o){var s=q.extend({},e),a=s.begin,l=s.complete,u={height:"",marginTop:"",marginBottom:"",paddingTop:"",paddingBottom:""},c={};s.display===z&&(s.display="Down"===f?"inline"===H.CSS.Values.getDisplayType(i)?"inline-block":"block":"none"),s.begin=function(){for(var e in a&&a.call(r,r),u){c[e]=i.style[e];var t=H.CSS.getPropertyValue(i,e);u[e]="Down"===f?[t,0]:[0,t]}c.overflow=i.style.overflow,i.style.overflow="hidden"},s.complete=function(){for(var e in c)i.style[e]=c[e];l&&l.call(r,r),o&&o.resolver(r)},H(i,u,s)}}),q.each(["In","Out"],function(e,u){H.Redirects["fade"+u]=function(e,t,i,n,r,o){var s=q.extend({},t),a={opacity:"In"===u?1:0},l=s.complete;s.complete=i!==n-1?s.begin=null:function(){l&&l.call(r,r),o&&o.resolver(r)},s.display===z&&(s.display="In"===u?"auto":"none"),H(this,a,s)}}),H}function X(e){var t=q.data(e,"velocity");return null===t?z:t}function s(s,t,a,i){var l=4,u=1e-7,c=10,f=11,h=1/(f-1),e="Float32Array"in F;if(4!==arguments.length)return!1;for(var n=0;n<4;++n)if("number"!=typeof arguments[n]||isNaN(arguments[n])||!isFinite(arguments[n]))return!1;s=Math.min(s,1),a=Math.min(a,1),s=Math.max(s,0),a=Math.max(a,0);var p=e?new Float32Array(f):new Array(f);function r(e,t){return 1-3*t+3*e}function o(e,t){return 3*t-6*e}function d(e){return 3*e}function g(e,t,i){return((r(t,i)*e+o(t,i))*e+d(t))*e}function m(e,t,i){return 3*r(t,i)*e*e+2*o(t,i)*e+d(t)}function v(e){for(var t=0,i=1,n=f-1;i!=n&&p[i]<=e;++i)t+=h;var r=t+(e-p[--i])/(p[i+1]-p[i])*h,o=m(r,s,a);return.001<=o?function(e,t){for(var i=0;i<l;++i){var n=m(t,s,a);if(0===n)return t;t-=(g(t,s,a)-e)/n}return t}(e,r):0==o?r:function(e,t,i){for(var n,r,o=0;0<(n=g(r=t+(i-t)/2,s,a)-e)?i=r:t=r,Math.abs(n)>u&&++o<c;);return r}(e,t,t+h)}var _=!1;function y(){_=!0,s==t&&a==i||function(){for(var e=0;e<f;++e)p[e]=g(e*h,s,a)}()}var x=function(e){return _||y(),s===t&&a===i?e:0===e?0:1===e?1:g(v(e),t,i)};x.getControlPoints=function(){return[{x:s,y:t},{x:a,y:i}]};var b="generateBezier("+[s,t,a,i]+")";return x.toString=function(){return b},x}function G(e,t){var i=e;return V.isString(e)?H.Easings[e]||(i=!1):i=V.isArray(e)&&1===e.length?function(t){return function(e){return Math.round(e*t)*(1/t)}}.apply(null,e):V.isArray(e)&&2===e.length?o.apply(null,e.concat([t])):!(!V.isArray(e)||4!==e.length)&&s.apply(null,e),!1===i&&(i=H.Easings[H.defaults.easing]?H.defaults.easing:r),i}function W(e){if(e){var t=(new Date).getTime(),i=H.State.calls.length;1e4<i&&(H.State.calls=function(e){for(var t=-1,i=e?e.length:0,n=[];++t<i;){var r=e[t];r&&n.push(r)}return n}(H.State.calls));for(var n=0;n<i;n++)if(H.State.calls[n]){var r=H.State.calls[n],o=r[0],s=r[2],a=r[3],l=!!a,u=null;a||(a=H.State.calls[n][3]=t-16);for(var c=Math.min((t-a)/s.duration,1),f=0,h=o.length;f<h;f++){var p=o[f],d=p.element;if(X(d)){var g=!1;if(s.display!==z&&null!==s.display&&"none"!==s.display){if("flex"===s.display){q.each(["-webkit-box","-moz-box","-ms-flexbox","-webkit-flex"],function(e,t){B.setPropertyValue(d,"display",t)})}B.setPropertyValue(d,"display",s.display)}for(var m in s.visibility!==z&&"hidden"!==s.visibility&&B.setPropertyValue(d,"visibility",s.visibility),p)if("element"!==m){var v,_=p[m],y=V.isString(_.easing)?H.Easings[_.easing]:_.easing;if(1===c)v=_.endValue;else{var x=_.endValue-_.startValue;if(v=_.startValue+x*y(c,s,x),!l&&v===_.currentValue)continue}if(_.currentValue=v,"tween"===m)u=v;else{if(B.Hooks.registered[m]){var b=B.Hooks.getRoot(m),w=X(d).rootPropertyValueCache[b];w&&(_.rootPropertyValue=w)}var T=B.setPropertyValue(d,m,_.currentValue+(0===parseFloat(v)?"":_.unitType),_.rootPropertyValue,_.scrollData);B.Hooks.registered[m]&&(B.Normalizations.registered[b]?X(d).rootPropertyValueCache[b]=B.Normalizations.registered[b]("extract",null,T[1]):X(d).rootPropertyValueCache[b]=T[1]),"transform"===T[0]&&(g=!0)}}s.mobileHA&&X(d).transformCache.translate3d===z&&(X(d).transformCache.translate3d="(0px, 0px, 0px)",g=!0),g&&B.flushTransformCache(d)}}s.display!==z&&"none"!==s.display&&(H.State.calls[n][2].display=!1),s.visibility!==z&&"hidden"!==s.visibility&&(H.State.calls[n][2].visibility=!1),s.progress&&s.progress.call(r[1],r[1],c,Math.max(0,a+s.duration-t),a,u),1===c&&P(n)}}H.State.isTicking&&S(W)}function P(e,t){if(!H.State.calls[e])return!1;for(var i=H.State.calls[e][0],n=H.State.calls[e][1],r=H.State.calls[e][2],o=H.State.calls[e][4],s=!1,a=0,l=i.length;a<l;a++){var u=i[a].element;if(t||r.loop||("none"===r.display&&B.setPropertyValue(u,"display",r.display),"hidden"===r.visibility&&B.setPropertyValue(u,"visibility",r.visibility)),!0!==r.loop&&(q.queue(u)[1]===z||!/\.velocityQueueEntryFlag/i.test(q.queue(u)[1]))&&X(u)){X(u).isAnimating=!1;var c=!(X(u).rootPropertyValueCache={});q.each(B.Lists.transforms3D,function(e,t){var i=/^scale/.test(t)?1:0,n=X(u).transformCache[t];X(u).transformCache[t]!==z&&new RegExp("^\\("+i+"[^.]").test(n)&&(c=!0,delete X(u).transformCache[t])}),r.mobileHA&&(c=!0,delete X(u).transformCache.translate3d),c&&B.flushTransformCache(u),B.Values.removeClass(u,"velocity-animating")}if(!t&&r.complete&&!r.loop&&a===l-1)try{r.complete.call(n,n)}catch(e){setTimeout(function(){throw e},1)}o&&!0!==r.loop&&o(n),X(u)&&!0===r.loop&&!t&&(q.each(X(u).tweensContainer,function(e,t){/^rotate/.test(e)&&360===parseFloat(t.endValue)&&(t.endValue=0,t.startValue=360),/^backgroundPosition/.test(e)&&100===parseFloat(t.endValue)&&"%"===t.unitType&&(t.endValue=0,t.startValue=100)}),H(u,"reverse",{loop:!0,delay:r.delay})),!1!==r.queue&&q.dequeue(u,r.queue)}H.State.calls[e]=!1;for(var f=0,h=H.State.calls.length;f<h;f++)if(!1!==H.State.calls[f]){s=!0;break}!1===s&&(H.State.isTicking=!1,delete H.State.calls,H.State.calls=[])}jQuery.fn.velocity=jQuery.fn.animate}(window.jQuery||window.Zepto||window,window,document)});var _gsScope="undefined"!=typeof module&&module.exports&&"undefined"!=typeof global?global:this||window;function addSlide(e,t,i,n,r){scene=new ScrollMagic.Scene({triggerElement:t,duration:i,offset:n}),timeline=new TimelineMax;for(var o=0;o<r.length;o+=2)"default"==r[o+1]?timeline.add(r[o]):timeline.add(r[o],r[o+1]);scene.setTween(timeline),DEBUG&&(scene.addIndicators({name:"Slide "+slideNum}),slideNum++),scene.addTo(e)}(_gsScope._gsQueue||(_gsScope._gsQueue=[])).push(function(){"use strict";var e,l,t,T,b,w,S,v,i,_,P,y,x,p,d,m,n;_gsScope._gsDefine("TweenMax",["core.Animation","core.SimpleTimeline","TweenLite"],function(n,c,_){var m=function(e){var t,i=[],n=e.length;for(t=0;t!==n;i.push(e[t++]));return i},v=function(e,t,i){var n,r,o=e.cycle;for(n in o)r=o[n],e[n]="function"==typeof r?r(i,t[i]):r[i%r.length];delete e.cycle},y=function(e,t,i){_.call(this,e,t,i),this._cycle=0,this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._repeat&&this._uncache(!0),this.render=y.prototype.render},x=1e-10,b=_._internals,w=b.isSelector,T=b.isArray,e=y.prototype=_.to({},.1,{}),S=[];y.version="1.20.3",e.constructor=y,e.kill()._gc=!1,y.killTweensOf=y.killDelayedCallsTo=_.killTweensOf,y.getTweensOf=_.getTweensOf,y.lagSmoothing=_.lagSmoothing,y.ticker=_.ticker,y.render=_.render,e.invalidate=function(){return this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._yoyoEase=null,this._uncache(!0),_.prototype.invalidate.call(this)},e.updateTo=function(e,t){var i,n=this.ratio,r=this.vars.immediateRender||e.immediateRender;for(i in t&&this._startTime<this._timeline._time&&(this._startTime=this._timeline._time,this._uncache(!1),this._gc?this._enabled(!0,!1):this._timeline.insert(this,this._startTime-this._delay)),e)this.vars[i]=e[i];if(this._initted||r)if(t)this._initted=!1,r&&this.render(0,!0,!0);else if(this._gc&&this._enabled(!0,!1),this._notifyPluginsOfEnabled&&this._firstPT&&_._onPluginEvent("_onDisable",this),.998<this._time/this._duration){var o=this._totalTime;this.render(0,!0,!1),this._initted=!1,this.render(o,!0,!1)}else if(this._initted=!1,this._init(),0<this._time||r)for(var s,a=1/(1-n),l=this._firstPT;l;)s=l.s+l.c,l.c*=a,l.s=s-l.c,l=l._next;return this},e.render=function(e,t,i){this._initted||0===this._duration&&this.vars.repeat&&this.invalidate();var n,r,o,s,a,l,u,c,f,h=this._dirty?this.totalDuration():this._totalDuration,p=this._time,d=this._totalTime,g=this._cycle,m=this._duration,v=this._rawPrevTime;if(h-1e-7<=e&&0<=e?(this._totalTime=h,this._cycle=this._repeat,this._yoyo&&0!=(1&this._cycle)?(this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0):(this._time=m,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1),this._reversed||(n=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===m&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(e=0),(v<0||e<=0&&-1e-7<=e||v===x&&"isPause"!==this.data)&&v!==e&&(i=!0,x<v&&(r="onReverseComplete")),this._rawPrevTime=c=!t||e||v===e?e:x)):e<1e-7?(this._totalTime=this._time=this._cycle=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==d||0===m&&0<v)&&(r="onReverseComplete",n=this._reversed),e<0&&(this._active=!1,0===m&&(this._initted||!this.vars.lazy||i)&&(0<=v&&(i=!0),this._rawPrevTime=c=!t||e||v===e?e:x)),this._initted||(i=!0)):(this._totalTime=this._time=e,0!==this._repeat&&(s=m+this._repeatDelay,this._cycle=this._totalTime/s>>0,0!==this._cycle&&this._cycle===this._totalTime/s&&d<=e&&this._cycle--,this._time=this._totalTime-this._cycle*s,this._yoyo&&0!=(1&this._cycle)&&(this._time=m-this._time,(f=this._yoyoEase||this.vars.yoyoEase)&&(this._yoyoEase||(!0!==f||this._initted?this._yoyoEase=f=!0===f?this._ease:f instanceof Ease?f:Ease.map[f]:(f=this.vars.ease,this._yoyoEase=f=f?f instanceof Ease?f:"function"==typeof f?new Ease(f,this.vars.easeParams):Ease.map[f]||_.defaultEase:_.defaultEase)),this.ratio=f?1-f.getRatio((m-this._time)/m):0)),this._time>m?this._time=m:this._time<0&&(this._time=0)),this._easeType&&!f?(a=this._time/m,(1===(l=this._easeType)||3===l&&.5<=a)&&(a=1-a),3===l&&(a*=2),1===(u=this._easePower)?a*=a:2===u?a*=a*a:3===u?a*=a*a*a:4===u&&(a*=a*a*a*a),1===l?this.ratio=1-a:2===l?this.ratio=a:this._time/m<.5?this.ratio=a/2:this.ratio=1-a/2):f||(this.ratio=this._ease.getRatio(this._time/m))),p!==this._time||i||g!==this._cycle){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration))return this._time=p,this._totalTime=d,this._rawPrevTime=v,this._cycle=g,b.lazyTweens.push(this),void(this._lazy=[e,t]);!this._time||n||f?n&&this._ease._calcEnd&&!f&&(this.ratio=this._ease.getRatio(0===this._time?0:1)):this.ratio=this._ease.getRatio(this._time/m)}for(!1!==this._lazy&&(this._lazy=!1),this._active||!this._paused&&this._time!==p&&0<=e&&(this._active=!0),0===d&&(2===this._initted&&0<e&&this._init(),this._startAt&&(0<=e?this._startAt.render(e,!0,i):r||(r="_dummyGS")),this.vars.onStart&&(0!==this._totalTime||0===m)&&(t||this._callback("onStart"))),o=this._firstPT;o;)o.f?o.t[o.p](o.c*this.ratio+o.s):o.t[o.p]=o.c*this.ratio+o.s,o=o._next;this._onUpdate&&(e<0&&this._startAt&&this._startTime&&this._startAt.render(e,!0,i),t||(this._totalTime!==d||r)&&this._callback("onUpdate")),this._cycle!==g&&(t||this._gc||this.vars.onRepeat&&this._callback("onRepeat")),r&&(!this._gc||i)&&(e<0&&this._startAt&&!this._onUpdate&&this._startTime&&this._startAt.render(e,!0,i),n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!t&&this.vars[r]&&this._callback(r),0===m&&this._rawPrevTime===x&&c!==x&&(this._rawPrevTime=0))}else d!==this._totalTime&&this._onUpdate&&(t||this._callback("onUpdate"))},y.to=function(e,t,i){return new y(e,t,i)},y.from=function(e,t,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new y(e,t,i)},y.fromTo=function(e,t,i,n){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,new y(e,t,n)},y.staggerTo=y.allTo=function(e,t,i,n,r,o,s){n=n||0;var a,l,u,c,f=0,h=[],p=function(){i.onComplete&&i.onComplete.apply(i.onCompleteScope||this,arguments),r.apply(s||i.callbackScope||this,o||S)},d=i.cycle,g=i.startAt&&i.startAt.cycle;for(T(e)||("string"==typeof e&&(e=_.selector(e)||e),w(e)&&(e=m(e))),e=e||[],n<0&&((e=m(e)).reverse(),n*=-1),a=e.length-1,u=0;u<=a;u++){for(c in l={},i)l[c]=i[c];if(d&&(v(l,e,u),null!=l.duration&&(t=l.duration,delete l.duration)),g){for(c in g=l.startAt={},i.startAt)g[c]=i.startAt[c];v(l.startAt,e,u)}l.delay=f+(l.delay||0),u===a&&r&&(l.onComplete=p),h[u]=new y(e[u],t,l),f+=n}return h},y.staggerFrom=y.allFrom=function(e,t,i,n,r,o,s){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,y.staggerTo(e,t,i,n,r,o,s)},y.staggerFromTo=y.allFromTo=function(e,t,i,n,r,o,s,a){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,y.staggerTo(e,t,n,r,o,s,a)},y.delayedCall=function(e,t,i,n,r){return new y(t,0,{delay:e,onComplete:t,onCompleteParams:i,callbackScope:n,onReverseComplete:t,onReverseCompleteParams:i,immediateRender:!1,useFrames:r,overwrite:0})},y.set=function(e,t){return new y(e,0,t)},y.isTweening=function(e){return 0<_.getTweensOf(e,!0).length};var o=function(e,t){for(var i=[],n=0,r=e._first;r;)r instanceof _?i[n++]=r:(t&&(i[n++]=r),n=(i=i.concat(o(r,t))).length),r=r._next;return i},f=y.getAllTweens=function(e){return o(n._rootTimeline,e).concat(o(n._rootFramesTimeline,e))};y.killAll=function(e,t,i,n){null==t&&(t=!0),null==i&&(i=!0);var r,o,s,a=f(0!=n),l=a.length,u=t&&i&&n;for(s=0;s<l;s++)o=a[s],(u||o instanceof c||(r=o.target===o.vars.onComplete)&&i||t&&!r)&&(e?o.totalTime(o._reversed?0:o.totalDuration()):o._enabled(!1,!1))},y.killChildTweensOf=function(e,t){if(null!=e){var i,n,r,o,s,a=b.tweenLookup;if("string"==typeof e&&(e=_.selector(e)||e),w(e)&&(e=m(e)),T(e))for(o=e.length;-1<--o;)y.killChildTweensOf(e[o],t);else{for(r in i=[],a)for(n=a[r].target.parentNode;n;)n===e&&(i=i.concat(a[r].tweens)),n=n.parentNode;for(s=i.length,o=0;o<s;o++)t&&i[o].totalTime(i[o].totalDuration()),i[o]._enabled(!1,!1)}}};var r=function(e,t,i,n){t=!1!==t,i=!1!==i;for(var r,o,s=f(n=!1!==n),a=t&&i&&n,l=s.length;-1<--l;)o=s[l],(a||o instanceof c||(r=o.target===o.vars.onComplete)&&i||t&&!r)&&o.paused(e)};return y.pauseAll=function(e,t,i){r(!0,e,t,i)},y.resumeAll=function(e,t,i){r(!1,e,t,i)},y.globalTimeScale=function(e){var t=n._rootTimeline,i=_.ticker.time;return arguments.length?(e=e||x,t._startTime=i-(i-t._startTime)*t._timeScale/e,t=n._rootFramesTimeline,i=_.ticker.frame,t._startTime=i-(i-t._startTime)*t._timeScale/e,t._timeScale=n._rootTimeline._timeScale=e,e):t._timeScale},e.progress=function(e,t){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-e:e)+this._cycle*(this._duration+this._repeatDelay),t):this._time/this.duration()},e.totalProgress=function(e,t){return arguments.length?this.totalTime(this.totalDuration()*e,t):this._totalTime/this.totalDuration()},e.time=function(e,t){return arguments.length?(this._dirty&&this.totalDuration(),e>this._duration&&(e=this._duration),this._yoyo&&0!=(1&this._cycle)?e=this._duration-e+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(e+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(e,t)):this._time},e.duration=function(e){return arguments.length?n.prototype.duration.call(this,e):this._duration},e.totalDuration=function(e){return arguments.length?-1===this._repeat?this:this.duration((e-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat,this._dirty=!1),this._totalDuration)},e.repeat=function(e){return arguments.length?(this._repeat=e,this._uncache(!0)):this._repeat},e.repeatDelay=function(e){return arguments.length?(this._repeatDelay=e,this._uncache(!0)):this._repeatDelay},e.yoyo=function(e){return arguments.length?(this._yoyo=e,this):this._yoyo},y},!0),_gsScope._gsDefine("TimelineLite",["core.Animation","core.SimpleTimeline","TweenLite"],function(c,f,h){var p=function(e){f.call(this,e),this._labels={},this.autoRemoveChildren=!0===this.vars.autoRemoveChildren,this.smoothChildTiming=!0===this.vars.smoothChildTiming,this._sortChildren=!0,this._onUpdate=this.vars.onUpdate;var t,i,n=this.vars;for(i in n)t=n[i],m(t)&&-1!==t.join("").indexOf("{self}")&&(n[i]=this._swapSelfInParams(t));m(n.tweens)&&this.add(n.tweens,0,n.align,n.stagger)},g=1e-10,e=h._internals,t=p._internals={},d=e.isSelector,m=e.isArray,v=e.lazyTweens,_=e.lazyRender,s=_gsScope._gsDefine.globals,y=function(e){var t,i={};for(t in e)i[t]=e[t];return i},x=function(e,t,i){var n,r,o=e.cycle;for(n in o)r=o[n],e[n]="function"==typeof r?r(i,t[i]):r[i%r.length];delete e.cycle},o=t.pauseCallback=function(){},b=function(e){var t,i=[],n=e.length;for(t=0;t!==n;i.push(e[t++]));return i},i=p.prototype=new f;return p.version="1.20.3",i.constructor=p,i.kill()._gc=i._forcingPlayhead=i._hasPause=!1,i.to=function(e,t,i,n){var r=i.repeat&&s.TweenMax||h;return t?this.add(new r(e,t,i),n):this.set(e,i,n)},i.from=function(e,t,i,n){return this.add((i.repeat&&s.TweenMax||h).from(e,t,i),n)},i.fromTo=function(e,t,i,n,r){var o=n.repeat&&s.TweenMax||h;return t?this.add(o.fromTo(e,t,i,n),r):this.set(e,n,r)},i.staggerTo=function(e,t,i,n,r,o,s,a){var l,u,c=new p({onComplete:o,onCompleteParams:s,callbackScope:a,smoothChildTiming:this.smoothChildTiming}),f=i.cycle;for("string"==typeof e&&(e=h.selector(e)||e),d(e=e||[])&&(e=b(e)),(n=n||0)<0&&((e=b(e)).reverse(),n*=-1),u=0;u<e.length;u++)(l=y(i)).startAt&&(l.startAt=y(l.startAt),l.startAt.cycle&&x(l.startAt,e,u)),f&&(x(l,e,u),null!=l.duration&&(t=l.duration,delete l.duration)),c.to(e[u],t,l,u*n);return this.add(c,r)},i.staggerFrom=function(e,t,i,n,r,o,s,a){return i.immediateRender=0!=i.immediateRender,i.runBackwards=!0,this.staggerTo(e,t,i,n,r,o,s,a)},i.staggerFromTo=function(e,t,i,n,r,o,s,a,l){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,this.staggerTo(e,t,n,r,o,s,a,l)},i.call=function(e,t,i,n){return this.add(h.delayedCall(0,e,t,i),n)},i.set=function(e,t,i){return i=this._parseTimeOrLabel(i,0,!0),null==t.immediateRender&&(t.immediateRender=i===this._time&&!this._paused),this.add(new h(e,0,t),i)},p.exportRoot=function(e,t){null==(e=e||{}).smoothChildTiming&&(e.smoothChildTiming=!0);var i,n,r,o,s=new p(e),a=s._timeline;for(null==t&&(t=!0),a._remove(s,!0),s._startTime=0,s._rawPrevTime=s._time=s._totalTime=a._time,r=a._first;r;)o=r._next,t&&r instanceof h&&r.target===r.vars.onComplete||((n=r._startTime-r._delay)<0&&(i=1),s.add(r,n)),r=o;return a.add(s,0),i&&s.totalDuration(),s},i.add=function(e,t,i,n){var r,o,s,a,l,u;if("number"!=typeof t&&(t=this._parseTimeOrLabel(t,0,!0,e)),!(e instanceof c)){if(e instanceof Array||e&&e.push&&m(e)){for(i=i||"normal",n=n||0,r=t,o=e.length,s=0;s<o;s++)m(a=e[s])&&(a=new p({tweens:a})),this.add(a,r),"string"!=typeof a&&"function"!=typeof a&&("sequence"===i?r=a._startTime+a.totalDuration()/a._timeScale:"start"===i&&(a._startTime-=a.delay())),r+=n;return this._uncache(!0)}if("string"==typeof e)return this.addLabel(e,t);if("function"!=typeof e)throw"Cannot add "+e+" into the timeline; it is not a tween, timeline, function, or string.";e=h.delayedCall(0,e)}if(f.prototype.add.call(this,e,t),e._time&&e.render((this.rawTime()-e._startTime)*e._timeScale,!1,!1),(this._gc||this._time===this._duration)&&!this._paused&&this._duration<this.duration())for(u=(l=this).rawTime()>e._startTime;l._timeline;)u&&l._timeline.smoothChildTiming?l.totalTime(l._totalTime,!0):l._gc&&l._enabled(!0,!1),l=l._timeline;return this},i.remove=function(e){if(e instanceof c){this._remove(e,!1);var t=e._timeline=e.vars.useFrames?c._rootFramesTimeline:c._rootTimeline;return e._startTime=(e._paused?e._pauseTime:t._time)-(e._reversed?e.totalDuration()-e._totalTime:e._totalTime)/e._timeScale,this}if(e instanceof Array||e&&e.push&&m(e)){for(var i=e.length;-1<--i;)this.remove(e[i]);return this}return"string"==typeof e?this.removeLabel(e):this.kill(null,e)},i._remove=function(e,t){return f.prototype._remove.call(this,e,t),this._last?this._time>this.duration()&&(this._time=this._duration,this._totalTime=this._totalDuration):this._time=this._totalTime=this._duration=this._totalDuration=0,this},i.append=function(e,t){return this.add(e,this._parseTimeOrLabel(null,t,!0,e))},i.insert=i.insertMultiple=function(e,t,i,n){return this.add(e,t||0,i,n)},i.appendMultiple=function(e,t,i,n){return this.add(e,this._parseTimeOrLabel(null,t,!0,e),i,n)},i.addLabel=function(e,t){return this._labels[e]=this._parseTimeOrLabel(t),this},i.addPause=function(e,t,i,n){var r=h.delayedCall(0,o,i,n||this);return r.vars.onComplete=r.vars.onReverseComplete=t,r.data="isPause",this._hasPause=!0,this.add(r,e)},i.removeLabel=function(e){return delete this._labels[e],this},i.getLabelTime=function(e){return null!=this._labels[e]?this._labels[e]:-1},i._parseTimeOrLabel=function(e,t,i,n){var r,o;if(n instanceof c&&n.timeline===this)this.remove(n);else if(n&&(n instanceof Array||n.push&&m(n)))for(o=n.length;-1<--o;)n[o]instanceof c&&n[o].timeline===this&&this.remove(n[o]);if(r="number"!=typeof e||t?99999999999<this.duration()?this.recent().endTime(!1):this._duration:0,"string"==typeof t)return this._parseTimeOrLabel(t,i&&"number"==typeof e&&null==this._labels[t]?e-r:0,i);if(t=t||0,"string"!=typeof e||!isNaN(e)&&null==this._labels[e])null==e&&(e=r);else{if(-1===(o=e.indexOf("=")))return null==this._labels[e]?i?this._labels[e]=r+t:t:this._labels[e]+t;t=parseInt(e.charAt(o-1)+"1",10)*Number(e.substr(o+1)),e=1<o?this._parseTimeOrLabel(e.substr(0,o-1),0,i):r}return Number(e)+t},i.seek=function(e,t){return this.totalTime("number"==typeof e?e:this._parseTimeOrLabel(e),!1!==t)},i.stop=function(){return this.paused(!0)},i.gotoAndPlay=function(e,t){return this.play(e,t)},i.gotoAndStop=function(e,t){return this.pause(e,t)},i.render=function(e,t,i){this._gc&&this._enabled(!0,!1);var n,r,o,s,a,l,u,c=this._time,f=this._dirty?this.totalDuration():this._totalDuration,h=this._startTime,p=this._timeScale,d=this._paused;if(c!==this._time&&(e+=this._time-c),f-1e-7<=e&&0<=e)this._totalTime=this._time=f,this._reversed||this._hasPausedChild()||(r=!0,s="onComplete",a=!!this._timeline.autoRemoveChildren,0===this._duration&&(e<=0&&-1e-7<=e||this._rawPrevTime<0||this._rawPrevTime===g)&&this._rawPrevTime!==e&&this._first&&(a=!0,this._rawPrevTime>g&&(s="onReverseComplete"))),this._rawPrevTime=this._duration||!t||e||this._rawPrevTime===e?e:g,e=f+1e-4;else if(e<1e-7)if(this._totalTime=this._time=0,(0!==c||0===this._duration&&this._rawPrevTime!==g&&(0<this._rawPrevTime||e<0&&0<=this._rawPrevTime))&&(s="onReverseComplete",r=this._reversed),e<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(a=r=!0,s="onReverseComplete"):0<=this._rawPrevTime&&this._first&&(a=!0),this._rawPrevTime=e;else{if(this._rawPrevTime=this._duration||!t||e||this._rawPrevTime===e?e:g,0===e&&r)for(n=this._first;n&&0===n._startTime;)n._duration||(r=!1),n=n._next;e=0,this._initted||(a=!0)}else{if(this._hasPause&&!this._forcingPlayhead&&!t){if(c<=e)for(n=this._first;n&&n._startTime<=e&&!l;)n._duration||"isPause"!==n.data||n.ratio||0===n._startTime&&0===this._rawPrevTime||(l=n),n=n._next;else for(n=this._last;n&&n._startTime>=e&&!l;)n._duration||"isPause"===n.data&&0<n._rawPrevTime&&(l=n),n=n._prev;l&&(this._time=e=l._startTime,this._totalTime=e+this._cycle*(this._totalDuration+this._repeatDelay))}this._totalTime=this._time=this._rawPrevTime=e}if(this._time!==c&&this._first||i||a||l){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._time!==c&&0<e&&(this._active=!0),0===c&&this.vars.onStart&&(0===this._time&&this._duration||t||this._callback("onStart")),c<=(u=this._time))for(n=this._first;n&&(o=n._next,u===this._time&&(!this._paused||d));)(n._active||n._startTime<=u&&!n._paused&&!n._gc)&&(l===n&&this.pause(),n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(e-n._startTime)*n._timeScale,t,i):n.render((e-n._startTime)*n._timeScale,t,i)),n=o;else for(n=this._last;n&&(o=n._prev,u===this._time&&(!this._paused||d));){if(n._active||n._startTime<=c&&!n._paused&&!n._gc){if(l===n){for(l=n._prev;l&&l.endTime()>this._time;)l.render(l._reversed?l.totalDuration()-(e-l._startTime)*l._timeScale:(e-l._startTime)*l._timeScale,t,i),l=l._prev;l=null,this.pause()}n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(e-n._startTime)*n._timeScale,t,i):n.render((e-n._startTime)*n._timeScale,t,i)}n=o}this._onUpdate&&(t||(v.length&&_(),this._callback("onUpdate"))),s&&(this._gc||(h===this._startTime||p!==this._timeScale)&&(0===this._time||f>=this.totalDuration())&&(r&&(v.length&&_(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!t&&this.vars[s]&&this._callback(s)))}},i._hasPausedChild=function(){for(var e=this._first;e;){if(e._paused||e instanceof p&&e._hasPausedChild())return!0;e=e._next}return!1},i.getChildren=function(e,t,i,n){n=n||-9999999999;for(var r=[],o=this._first,s=0;o;)o._startTime<n||(o instanceof h?!1!==t&&(r[s++]=o):(!1!==i&&(r[s++]=o),!1!==e&&(s=(r=r.concat(o.getChildren(!0,t,i))).length))),o=o._next;return r},i.getTweensOf=function(e,t){var i,n,r=this._gc,o=[],s=0;for(r&&this._enabled(!0,!0),n=(i=h.getTweensOf(e)).length;-1<--n;)(i[n].timeline===this||t&&this._contains(i[n]))&&(o[s++]=i[n]);return r&&this._enabled(!1,!0),o},i.recent=function(){return this._recent},i._contains=function(e){for(var t=e.timeline;t;){if(t===this)return!0;t=t.timeline}return!1},i.shiftChildren=function(e,t,i){i=i||0;for(var n,r=this._first,o=this._labels;r;)r._startTime>=i&&(r._startTime+=e),r=r._next;if(t)for(n in o)o[n]>=i&&(o[n]+=e);return this._uncache(!0)},i._kill=function(e,t){if(!e&&!t)return this._enabled(!1,!1);for(var i=t?this.getTweensOf(t):this.getChildren(!0,!0,!1),n=i.length,r=!1;-1<--n;)i[n]._kill(e,t)&&(r=!0);return r},i.clear=function(e){var t=this.getChildren(!1,!0,!0),i=t.length;for(this._time=this._totalTime=0;-1<--i;)t[i]._enabled(!1,!1);return!1!==e&&(this._labels={}),this._uncache(!0)},i.invalidate=function(){for(var e=this._first;e;)e.invalidate(),e=e._next;return c.prototype.invalidate.call(this)},i._enabled=function(e,t){if(e===this._gc)for(var i=this._first;i;)i._enabled(e,!0),i=i._next;return f.prototype._enabled.call(this,e,t)},i.totalTime=function(e,t,i){this._forcingPlayhead=!0;var n=c.prototype.totalTime.apply(this,arguments);return this._forcingPlayhead=!1,n},i.duration=function(e){return arguments.length?(0!==this.duration()&&0!==e&&this.timeScale(this._duration/e),this):(this._dirty&&this.totalDuration(),this._duration)},i.totalDuration=function(e){if(arguments.length)return e&&this.totalDuration()?this.timeScale(this._totalDuration/e):this;if(this._dirty){for(var t,i,n=0,r=this._last,o=999999999999;r;)t=r._prev,r._dirty&&r.totalDuration(),r._startTime>o&&this._sortChildren&&!r._paused&&!this._calculatingDuration?(this._calculatingDuration=1,this.add(r,r._startTime-r._delay),this._calculatingDuration=0):o=r._startTime,r._startTime<0&&!r._paused&&(n-=r._startTime,this._timeline.smoothChildTiming&&(this._startTime+=r._startTime/this._timeScale,this._time-=r._startTime,this._totalTime-=r._startTime,this._rawPrevTime-=r._startTime),this.shiftChildren(-r._startTime,!1,-9999999999),o=0),n<(i=r._startTime+r._totalDuration/r._timeScale)&&(n=i),r=t;this._duration=this._totalDuration=n,this._dirty=!1}return this._totalDuration},i.paused=function(e){if(!e)for(var t=this._first,i=this._time;t;)t._startTime===i&&"isPause"===t.data&&(t._rawPrevTime=0),t=t._next;return c.prototype.paused.apply(this,arguments)},i.usesFrames=function(){for(var e=this._timeline;e._timeline;)e=e._timeline;return e===c._rootFramesTimeline},i.rawTime=function(e){return e&&(this._paused||this._repeat&&0<this.time()&&this.totalProgress()<1)?this._totalTime%(this._duration+this._repeatDelay):this._paused?this._totalTime:(this._timeline.rawTime(e)-this._startTime)*this._timeScale},p},!0),_gsScope._gsDefine("TimelineMax",["TimelineLite","TweenLite","easing.Ease"],function(t,a,e){var i=function(e){t.call(this,e),this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._cycle=0,this._yoyo=!0===this.vars.yoyo,this._dirty=!0},C=1e-10,n=a._internals,k=n.lazyTweens,A=n.lazyRender,l=_gsScope._gsDefine.globals,u=new e(null,null,1,0),r=i.prototype=new t;return r.constructor=i,r.kill()._gc=!1,i.version="1.20.3",r.invalidate=function(){return this._yoyo=!0===this.vars.yoyo,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),t.prototype.invalidate.call(this)},r.addCallback=function(e,t,i,n){return this.add(a.delayedCall(0,e,i,n),t)},r.removeCallback=function(e,t){if(e)if(null==t)this._kill(null,e);else for(var i=this.getTweensOf(e,!1),n=i.length,r=this._parseTimeOrLabel(t);-1<--n;)i[n]._startTime===r&&i[n]._enabled(!1,!1);return this},r.removePause=function(e){return this.removeCallback(t._internals.pauseCallback,e)},r.tweenTo=function(e,t){t=t||{};var i,n,r,o={ease:u,useFrames:this.usesFrames(),immediateRender:!1},s=t.repeat&&l.TweenMax||a;for(n in t)o[n]=t[n];return o.time=this._parseTimeOrLabel(e),i=Math.abs(Number(o.time)-this._time)/this._timeScale||.001,r=new s(this,i,o),o.onStart=function(){r.target.paused(!0),r.vars.time!==r.target.time()&&i===r.duration()&&r.duration(Math.abs(r.vars.time-r.target.time())/r.target._timeScale),t.onStart&&t.onStart.apply(t.onStartScope||t.callbackScope||r,t.onStartParams||[])},r},r.tweenFromTo=function(e,t,i){i=i||{},e=this._parseTimeOrLabel(e),i.startAt={onComplete:this.seek,onCompleteParams:[e],callbackScope:this},i.immediateRender=!1!==i.immediateRender;var n=this.tweenTo(t,i);return n.duration(Math.abs(n.vars.time-e)/this._timeScale||.001)},r.render=function(e,t,i){this._gc&&this._enabled(!0,!1);var n,r,o,s,a,l,u,c,f=this._time,h=this._dirty?this.totalDuration():this._totalDuration,p=this._duration,d=this._totalTime,g=this._startTime,m=this._timeScale,v=this._rawPrevTime,_=this._paused,y=this._cycle;if(f!==this._time&&(e+=this._time-f),h-1e-7<=e&&0<=e)this._locked||(this._totalTime=h,this._cycle=this._repeat),this._reversed||this._hasPausedChild()||(r=!0,s="onComplete",a=!!this._timeline.autoRemoveChildren,0===this._duration&&(e<=0&&-1e-7<=e||v<0||v===C)&&v!==e&&this._first&&(a=!0,C<v&&(s="onReverseComplete"))),this._rawPrevTime=this._duration||!t||e||this._rawPrevTime===e?e:C,this._yoyo&&0!=(1&this._cycle)?this._time=e=0:e=(this._time=p)+1e-4;else if(e<1e-7)if(this._locked||(this._totalTime=this._cycle=0),((this._time=0)!==f||0===p&&v!==C&&(0<v||e<0&&0<=v)&&!this._locked)&&(s="onReverseComplete",r=this._reversed),e<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(a=r=!0,s="onReverseComplete"):0<=v&&this._first&&(a=!0),this._rawPrevTime=e;else{if(this._rawPrevTime=p||!t||e||this._rawPrevTime===e?e:C,0===e&&r)for(n=this._first;n&&0===n._startTime;)n._duration||(r=!1),n=n._next;e=0,this._initted||(a=!0)}else if(0===p&&v<0&&(a=!0),this._time=this._rawPrevTime=e,this._locked||(this._totalTime=e,0!==this._repeat&&(l=p+this._repeatDelay,this._cycle=this._totalTime/l>>0,0!==this._cycle&&this._cycle===this._totalTime/l&&d<=e&&this._cycle--,this._time=this._totalTime-this._cycle*l,this._yoyo&&0!=(1&this._cycle)&&(this._time=p-this._time),this._time>p?e=(this._time=p)+1e-4:this._time<0?this._time=e=0:e=this._time)),this._hasPause&&!this._forcingPlayhead&&!t){if(f<=(e=this._time)||this._repeat&&y!==this._cycle)for(n=this._first;n&&n._startTime<=e&&!u;)n._duration||"isPause"!==n.data||n.ratio||0===n._startTime&&0===this._rawPrevTime||(u=n),n=n._next;else for(n=this._last;n&&n._startTime>=e&&!u;)n._duration||"isPause"===n.data&&0<n._rawPrevTime&&(u=n),n=n._prev;u&&u._startTime<p&&(this._time=e=u._startTime,this._totalTime=e+this._cycle*(this._totalDuration+this._repeatDelay))}if(this._cycle!==y&&!this._locked){var x=this._yoyo&&0!=(1&y),b=x===(this._yoyo&&0!=(1&this._cycle)),w=this._totalTime,T=this._cycle,S=this._rawPrevTime,P=this._time;if(this._totalTime=y*p,this._cycle<y?x=!x:this._totalTime+=p,this._time=f,this._rawPrevTime=0===p?v-1e-4:v,this._cycle=y,this._locked=!0,f=x?0:p,this.render(f,t,0===p),t||this._gc||this.vars.onRepeat&&(this._cycle=T,this._locked=!1,this._callback("onRepeat")),f!==this._time)return;if(b&&(this._cycle=y,this._locked=!0,f=x?p+1e-4:-1e-4,this.render(f,!0,!1)),this._locked=!1,this._paused&&!_)return;this._time=P,this._totalTime=w,this._cycle=T,this._rawPrevTime=S}if(this._time!==f&&this._first||i||a||u){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._totalTime!==d&&0<e&&(this._active=!0),0===d&&this.vars.onStart&&(0===this._totalTime&&this._totalDuration||t||this._callback("onStart")),f<=(c=this._time))for(n=this._first;n&&(o=n._next,c===this._time&&(!this._paused||_));)(n._active||n._startTime<=this._time&&!n._paused&&!n._gc)&&(u===n&&this.pause(),n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(e-n._startTime)*n._timeScale,t,i):n.render((e-n._startTime)*n._timeScale,t,i)),n=o;else for(n=this._last;n&&(o=n._prev,c===this._time&&(!this._paused||_));){if(n._active||n._startTime<=f&&!n._paused&&!n._gc){if(u===n){for(u=n._prev;u&&u.endTime()>this._time;)u.render(u._reversed?u.totalDuration()-(e-u._startTime)*u._timeScale:(e-u._startTime)*u._timeScale,t,i),u=u._prev;u=null,this.pause()}n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(e-n._startTime)*n._timeScale,t,i):n.render((e-n._startTime)*n._timeScale,t,i)}n=o}this._onUpdate&&(t||(k.length&&A(),this._callback("onUpdate"))),s&&(this._locked||this._gc||(g===this._startTime||m!==this._timeScale)&&(0===this._time||h>=this.totalDuration())&&(r&&(k.length&&A(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!t&&this.vars[s]&&this._callback(s)))}else d!==this._totalTime&&this._onUpdate&&(t||this._callback("onUpdate"))},r.getActive=function(e,t,i){null==e&&(e=!0),null==t&&(t=!0),null==i&&(i=!1);var n,r,o=[],s=this.getChildren(e,t,i),a=0,l=s.length;for(n=0;n<l;n++)(r=s[n]).isActive()&&(o[a++]=r);return o},r.getLabelAfter=function(e){e||0!==e&&(e=this._time);var t,i=this.getLabelsArray(),n=i.length;for(t=0;t<n;t++)if(i[t].time>e)return i[t].name;return null},r.getLabelBefore=function(e){null==e&&(e=this._time);for(var t=this.getLabelsArray(),i=t.length;-1<--i;)if(t[i].time<e)return t[i].name;return null},r.getLabelsArray=function(){var e,t=[],i=0;for(e in this._labels)t[i++]={time:this._labels[e],name:e};return t.sort(function(e,t){return e.time-t.time}),t},r.invalidate=function(){return this._locked=!1,t.prototype.invalidate.call(this)},r.progress=function(e,t){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-e:e)+this._cycle*(this._duration+this._repeatDelay),t):this._time/this.duration()||0},r.totalProgress=function(e,t){return arguments.length?this.totalTime(this.totalDuration()*e,t):this._totalTime/this.totalDuration()||0},r.totalDuration=function(e){return arguments.length?-1!==this._repeat&&e?this.timeScale(this.totalDuration()/e):this:(this._dirty&&(t.prototype.totalDuration.call(this),this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat),this._totalDuration)},r.time=function(e,t){return arguments.length?(this._dirty&&this.totalDuration(),e>this._duration&&(e=this._duration),this._yoyo&&0!=(1&this._cycle)?e=this._duration-e+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(e+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(e,t)):this._time},r.repeat=function(e){return arguments.length?(this._repeat=e,this._uncache(!0)):this._repeat},r.repeatDelay=function(e){return arguments.length?(this._repeatDelay=e,this._uncache(!0)):this._repeatDelay},r.yoyo=function(e){return arguments.length?(this._yoyo=e,this):this._yoyo},r.currentLabel=function(e){return arguments.length?this.seek(e,!0):this.getLabelBefore(this._time+1e-8)},i},!0),T=180/Math.PI,b=[],w=[],S=[],v={},i=_gsScope._gsDefine.globals,_=function(e,t,i,n){i===n&&(i=n-(n-t)/1e6),e===t&&(t=e+(i-e)/1e6),this.a=e,this.b=t,this.c=i,this.d=n,this.da=n-e,this.ca=i-e,this.ba=t-e},P=function(e,t,i,n){var r={a:e},o={},s={},a={c:n},l=(e+t)/2,u=(t+i)/2,c=(i+n)/2,f=(l+u)/2,h=(u+c)/2,p=(h-f)/8;return r.b=l+(e-l)/4,o.b=f+p,r.c=o.a=(r.b+o.b)/2,o.c=s.a=(f+h)/2,s.b=h-p,a.b=c+(n-c)/4,s.c=a.a=(s.b+a.b)/2,[r,o,s,a]},y=function(e,t,i,n,r){var o,s,a,l,u,c,f,h,p,d,g,m,v,_=e.length-1,y=0,x=e[0].a;for(o=0;o<_;o++)s=(u=e[y]).a,a=u.d,l=e[y+1].d,h=r?(g=b[o],v=((m=w[o])+g)*t*.25/(n?.5:S[o]||.5),a-((c=a-(a-s)*(n?.5*t:0!==g?v/g:0))+(((f=a+(l-a)*(n?.5*t:0!==m?v/m:0))-c)*(3*g/(g+m)+.5)/4||0))):a-((c=a-(a-s)*t*.5)+(f=a+(l-a)*t*.5))/2,c+=h,f+=h,u.c=p=c,u.b=0!==o?x:x=u.a+.6*(u.c-u.a),u.da=a-s,u.ca=p-s,u.ba=x-s,i?(d=P(s,x,p,a),e.splice(y,1,d[0],d[1],d[2],d[3]),y+=4):y++,x=f;(u=e[y]).b=x,u.c=x+.4*(u.d-x),u.da=u.d-u.a,u.ca=u.c-u.a,u.ba=x-u.a,i&&(d=P(u.a,x,u.c,u.d),e.splice(y,1,d[0],d[1],d[2],d[3]))},x=function(e,t,i,n){var r,o,s,a,l,u,c=[];if(n)for(o=(e=[n].concat(e)).length;-1<--o;)"string"==typeof(u=e[o][t])&&"="===u.charAt(1)&&(e[o][t]=n[t]+Number(u.charAt(0)+u.substr(2)));if((r=e.length-2)<0)return c[0]=new _(e[0][t],0,0,e[0][t]),c;for(o=0;o<r;o++)s=e[o][t],a=e[o+1][t],c[o]=new _(s,0,0,a),i&&(l=e[o+2][t],b[o]=(b[o]||0)+(a-s)*(a-s),w[o]=(w[o]||0)+(l-a)*(l-a));return c[o]=new _(e[o][t],0,0,e[o+1][t]),c},p=function(e,t,i,n,r,o){var s,a,l,u,c,f,h,p,d={},g=[],m=o||e[0];for(a in r="string"==typeof r?","+r+",":",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",null==t&&(t=1),e[0])g.push(a);if(1<e.length){for(p=e[e.length-1],h=!0,s=g.length;-1<--s;)if(a=g[s],.05<Math.abs(m[a]-p[a])){h=!1;break}h&&(e=e.concat(),o&&e.unshift(o),e.push(e[1]),o=e[e.length-3])}for(b.length=w.length=S.length=0,s=g.length;-1<--s;)a=g[s],v[a]=-1!==r.indexOf(","+a+","),d[a]=x(e,a,v[a],o);for(s=b.length;-1<--s;)b[s]=Math.sqrt(b[s]),w[s]=Math.sqrt(w[s]);if(!n){for(s=g.length;-1<--s;)if(v[a])for(f=(l=d[g[s]]).length-1,u=0;u<f;u++)c=l[u+1].da/w[u]+l[u].da/b[u]||0,S[u]=(S[u]||0)+c*c;for(s=S.length;-1<--s;)S[s]=Math.sqrt(S[s])}for(s=g.length,u=i?4:1;-1<--s;)l=d[a=g[s]],y(l,t,i,n,v[a]),h&&(l.splice(0,u),l.splice(l.length-u,u));return d},d=function(e,t,i){for(var n,r,o,s,a,l,u,c,f,h,p,d=1/i,g=e.length;-1<--g;)for(o=(h=e[g]).a,s=h.d-o,a=h.c-o,l=h.b-o,n=r=0,c=1;c<=i;c++)n=r-(r=((u=d*c)*u*s+3*(f=1-u)*(u*a+f*l))*u),t[p=g*i+c-1]=(t[p]||0)+n*n},m=_gsScope._gsDefine.plugin({propName:"bezier",priority:-1,version:"1.3.8",API:2,global:!0,init:function(e,t,i){this._target=e,t instanceof Array&&(t={values:t}),this._func={},this._mod={},this._props=[],this._timeRes=null==t.timeResolution?6:parseInt(t.timeResolution,10);var n,r,o,s,a,l=t.values||[],u={},c=l[0],f=t.autoRotate||i.vars.orientToBezier;for(n in this._autoRotate=f?f instanceof Array?f:[["x","y","rotation",!0===f?0:Number(f)||0]]:null,c)this._props.push(n);for(o=this._props.length;-1<--o;)n=this._props[o],this._overwriteProps.push(n),r=this._func[n]="function"==typeof e[n],u[n]=r?e[n.indexOf("set")||"function"!=typeof e["get"+n.substr(3)]?n:"get"+n.substr(3)]():parseFloat(e[n]),a||u[n]!==l[0][n]&&(a=u);if(this._beziers="cubic"!==t.type&&"quadratic"!==t.type&&"soft"!==t.type?p(l,isNaN(t.curviness)?1:t.curviness,!1,"thruBasic"===t.type,t.correlate,a):function(e,t,i){var n,r,o,s,a,l,u,c,f,h,p,d={},g="cubic"===(t=t||"soft")?3:2,m="soft"===t,v=[];if(m&&i&&(e=[i].concat(e)),null==e||e.length<g+1)throw"invalid Bezier data";for(f in e[0])v.push(f);for(l=v.length;-1<--l;){for(d[f=v[l]]=a=[],h=0,c=e.length,u=0;u<c;u++)n=null==i?e[u][f]:"string"==typeof(p=e[u][f])&&"="===p.charAt(1)?i[f]+Number(p.charAt(0)+p.substr(2)):Number(p),m&&1<u&&u<c-1&&(a[h++]=(n+a[h-2])/2),a[h++]=n;for(c=h-g+1,u=h=0;u<c;u+=g)n=a[u],r=a[u+1],o=a[u+2],s=2===g?0:a[u+3],a[h++]=p=3===g?new _(n,r,o,s):new _(n,(2*r+n)/3,(2*r+o)/3,o);a.length=h}return d}(l,t.type,u),this._segCount=this._beziers[n].length,this._timeRes){var h=function(e,t){var i,n,r,o,s=[],a=[],l=0,u=0,c=(t=t>>0||6)-1,f=[],h=[];for(i in e)d(e[i],s,t);for(r=s.length,n=0;n<r;n++)l+=Math.sqrt(s[n]),h[o=n%t]=l,o===c&&(u+=l,f[o=n/t>>0]=h,a[o]=u,l=0,h=[]);return{length:u,lengths:a,segments:f}}(this._beziers,this._timeRes);this._length=h.length,this._lengths=h.lengths,this._segments=h.segments,this._l1=this._li=this._s1=this._si=0,this._l2=this._lengths[0],this._curSeg=this._segments[0],this._s2=this._curSeg[0],this._prec=1/this._curSeg.length}if(f=this._autoRotate)for(this._initialRotations=[],f[0]instanceof Array||(this._autoRotate=f=[f]),o=f.length;-1<--o;){for(s=0;s<3;s++)n=f[o][s],this._func[n]="function"==typeof e[n]&&e[n.indexOf("set")||"function"!=typeof e["get"+n.substr(3)]?n:"get"+n.substr(3)];n=f[o][2],this._initialRotations[o]=(this._func[n]?this._func[n].call(this._target):this._target[n])||0,this._overwriteProps.push(n)}return this._startRatio=i.vars.runBackwards?1:0,!0},set:function(e){var t,i,n,r,o,s,a,l,u,c,f=this._segCount,h=this._func,p=this._target,d=e!==this._startRatio;if(this._timeRes){if(u=this._lengths,c=this._curSeg,e*=this._length,n=this._li,e>this._l2&&n<f-1){for(l=f-1;n<l&&(this._l2=u[++n])<=e;);this._l1=u[n-1],this._li=n,this._curSeg=c=this._segments[n],this._s2=c[this._s1=this._si=0]}else if(e<this._l1&&0<n){for(;0<n&&(this._l1=u[--n])>=e;);0===n&&e<this._l1?this._l1=0:n++,this._l2=u[n],this._li=n,this._curSeg=c=this._segments[n],this._s1=c[(this._si=c.length-1)-1]||0,this._s2=c[this._si]}if(t=n,e-=this._l1,n=this._si,e>this._s2&&n<c.length-1){for(l=c.length-1;n<l&&(this._s2=c[++n])<=e;);this._s1=c[n-1],this._si=n}else if(e<this._s1&&0<n){for(;0<n&&(this._s1=c[--n])>=e;);0===n&&e<this._s1?this._s1=0:n++,this._s2=c[n],this._si=n}s=(n+(e-this._s1)/(this._s2-this._s1))*this._prec||0}else s=(e-(t=e<0?0:1<=e?f-1:f*e>>0)*(1/f))*f;for(i=1-s,n=this._props.length;-1<--n;)r=this._props[n],a=(s*s*(o=this._beziers[r][t]).da+3*i*(s*o.ca+i*o.ba))*s+o.a,this._mod[r]&&(a=this._mod[r](a,p)),h[r]?p[r](a):p[r]=a;if(this._autoRotate){var g,m,v,_,y,x,b,w=this._autoRotate;for(n=w.length;-1<--n;)r=w[n][2],x=w[n][3]||0,b=!0===w[n][4]?1:T,o=this._beziers[w[n][0]],g=this._beziers[w[n][1]],o&&g&&(o=o[t],g=g[t],m=o.a+(o.b-o.a)*s,m+=((_=o.b+(o.c-o.b)*s)-m)*s,_+=(o.c+(o.d-o.c)*s-_)*s,v=g.a+(g.b-g.a)*s,v+=((y=g.b+(g.c-g.b)*s)-v)*s,y+=(g.c+(g.d-g.c)*s-y)*s,a=d?Math.atan2(y-v,_-m)*b+x:this._initialRotations[n],this._mod[r]&&(a=this._mod[r](a,p)),h[r]?p[r](a):p[r]=a)}}}),n=m.prototype,m.bezierThrough=p,m.cubicToQuadratic=P,m._autoCSS=!0,m.quadraticToCubic=function(e,t,i){return new _(e,(2*t+e)/3,(2*t+i)/3,i)},m._cssRegister=function(){var e=i.CSSPlugin;if(e){var t=e._internals,p=t._parseToProxy,d=t._setPluginRatio,g=t.CSSPropTween;t._registerComplexSpecialProp("bezier",{parser:function(e,t,i,n,r,o){t instanceof Array&&(t={values:t}),o=new m;var s,a,l,u=t.values,c=u.length-1,f=[],h={};if(c<0)return r;for(s=0;s<=c;s++)l=p(e,u[s],n,r,o,c!==s),f[s]=l.end;for(a in t)h[a]=t[a];return h.values=f,(r=new g(e,"bezier",0,0,l.pt,2)).data=l,r.plugin=o,r.setRatio=d,0===h.autoRotate&&(h.autoRotate=!0),!h.autoRotate||h.autoRotate instanceof Array||(s=!0===h.autoRotate?0:Number(h.autoRotate),h.autoRotate=null!=l.end.left?[["left","top","rotation",s,!1]]:null!=l.end.x&&[["x","y","rotation",s,!1]]),h.autoRotate&&(n._transform||n._enableTransforms(!1),l.autoRotate=n._target._gsTransform,l.proxy.rotation=l.autoRotate.rotation||0,n._overwriteProps.push("rotation")),o._onInitTween(l.proxy,h,n._tween),r}})}},n._mod=function(e){for(var t,i=this._overwriteProps,n=i.length;-1<--n;)(t=e[i[n]])&&"function"==typeof t&&(this._mod[i[n]]=t)},n._kill=function(e){var t,i,n=this._props;for(t in this._beziers)if(t in e)for(delete this._beziers[t],delete this._func[t],i=n.length;-1<--i;)n[i]===t&&n.splice(i,1);if(n=this._autoRotate)for(i=n.length;-1<--i;)e[n[i][2]]&&n.splice(i,1);return this._super._kill.call(this,e)},_gsScope._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(o,q){var d,S,C,g,V=function(){o.call(this,"css"),this._overwriteProps.length=0,this.setRatio=V.prototype.setRatio},u=_gsScope._gsDefine.globals,m={},e=V.prototype=new o("css");(e.constructor=V).version="1.20.3",V.API=2,V.defaultTransformPerspective=0,V.defaultSkewType="compensated",V.defaultSmoothOrigin=!0,e="px",V.suffixMap={top:e,right:e,bottom:e,left:e,width:e,height:e,fontSize:e,padding:e,margin:e,perspective:e,lineHeight:""};var k,v,_,F,y,P,A,O,t,i,R=/(?:\-|\.|\b)(\d|\.|e\-)+/g,E=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,x=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,c=/(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,D=/(?:\d|\-|\+|=|#|\.)*/g,N=/opacity *= *([^)]*)/i,b=/opacity:([^;]*)/i,s=/alpha\(opacity *=.+?\)/i,w=/^(rgb|hsl)/,a=/([A-Z])/g,l=/-([a-z])/gi,T=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,f=function(e,t){return t.toUpperCase()},p=/(?:Left|Right|Width)/i,h=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,M=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,L=/,(?=[^\)]*(?:\(|$))/gi,j=/[\s,\(]/i,I=Math.PI/180,H=180/Math.PI,z={},n={style:{}},B=_gsScope.document||{createElement:function(){return n}},X=function(e,t){return B.createElementNS?B.createElementNS(t||"http://www.w3.org/1999/xhtml",e):B.createElement(e)},G=X("div"),W=X("img"),r=V._internals={_specialProps:m},$=(_gsScope.navigator||{}).userAgent||"",U=(t=$.indexOf("Android"),i=X("a"),_=-1!==$.indexOf("Safari")&&-1===$.indexOf("Chrome")&&(-1===t||3<parseFloat($.substr(t+8,2))),y=_&&parseFloat($.substr($.indexOf("Version/")+8,2))<6,F=-1!==$.indexOf("Firefox"),(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec($)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec($))&&(P=parseFloat(RegExp.$1)),!!i&&(i.style.cssText="top:1px;opacity:.55;",/^0.55/.test(i.style.opacity))),Y=function(e){return N.test("string"==typeof e?e:(e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?parseFloat(RegExp.$1)/100:1},Q=function(e){_gsScope.console&&console.log(e)},Z="",J="",K=function(e,t){var i,n,r=(t=t||G).style;if(void 0!==r[e])return e;for(e=e.charAt(0).toUpperCase()+e.substr(1),i=["O","Moz","ms","Ms","Webkit"],n=5;-1<--n&&void 0===r[i[n]+e];);return 0<=n?(Z="-"+(J=3===n?"ms":i[n]).toLowerCase()+"-",J+e):null},ee=B.defaultView?B.defaultView.getComputedStyle:function(){},te=V.getStyle=function(e,t,i,n,r){var o;return U||"opacity"!==t?(!n&&e.style[t]?o=e.style[t]:(i=i||ee(e))?o=i[t]||i.getPropertyValue(t)||i.getPropertyValue(t.replace(a,"-$1").toLowerCase()):e.currentStyle&&(o=e.currentStyle[t]),null==r||o&&"none"!==o&&"auto"!==o&&"auto auto"!==o?o:r):Y(e)},ie=r.convertToPixels=function(e,t,i,n,r){if("px"===n||!n&&"lineHeight"!==t)return i;if("auto"===n||!i)return 0;var o,s,a,l=p.test(t),u=e,c=G.style,f=i<0,h=1===i;if(f&&(i=-i),h&&(i*=100),"lineHeight"!==t||n)if("%"===n&&-1!==t.indexOf("border"))o=i/100*(l?e.clientWidth:e.clientHeight);else{if(c.cssText="border:0 solid red;position:"+te(e,"position")+";line-height:0;","%"!==n&&u.appendChild&&"v"!==n.charAt(0)&&"rem"!==n)c[l?"borderLeftWidth":"borderTopWidth"]=i+n;else{if(u=e.parentNode||B.body,-1!==te(u,"display").indexOf("flex")&&(c.position="absolute"),s=u._gsCache,a=q.ticker.frame,s&&l&&s.time===a)return s.width*i/100;c[l?"width":"height"]=i+n}u.appendChild(G),o=parseFloat(G[l?"offsetWidth":"offsetHeight"]),u.removeChild(G),l&&"%"===n&&!1!==V.cacheWidths&&((s=u._gsCache=u._gsCache||{}).time=a,s.width=o/i*100),0!==o||r||(o=ie(e,t,i,n,!0))}else s=ee(e).lineHeight,e.style.lineHeight=i,o=parseFloat(ee(e).lineHeight),e.style.lineHeight=s;return h&&(o/=100),f?-o:o},ne=r.calculateOffset=function(e,t,i){if("absolute"!==te(e,"position",i))return 0;var n="left"===t?"Left":"Top",r=te(e,"margin"+n,i);return e["offset"+n]-(ie(e,t,parseFloat(r),r.replace(D,""))||0)},re=function(e,t){var i,n,r,o={};if(t=t||ee(e,null))if(i=t.length)for(;-1<--i;)(-1===(r=t[i]).indexOf("-transform")||Le===r)&&(o[r.replace(l,f)]=t.getPropertyValue(r));else for(i in t)(-1===i.indexOf("Transform")||Me===i)&&(o[i]=t[i]);else if(t=e.currentStyle||e.style)for(i in t)"string"==typeof i&&void 0===o[i]&&(o[i.replace(l,f)]=t[i]);return U||(o.opacity=Y(e)),n=Ue(e,t,!1),o.rotation=n.rotation,o.skewX=n.skewX,o.scaleX=n.scaleX,o.scaleY=n.scaleY,o.x=n.x,o.y=n.y,Fe&&(o.z=n.z,o.rotationX=n.rotationX,o.rotationY=n.rotationY,o.scaleZ=n.scaleZ),o.filters&&delete o.filters,o},oe=function(e,t,i,n,r){var o,s,a,l={},u=e.style;for(s in i)"cssText"!==s&&"length"!==s&&isNaN(s)&&(t[s]!==(o=i[s])||r&&r[s])&&-1===s.indexOf("Origin")&&("number"==typeof o||"string"==typeof o)&&(l[s]="auto"!==o||"left"!==s&&"top"!==s?""!==o&&"auto"!==o&&"none"!==o||"string"!=typeof t[s]||""===t[s].replace(c,"")?o:0:ne(e,s),void 0!==u[s]&&(a=new xe(u,s,u[s],a)));if(n)for(s in n)"className"!==s&&(l[s]=n[s]);return{difs:l,firstMPT:a}},se={width:["Left","Right"],height:["Top","Bottom"]},ae=["marginLeft","marginRight","marginTop","marginBottom"],le=function(e,t,i){if("svg"===(e.nodeName+"").toLowerCase())return(i||ee(e))[t]||0;if(e.getCTM&&Ge(e))return e.getBBox()[t]||0;var n=parseFloat("width"===t?e.offsetWidth:e.offsetHeight),r=se[t],o=r.length;for(i=i||ee(e,null);-1<--o;)n-=parseFloat(te(e,"padding"+r[o],i,!0))||0,n-=parseFloat(te(e,"border"+r[o]+"Width",i,!0))||0;return n},ue=function(e,t){if("contain"===e||"auto"===e||"auto auto"===e)return e+" ";(null==e||""===e)&&(e="0 0");var i,n=e.split(" "),r=-1!==e.indexOf("left")?"0%":-1!==e.indexOf("right")?"100%":n[0],o=-1!==e.indexOf("top")?"0%":-1!==e.indexOf("bottom")?"100%":n[1];if(3<n.length&&!t){for(n=e.split(", ").join(",").split(","),e=[],i=0;i<n.length;i++)e.push(ue(n[i]));return e.join(",")}return null==o?o="center"===r?"50%":"0":"center"===o&&(o="50%"),("center"===r||isNaN(parseFloat(r))&&-1===(r+"").indexOf("="))&&(r="50%"),e=r+" "+o+(2<n.length?" "+n[2]:""),t&&(t.oxp=-1!==r.indexOf("%"),t.oyp=-1!==o.indexOf("%"),t.oxr="="===r.charAt(1),t.oyr="="===o.charAt(1),t.ox=parseFloat(r.replace(c,"")),t.oy=parseFloat(o.replace(c,"")),t.v=e),t||e},ce=function(e,t){return"function"==typeof e&&(e=e(O,A)),"string"==typeof e&&"="===e.charAt(1)?parseInt(e.charAt(0)+"1",10)*parseFloat(e.substr(2)):parseFloat(e)-parseFloat(t)||0},fe=function(e,t){return"function"==typeof e&&(e=e(O,A)),null==e?t:"string"==typeof e&&"="===e.charAt(1)?parseInt(e.charAt(0)+"1",10)*parseFloat(e.substr(2))+t:parseFloat(e)||0},he=function(e,t,i,n){var r,o,s,a,l;return"function"==typeof e&&(e=e(O,A)),(a=null==e?t:"number"==typeof e?e:(r=360,o=e.split("_"),s=((l="="===e.charAt(1))?parseInt(e.charAt(0)+"1",10)*parseFloat(o[0].substr(2)):parseFloat(o[0]))*(-1===e.indexOf("rad")?1:H)-(l?0:t),o.length&&(n&&(n[i]=t+s),-1!==e.indexOf("short")&&((s%=r)!==s%180&&(s=s<0?s+r:s-r)),-1!==e.indexOf("_cw")&&s<0?s=(s+3599999999640)%r-(s/r|0)*r:-1!==e.indexOf("ccw")&&0<s&&(s=(s-3599999999640)%r-(s/r|0)*r)),t+s))<1e-6&&-1e-6<a&&(a=0),a},pe={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},de=function(e,t,i){return 255*(6*(e=e<0?e+1:1<e?e-1:e)<1?t+(i-t)*e*6:e<.5?i:3*e<2?t+(i-t)*(2/3-e)*6:t)+.5|0},ge=V.parseColor=function(e,t){var i,n,r,o,s,a,l,u,c,f,h;if(e)if("number"==typeof e)i=[e>>16,e>>8&255,255&e];else{if(","===e.charAt(e.length-1)&&(e=e.substr(0,e.length-1)),pe[e])i=pe[e];else if("#"===e.charAt(0))4===e.length&&(e="#"+(n=e.charAt(1))+n+(r=e.charAt(2))+r+(o=e.charAt(3))+o),i=[(e=parseInt(e.substr(1),16))>>16,e>>8&255,255&e];else if("hsl"===e.substr(0,3))if(i=h=e.match(R),t){if(-1!==e.indexOf("="))return e.match(E)}else s=Number(i[0])%360/360,a=Number(i[1])/100,n=2*(l=Number(i[2])/100)-(r=l<=.5?l*(a+1):l+a-l*a),3<i.length&&(i[3]=Number(i[3])),i[0]=de(s+1/3,n,r),i[1]=de(s,n,r),i[2]=de(s-1/3,n,r);else i=e.match(R)||pe.transparent;i[0]=Number(i[0]),i[1]=Number(i[1]),i[2]=Number(i[2]),3<i.length&&(i[3]=Number(i[3]))}else i=pe.black;return t&&!h&&(n=i[0]/255,r=i[1]/255,o=i[2]/255,l=((u=Math.max(n,r,o))+(c=Math.min(n,r,o)))/2,u===c?s=a=0:(f=u-c,a=.5<l?f/(2-u-c):f/(u+c),s=u===n?(r-o)/f+(r<o?6:0):u===r?(o-n)/f+2:(n-r)/f+4,s*=60),i[0]=s+.5|0,i[1]=100*a+.5|0,i[2]=100*l+.5|0),i},me=function(e,t){var i,n,r,o=e.match(ve)||[],s=0,a="";if(!o.length)return e;for(i=0;i<o.length;i++)n=o[i],s+=(r=e.substr(s,e.indexOf(n,s)-s)).length+n.length,3===(n=ge(n,t)).length&&n.push(1),a+=r+(t?"hsla("+n[0]+","+n[1]+"%,"+n[2]+"%,"+n[3]:"rgba("+n.join(","))+")";return a+e.substr(s)},ve="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";for(e in pe)ve+="|"+e+"\\b";ve=new RegExp(ve+")","gi"),V.colorStringFilter=function(e){var t,i=e[0]+" "+e[1];ve.test(i)&&(t=-1!==i.indexOf("hsl(")||-1!==i.indexOf("hsla("),e[0]=me(e[0],t),e[1]=me(e[1],t)),ve.lastIndex=0},q.defaultStringFilter||(q.defaultStringFilter=V.colorStringFilter);var _e=function(e,t,o,s){if(null==e)return function(e){return e};var a,l=t?(e.match(ve)||[""])[0]:"",u=e.split(l).join("").match(x)||[],c=e.substr(0,e.indexOf(u[0])),f=")"===e.charAt(e.length-1)?")":"",h=-1!==e.indexOf(" ")?" ":",",p=u.length,d=0<p?u[0].replace(R,""):"";return p?a=t?function(e){var t,i,n,r;if("number"==typeof e)e+=d;else if(s&&L.test(e)){for(r=e.replace(L,"|").split("|"),n=0;n<r.length;n++)r[n]=a(r[n]);return r.join(",")}if(t=(e.match(ve)||[l])[0],n=(i=e.split(t).join("").match(x)||[]).length,p>n--)for(;++n<p;)i[n]=o?i[(n-1)/2|0]:u[n];return c+i.join(h)+h+t+f+(-1!==e.indexOf("inset")?" inset":"")}:function(e){var t,i,n;if("number"==typeof e)e+=d;else if(s&&L.test(e)){for(i=e.replace(L,"|").split("|"),n=0;n<i.length;n++)i[n]=a(i[n]);return i.join(",")}if(n=(t=e.match(x)||[]).length,p>n--)for(;++n<p;)t[n]=o?t[(n-1)/2|0]:u[n];return c+t.join(h)+f}:function(e){return e}},ye=function(u){return u=u.split(","),function(e,t,i,n,r,o,s){var a,l=(t+"").split(" ");for(s={},a=0;a<4;a++)s[u[a]]=l[a]=l[a]||l[(a-1)/2>>0];return n.parse(e,s,r,o)}},xe=(r._setPluginRatio=function(e){this.plugin.setRatio(e);for(var t,i,n,r,o,s=this.data,a=s.proxy,l=s.firstMPT;l;)t=a[l.v],l.r?t=Math.round(t):t<1e-6&&-1e-6<t&&(t=0),l.t[l.p]=t,l=l._next;if(s.autoRotate&&(s.autoRotate.rotation=s.mod?s.mod(a.rotation,this.t):a.rotation),1===e||0===e)for(l=s.firstMPT,o=1===e?"e":"b";l;){if((i=l.t).type){if(1===i.type){for(r=i.xs0+i.s+i.xs1,n=1;n<i.l;n++)r+=i["xn"+n]+i["xs"+(n+1)];i[o]=r}}else i[o]=i.s+i.xs0;l=l._next}},function(e,t,i,n,r){this.t=e,this.p=t,this.v=i,this.r=r,n&&((n._prev=this)._next=n)}),be=(r._parseToProxy=function(e,t,i,n,r,o){var s,a,l,u,c,f=n,h={},p={},d=i._transform,g=z;for(i._transform=null,z=t,n=c=i.parse(e,t,n,r),z=g,o&&(i._transform=d,f&&(f._prev=null,f._prev&&(f._prev._next=null)));n&&n!==f;){if(n.type<=1&&(p[a=n.p]=n.s+n.c,h[a]=n.s,o||(u=new xe(n,"s",a,u,n.r),n.c=0),1===n.type))for(s=n.l;0<--s;)l="xn"+s,p[a=n.p+"_"+l]=n.data[l],h[a]=n[l],o||(u=new xe(n,l,a,u,n.rxp[l]));n=n._next}return{proxy:h,end:p,firstMPT:u,pt:c}},r.CSSPropTween=function(e,t,i,n,r,o,s,a,l,u,c){this.t=e,this.p=t,this.s=i,this.c=n,this.n=s||t,e instanceof be||g.push(this.n),this.r=a,this.type=o||0,l&&(this.pr=l,d=!0),this.b=void 0===u?i:u,this.e=void 0===c?i+n:c,r&&((this._next=r)._prev=this)}),we=function(e,t,i,n,r,o){var s=new be(e,t,i,n-i,r,-1,o);return s.b=i,s.e=s.xs0=n,s},Te=V.parseComplex=function(e,t,i,n,r,o,s,a,l,u){i=i||o||"","function"==typeof n&&(n=n(O,A)),s=new be(e,t,0,0,s,u?2:1,null,!1,a,i,n),n+="",r&&ve.test(n+i)&&(n=[i,n],V.colorStringFilter(n),i=n[0],n=n[1]);var c,f,h,p,d,g,m,v,_,y,x,b,w,T=i.split(", ").join(",").split(" "),S=n.split(", ").join(",").split(" "),P=T.length,C=!1!==k;for((-1!==n.indexOf(",")||-1!==i.indexOf(","))&&(S=-1!==(n+i).indexOf("rgb")||-1!==(n+i).indexOf("hsl")?(T=T.join(" ").replace(L,", ").split(" "),S.join(" ").replace(L,", ").split(" ")):(T=T.join(" ").split(",").join(", ").split(" "),S.join(" ").split(",").join(", ").split(" ")),P=T.length),P!==S.length&&(P=(T=(o||"").split(" ")).length),s.plugin=l,s.setRatio=u,c=ve.lastIndex=0;c<P;c++)if(p=T[c],d=S[c],(v=parseFloat(p))||0===v)s.appendXtra("",v,ce(d,v),d.replace(E,""),C&&-1!==d.indexOf("px"),!0);else if(r&&ve.test(p))b=")"+((b=d.indexOf(")")+1)?d.substr(b):""),w=-1!==d.indexOf("hsl")&&U,y=d,p=ge(p,w),d=ge(d,w),(_=6<p.length+d.length)&&!U&&0===d[3]?(s["xs"+s.l]+=s.l?" transparent":"transparent",s.e=s.e.split(S[c]).join("transparent")):(U||(_=!1),w?s.appendXtra(y.substr(0,y.indexOf("hsl"))+(_?"hsla(":"hsl("),p[0],ce(d[0],p[0]),",",!1,!0).appendXtra("",p[1],ce(d[1],p[1]),"%,",!1).appendXtra("",p[2],ce(d[2],p[2]),_?"%,":"%"+b,!1):s.appendXtra(y.substr(0,y.indexOf("rgb"))+(_?"rgba(":"rgb("),p[0],d[0]-p[0],",",!0,!0).appendXtra("",p[1],d[1]-p[1],",",!0).appendXtra("",p[2],d[2]-p[2],_?",":b,!0),_&&(p=p.length<4?1:p[3],s.appendXtra("",p,(d.length<4?1:d[3])-p,b,!1))),ve.lastIndex=0;else if(g=p.match(R)){if(!(m=d.match(E))||m.length!==g.length)return s;for(f=h=0;f<g.length;f++)x=g[f],y=p.indexOf(x,h),s.appendXtra(p.substr(h,y-h),Number(x),ce(m[f],x),"",C&&"px"===p.substr(y+x.length,2),0===f),h=y+x.length;s["xs"+s.l]+=p.substr(h)}else s["xs"+s.l]+=s.l||s["xs"+s.l]?" "+d:d;if(-1!==n.indexOf("=")&&s.data){for(b=s.xs0+s.data.s,c=1;c<s.l;c++)b+=s["xs"+c]+s.data["xn"+c];s.e=b+s["xs"+c]}return s.l||(s.type=-1,s.xs0=s.e),s.xfirst||s},Se=9;for((e=be.prototype).l=e.pr=0;0<--Se;)e["xn"+Se]=0,e["xs"+Se]="";e.xs0="",e._next=e._prev=e.xfirst=e.data=e.plugin=e.setRatio=e.rxp=null,e.appendXtra=function(e,t,i,n,r,o){var s=this,a=s.l;return s["xs"+a]+=o&&(a||s["xs"+a])?" "+e:e||"",i||0===a||s.plugin?(s.l++,s.type=s.setRatio?2:1,s["xs"+s.l]=n||"",0<a?(s.data["xn"+a]=t+i,s.rxp["xn"+a]=r,s["xn"+a]=t,s.plugin||(s.xfirst=new be(s,"xn"+a,t,i,s.xfirst||s,0,s.n,r,s.pr),s.xfirst.xs0=0)):(s.data={s:t+i},s.rxp={},s.s=t,s.c=i,s.r=r)):s["xs"+a]+=t+(n||""),s};var Pe=function(e,t){t=t||{},this.p=t.prefix&&K(e)||e,m[e]=m[this.p]=this,this.format=t.formatter||_e(t.defaultValue,t.color,t.collapsible,t.multi),t.parser&&(this.parse=t.parser),this.clrs=t.color,this.multi=t.multi,this.keyword=t.keyword,this.dflt=t.defaultValue,this.pr=t.priority||0},Ce=r._registerComplexSpecialProp=function(e,t,i){"object"!=typeof t&&(t={parser:i});var n,r=e.split(","),o=t.defaultValue;for(i=i||[o],n=0;n<r.length;n++)t.prefix=0===n&&t.prefix,t.defaultValue=i[n]||o,new Pe(r[n],t)},ke=r._registerPluginProp=function(e){if(!m[e]){var l=e.charAt(0).toUpperCase()+e.substr(1)+"Plugin";Ce(e,{parser:function(e,t,i,n,r,o,s){var a=u.com.greensock.plugins[l];return a?(a._cssRegister(),m[i].parse(e,t,i,n,r,o,s)):(Q("Error: "+l+" js file not loaded."),r)}})}};(e=Pe.prototype).parseComplex=function(e,t,i,n,r,o){var s,a,l,u,c,f,h=this.keyword;if(this.multi&&(L.test(i)||L.test(t)?(a=t.replace(L,"|").split("|"),l=i.replace(L,"|").split("|")):h&&(a=[t],l=[i])),l){for(u=l.length>a.length?l.length:a.length,s=0;s<u;s++)t=a[s]=a[s]||this.dflt,i=l[s]=l[s]||this.dflt,h&&((c=t.indexOf(h))!==(f=i.indexOf(h))&&(-1===f?a[s]=a[s].split(h).join(""):-1===c&&(a[s]+=" "+h)));t=a.join(", "),i=l.join(", ")}return Te(e,this.p,t,i,this.clrs,this.dflt,n,this.pr,r,o)},e.parse=function(e,t,i,n,r,o,s){return this.parseComplex(e.style,this.format(te(e,this.p,C,!1,this.dflt)),this.format(t),r,o)},V.registerSpecialProp=function(e,l,u){Ce(e,{parser:function(e,t,i,n,r,o,s){var a=new be(e,i,0,0,r,2,i,!1,u);return a.plugin=o,a.setRatio=l(e,t,n._tween,i),a},priority:u})},V.useSVGTransformAttr=!0;var Ae,Oe,Re,Ee,De,Ne="scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),Me=K("transform"),Le=Z+"transform",je=K("transformOrigin"),Fe=null!==K("perspective"),Ie=r.Transform=function(){this.perspective=parseFloat(V.defaultTransformPerspective)||0,this.force3D=!(!1===V.defaultForce3D||!Fe)&&(V.defaultForce3D||"auto")},ze=_gsScope.SVGElement,qe=function(e,t,i){var n,r=B.createElementNS("http://www.w3.org/2000/svg",e),o=/([a-z])([A-Z])/g;for(n in i)r.setAttributeNS(null,n.replace(o,"$1-$2").toLowerCase(),i[n]);return t.appendChild(r),r},Ve=B.documentElement||{},He=(De=P||/Android/i.test($)&&!_gsScope.chrome,B.createElementNS&&!De&&(Oe=qe("svg",Ve),Ee=(Re=qe("rect",Oe,{width:100,height:50,x:100})).getBoundingClientRect().width,Re.style[je]="50% 50%",Re.style[Me]="scaleX(0.5)",De=Ee===Re.getBoundingClientRect().width&&!(F&&Fe),Ve.removeChild(Oe)),De),Be=function(e,t,i,n,r,o){var s,a,l,u,c,f,h,p,d,g,m,v,_,y,x=e._gsTransform,b=$e(e,!0);x&&(_=x.xOrigin,y=x.yOrigin),(!n||(s=n.split(" ")).length<2)&&(0===(h=e.getBBox()).x&&0===h.y&&h.width+h.height===0&&(h={x:parseFloat(e.hasAttribute("x")?e.getAttribute("x"):e.hasAttribute("cx")?e.getAttribute("cx"):0)||0,y:parseFloat(e.hasAttribute("y")?e.getAttribute("y"):e.hasAttribute("cy")?e.getAttribute("cy"):0)||0,width:0,height:0}),s=[(-1!==(t=ue(t).split(" "))[0].indexOf("%")?parseFloat(t[0])/100*h.width:parseFloat(t[0]))+h.x,(-1!==t[1].indexOf("%")?parseFloat(t[1])/100*h.height:parseFloat(t[1]))+h.y]),i.xOrigin=u=parseFloat(s[0]),i.yOrigin=c=parseFloat(s[1]),n&&b!==We&&(f=b[0],h=b[1],p=b[2],d=b[3],g=b[4],m=b[5],(v=f*d-h*p)&&(a=u*(d/v)+c*(-p/v)+(p*m-d*g)/v,l=u*(-h/v)+c*(f/v)-(f*m-h*g)/v,u=i.xOrigin=s[0]=a,c=i.yOrigin=s[1]=l)),x&&(o&&(i.xOffset=x.xOffset,i.yOffset=x.yOffset,x=i),r||!1!==r&&!1!==V.defaultSmoothOrigin?(a=u-_,l=c-y,x.xOffset+=a*b[0]+l*b[2]-a,x.yOffset+=a*b[1]+l*b[3]-l):x.xOffset=x.yOffset=0),o||e.setAttribute("data-svg-origin",s.join(" "))},Xe=function(e){var t,i=X("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),n=this.parentNode,r=this.nextSibling,o=this.style.cssText;if(Ve.appendChild(i),i.appendChild(this),this.style.display="block",e)try{t=this.getBBox(),this._originalGetBBox=this.getBBox,this.getBBox=Xe}catch(e){}else this._originalGetBBox&&(t=this._originalGetBBox());return r?n.insertBefore(this,r):n.appendChild(this),Ve.removeChild(i),this.style.cssText=o,t},Ge=function(e){return!(!ze||!e.getCTM||e.parentNode&&!e.ownerSVGElement||!function(t){try{return t.getBBox()}catch(e){return Xe.call(t,!0)}}(e))},We=[1,0,0,1,0,0],$e=function(e,t){var i,n,r,o,s,a,l=e._gsTransform||new Ie,u=e.style;if(Me?n=te(e,Le,null,!0):e.currentStyle&&(n=(n=e.currentStyle.filter.match(h))&&4===n.length?[n[0].substr(4),Number(n[2].substr(4)),Number(n[1].substr(4)),n[3].substr(4),l.x||0,l.y||0].join(","):""),i=!n||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,!Me||!(a=!ee(e)||"none"===ee(e).display)&&e.parentNode||(a&&(o=u.display,u.display="block"),e.parentNode||(s=1,Ve.appendChild(e)),i=!(n=te(e,Le,null,!0))||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,o?u.display=o:a&&Je(u,"display"),s&&Ve.removeChild(e)),(l.svg||e.getCTM&&Ge(e))&&(i&&-1!==(u[Me]+"").indexOf("matrix")&&(n=u[Me],i=0),r=e.getAttribute("transform"),i&&r&&(-1!==r.indexOf("matrix")?(n=r,i=0):-1!==r.indexOf("translate")&&(n="matrix(1,0,0,1,"+r.match(/(?:\-|\b)[\d\-\.e]+\b/gi).join(",")+")",i=0))),i)return We;for(r=(n||"").match(R)||[],Se=r.length;-1<--Se;)o=Number(r[Se]),r[Se]=(s=o-(o|=0))?(1e5*s+(s<0?-.5:.5)|0)/1e5+o:o;return t&&6<r.length?[r[0],r[1],r[4],r[5],r[12],r[13]]:r},Ue=r.getTransform=function(e,t,i,n){if(e._gsTransform&&i&&!n)return e._gsTransform;var r,o,s,a,l,u,c=i&&e._gsTransform||new Ie,f=c.scaleX<0,h=Fe&&(parseFloat(te(e,je,t,!1,"0 0 0").split(" ")[2])||c.zOrigin)||0,p=parseFloat(V.defaultTransformPerspective)||0;if(c.svg=!(!e.getCTM||!Ge(e)),c.svg&&(Be(e,te(e,je,t,!1,"50% 50%")+"",c,e.getAttribute("data-svg-origin")),Ae=V.useSVGTransformAttr||He),(r=$e(e))!==We){if(16===r.length){var d,g,m,v,_,y=r[0],x=r[1],b=r[2],w=r[3],T=r[4],S=r[5],P=r[6],C=r[7],k=r[8],A=r[9],O=r[10],R=r[12],E=r[13],D=r[14],N=r[11],M=Math.atan2(P,O);c.zOrigin&&(R=k*(D=-c.zOrigin)-r[12],E=A*D-r[13],D=O*D+c.zOrigin-r[14]),c.rotationX=M*H,M&&(d=T*(v=Math.cos(-M))+k*(_=Math.sin(-M)),g=S*v+A*_,m=P*v+O*_,k=T*-_+k*v,A=S*-_+A*v,O=P*-_+O*v,N=C*-_+N*v,T=d,S=g,P=m),M=Math.atan2(-b,O),c.rotationY=M*H,M&&(g=x*(v=Math.cos(-M))-A*(_=Math.sin(-M)),m=b*v-O*_,A=x*_+A*v,O=b*_+O*v,N=w*_+N*v,y=d=y*v-k*_,x=g,b=m),M=Math.atan2(x,y),c.rotation=M*H,M&&(d=y*(v=Math.cos(M))+x*(_=Math.sin(M)),g=T*v+S*_,m=k*v+A*_,x=x*v-y*_,S=S*v-T*_,A=A*v-k*_,y=d,T=g,k=m),c.rotationX&&359.9<Math.abs(c.rotationX)+Math.abs(c.rotation)&&(c.rotationX=c.rotation=0,c.rotationY=180-c.rotationY),M=Math.atan2(T,S),c.scaleX=(1e5*Math.sqrt(y*y+x*x+b*b)+.5|0)/1e5,c.scaleY=(1e5*Math.sqrt(S*S+P*P)+.5|0)/1e5,c.scaleZ=(1e5*Math.sqrt(k*k+A*A+O*O)+.5|0)/1e5,y/=c.scaleX,T/=c.scaleY,x/=c.scaleX,S/=c.scaleY,2e-5<Math.abs(M)?(c.skewX=M*H,T=0,"simple"!==c.skewType&&(c.scaleY*=1/Math.cos(M))):c.skewX=0,c.perspective=N?1/(N<0?-N:N):0,c.x=R,c.y=E,c.z=D,c.svg&&(c.x-=c.xOrigin-(c.xOrigin*y-c.yOrigin*T),c.y-=c.yOrigin-(c.yOrigin*x-c.xOrigin*S))}else if(!Fe||n||!r.length||c.x!==r[4]||c.y!==r[5]||!c.rotationX&&!c.rotationY){var L=6<=r.length,j=L?r[0]:1,F=r[1]||0,I=r[2]||0,z=L?r[3]:1;c.x=r[4]||0,c.y=r[5]||0,s=Math.sqrt(j*j+F*F),a=Math.sqrt(z*z+I*I),l=j||F?Math.atan2(F,j)*H:c.rotation||0,u=I||z?Math.atan2(I,z)*H+l:c.skewX||0,c.scaleX=s,c.scaleY=a,c.rotation=l,c.skewX=u,Fe&&(c.rotationX=c.rotationY=c.z=0,c.perspective=p,c.scaleZ=1),c.svg&&(c.x-=c.xOrigin-(c.xOrigin*j+c.yOrigin*I),c.y-=c.yOrigin-(c.xOrigin*F+c.yOrigin*z))}for(o in 90<Math.abs(c.skewX)&&Math.abs(c.skewX)<270&&(f?(c.scaleX*=-1,c.skewX+=c.rotation<=0?180:-180,c.rotation+=c.rotation<=0?180:-180):(c.scaleY*=-1,c.skewX+=c.skewX<=0?180:-180)),c.zOrigin=h,c)c[o]<2e-5&&-2e-5<c[o]&&(c[o]=0)}return i&&((e._gsTransform=c).svg&&(Ae&&e.style[Me]?q.delayedCall(.001,function(){Je(e.style,Me)}):!Ae&&e.getAttribute("transform")&&q.delayedCall(.001,function(){e.removeAttribute("transform")}))),c},Ye=function(e){var t,i,n=this.data,r=-n.rotation*I,o=r+n.skewX*I,s=(Math.cos(r)*n.scaleX*1e5|0)/1e5,a=(Math.sin(r)*n.scaleX*1e5|0)/1e5,l=(Math.sin(o)*-n.scaleY*1e5|0)/1e5,u=(Math.cos(o)*n.scaleY*1e5|0)/1e5,c=this.t.style,f=this.t.currentStyle;if(f){i=a,a=-l,l=-i,t=f.filter,c.filter="";var h,p,d=this.t.offsetWidth,g=this.t.offsetHeight,m="absolute"!==f.position,v="progid:DXImageTransform.Microsoft.Matrix(M11="+s+", M12="+a+", M21="+l+", M22="+u,_=n.x+d*n.xPercent/100,y=n.y+g*n.yPercent/100;if(null!=n.ox&&(_+=(h=(n.oxp?d*n.ox*.01:n.ox)-d/2)-(h*s+(p=(n.oyp?g*n.oy*.01:n.oy)-g/2)*a),y+=p-(h*l+p*u)),m?v+=", Dx="+((h=d/2)-(h*s+(p=g/2)*a)+_)+", Dy="+(p-(h*l+p*u)+y)+")":v+=", sizingMethod='auto expand')",-1!==t.indexOf("DXImageTransform.Microsoft.Matrix(")?c.filter=t.replace(M,v):c.filter=v+" "+t,(0===e||1===e)&&1===s&&0===a&&0===l&&1===u&&(m&&-1===v.indexOf("Dx=0, Dy=0")||N.test(t)&&100!==parseFloat(RegExp.$1)||-1===t.indexOf(t.indexOf("Alpha"))&&c.removeAttribute("filter")),!m){var x,b,w,T=P<8?1:-1;for(h=n.ieOffsetX||0,p=n.ieOffsetY||0,n.ieOffsetX=Math.round((d-((s<0?-s:s)*d+(a<0?-a:a)*g))/2+_),n.ieOffsetY=Math.round((g-((u<0?-u:u)*g+(l<0?-l:l)*d))/2+y),Se=0;Se<4;Se++)w=(i=-1!==(x=f[b=ae[Se]]).indexOf("px")?parseFloat(x):ie(this.t,b,parseFloat(x),x.replace(D,""))||0)!==n[b]?Se<2?-n.ieOffsetX:-n.ieOffsetY:Se<2?h-n.ieOffsetX:p-n.ieOffsetY,c[b]=(n[b]=Math.round(i-w*(0===Se||2===Se?1:T)))+"px"}}},Qe=r.set3DTransformRatio=r.setTransformRatio=function(e){var t,i,n,r,o,s,a,l,u,c,f,h,p,d,g,m,v,_,y,x,b=this.data,w=this.t.style,T=b.rotation,S=b.rotationX,P=b.rotationY,C=b.scaleX,k=b.scaleY,A=b.scaleZ,O=b.x,R=b.y,E=b.z,D=b.svg,N=b.perspective,M=b.force3D,L=b.skewY,j=b.skewX;if(L&&(j+=L,T+=L),!((1!==e&&0!==e||"auto"!==M||this.tween._totalTime!==this.tween._totalDuration&&this.tween._totalTime)&&M||E||N||P||S||1!==A)||Ae&&D||!Fe)T||j||D?(T*=I,x=j*I,1e5,i=Math.cos(T)*C,o=Math.sin(T)*C,n=Math.sin(T-x)*-k,s=Math.cos(T-x)*k,x&&"simple"===b.skewType&&(t=Math.tan(x-L*I),n*=t=Math.sqrt(1+t*t),s*=t,L&&(t=Math.tan(L*I),i*=t=Math.sqrt(1+t*t),o*=t)),D&&(O+=b.xOrigin-(b.xOrigin*i+b.yOrigin*n)+b.xOffset,R+=b.yOrigin-(b.xOrigin*o+b.yOrigin*s)+b.yOffset,Ae&&(b.xPercent||b.yPercent)&&(g=this.t.getBBox(),O+=.01*b.xPercent*g.width,R+=.01*b.yPercent*g.height),O<(g=1e-6)&&-g<O&&(O=0),R<g&&-g<R&&(R=0)),y=(1e5*i|0)/1e5+","+(1e5*o|0)/1e5+","+(1e5*n|0)/1e5+","+(1e5*s|0)/1e5+","+O+","+R+")",D&&Ae?this.t.setAttribute("transform","matrix("+y):w[Me]=(b.xPercent||b.yPercent?"translate("+b.xPercent+"%,"+b.yPercent+"%) matrix(":"matrix(")+y):w[Me]=(b.xPercent||b.yPercent?"translate("+b.xPercent+"%,"+b.yPercent+"%) matrix(":"matrix(")+C+",0,0,"+k+","+O+","+R+")";else{if(F&&(C<(g=1e-4)&&-g<C&&(C=A=2e-5),k<g&&-g<k&&(k=A=2e-5),!N||b.z||b.rotationX||b.rotationY||(N=0)),T||j)T*=I,m=i=Math.cos(T),v=o=Math.sin(T),j&&(T-=j*I,m=Math.cos(T),v=Math.sin(T),"simple"===b.skewType&&(t=Math.tan((j-L)*I),m*=t=Math.sqrt(1+t*t),v*=t,b.skewY&&(t=Math.tan(L*I),i*=t=Math.sqrt(1+t*t),o*=t))),n=-v,s=m;else{if(!(P||S||1!==A||N||D))return void(w[Me]=(b.xPercent||b.yPercent?"translate("+b.xPercent+"%,"+b.yPercent+"%) translate3d(":"translate3d(")+O+"px,"+R+"px,"+E+"px)"+(1!==C||1!==k?" scale("+C+","+k+")":""));i=s=1,n=o=0}c=1,r=a=l=u=f=h=0,p=N?-1/N:0,d=b.zOrigin,g=1e-6,",","0",(T=P*I)&&(m=Math.cos(T),f=p*(l=-(v=Math.sin(T))),r=i*v,a=o*v,p*=c=m,i*=m,o*=m),(T=S*I)&&(t=n*(m=Math.cos(T))+r*(v=Math.sin(T)),_=s*m+a*v,u=c*v,h=p*v,r=n*-v+r*m,a=s*-v+a*m,c*=m,p*=m,n=t,s=_),1!==A&&(r*=A,a*=A,c*=A,p*=A),1!==k&&(n*=k,s*=k,u*=k,h*=k),1!==C&&(i*=C,o*=C,l*=C,f*=C),(d||D)&&(d&&(O+=r*-d,R+=a*-d,E+=c*-d+d),D&&(O+=b.xOrigin-(b.xOrigin*i+b.yOrigin*n)+b.xOffset,R+=b.yOrigin-(b.xOrigin*o+b.yOrigin*s)+b.yOffset),O<g&&-g<O&&(O="0"),R<g&&-g<R&&(R="0"),E<g&&-g<E&&(E=0)),y=b.xPercent||b.yPercent?"translate("+b.xPercent+"%,"+b.yPercent+"%) matrix3d(":"matrix3d(",y+=(i<g&&-g<i?"0":i)+","+(o<g&&-g<o?"0":o)+","+(l<g&&-g<l?"0":l),y+=","+(f<g&&-g<f?"0":f)+","+(n<g&&-g<n?"0":n)+","+(s<g&&-g<s?"0":s),S||P||1!==A?(y+=","+(u<g&&-g<u?"0":u)+","+(h<g&&-g<h?"0":h)+","+(r<g&&-g<r?"0":r),y+=","+(a<g&&-g<a?"0":a)+","+(c<g&&-g<c?"0":c)+","+(p<g&&-g<p?"0":p)+","):y+=",0,0,0,0,1,0,",y+=O+","+R+","+E+","+(N?1+-E/N:1)+")",w[Me]=y}};(e=Ie.prototype).x=e.y=e.z=e.skewX=e.skewY=e.rotation=e.rotationX=e.rotationY=e.zOrigin=e.xPercent=e.yPercent=e.xOffset=e.yOffset=0,e.scaleX=e.scaleY=e.scaleZ=1,Ce("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin",{parser:function(e,t,i,n,r,o,s){if(n._lastParsedTransform===s)return r;var a,l=(n._lastParsedTransform=s).scale&&"function"==typeof s.scale?s.scale:0;"function"==typeof s[i]&&(a=s[i],s[i]=t),l&&(s.scale=l(O,e));var u,c,f,h,p,d,g,m,v,_=e._gsTransform,y=e.style,x=Ne.length,b=s,w={},T="transformOrigin",S=Ue(e,C,!0,b.parseTransform),P=b.transform&&("function"==typeof b.transform?b.transform(O,A):b.transform);if(S.skewType=b.skewType||S.skewType||V.defaultSkewType,n._transform=S,P&&"string"==typeof P&&Me)(c=G.style)[Me]=P,c.display="block",c.position="absolute",B.body.appendChild(G),u=Ue(G,null,!1),"simple"===S.skewType&&(u.scaleY*=Math.cos(u.skewX*I)),S.svg&&(d=S.xOrigin,g=S.yOrigin,u.x-=S.xOffset,u.y-=S.yOffset,(b.transformOrigin||b.svgOrigin)&&(P={},Be(e,ue(b.transformOrigin),P,b.svgOrigin,b.smoothOrigin,!0),d=P.xOrigin,g=P.yOrigin,u.x-=P.xOffset-S.xOffset,u.y-=P.yOffset-S.yOffset),(d||g)&&(m=$e(G,!0),u.x-=d-(d*m[0]+g*m[2]),u.y-=g-(d*m[1]+g*m[3]))),B.body.removeChild(G),u.perspective||(u.perspective=S.perspective),null!=b.xPercent&&(u.xPercent=fe(b.xPercent,S.xPercent)),null!=b.yPercent&&(u.yPercent=fe(b.yPercent,S.yPercent));else if("object"==typeof b){if(u={scaleX:fe(null!=b.scaleX?b.scaleX:b.scale,S.scaleX),scaleY:fe(null!=b.scaleY?b.scaleY:b.scale,S.scaleY),scaleZ:fe(b.scaleZ,S.scaleZ),x:fe(b.x,S.x),y:fe(b.y,S.y),z:fe(b.z,S.z),xPercent:fe(b.xPercent,S.xPercent),yPercent:fe(b.yPercent,S.yPercent),perspective:fe(b.transformPerspective,S.perspective)},null!=(p=b.directionalRotation))if("object"==typeof p)for(c in p)b[c]=p[c];else b.rotation=p;"string"==typeof b.x&&-1!==b.x.indexOf("%")&&(u.x=0,u.xPercent=fe(b.x,S.xPercent)),"string"==typeof b.y&&-1!==b.y.indexOf("%")&&(u.y=0,u.yPercent=fe(b.y,S.yPercent)),u.rotation=he("rotation"in b?b.rotation:"shortRotation"in b?b.shortRotation+"_short":"rotationZ"in b?b.rotationZ:S.rotation,S.rotation,"rotation",w),Fe&&(u.rotationX=he("rotationX"in b?b.rotationX:"shortRotationX"in b?b.shortRotationX+"_short":S.rotationX||0,S.rotationX,"rotationX",w),u.rotationY=he("rotationY"in b?b.rotationY:"shortRotationY"in b?b.shortRotationY+"_short":S.rotationY||0,S.rotationY,"rotationY",w)),u.skewX=he(b.skewX,S.skewX),u.skewY=he(b.skewY,S.skewY)}for(Fe&&null!=b.force3D&&(S.force3D=b.force3D,h=!0),(f=S.force3D||S.z||S.rotationX||S.rotationY||u.z||u.rotationX||u.rotationY||u.perspective)||null==b.scale||(u.scaleZ=1);-1<--x;)(1e-6<(P=u[v=Ne[x]]-S[v])||P<-1e-6||null!=b[v]||null!=z[v])&&(h=!0,r=new be(S,v,S[v],P,r),v in w&&(r.e=w[v]),r.xs0=0,r.plugin=o,n._overwriteProps.push(r.n));return P=b.transformOrigin,S.svg&&(P||b.svgOrigin)&&(d=S.xOffset,g=S.yOffset,Be(e,ue(P),u,b.svgOrigin,b.smoothOrigin),r=we(S,"xOrigin",(_?S:u).xOrigin,u.xOrigin,r,T),r=we(S,"yOrigin",(_?S:u).yOrigin,u.yOrigin,r,T),(d!==S.xOffset||g!==S.yOffset)&&(r=we(S,"xOffset",_?d:S.xOffset,S.xOffset,r,T),r=we(S,"yOffset",_?g:S.yOffset,S.yOffset,r,T)),P="0px 0px"),(P||Fe&&f&&S.zOrigin)&&(Me?(h=!0,v=je,P=(P||te(e,v,C,!1,"50% 50%"))+"",(r=new be(y,v,0,0,r,-1,T)).b=y[v],r.plugin=o,r.xs0=r.e=Fe?(c=S.zOrigin,P=P.split(" "),S.zOrigin=(2<P.length&&(0===c||"0px"!==P[2])?parseFloat(P[2]):c)||0,r.xs0=r.e=P[0]+" "+(P[1]||"50%")+" 0px",(r=new be(S,"zOrigin",0,0,r,-1,r.n)).b=c,S.zOrigin):P):ue(P+"",S)),h&&(n._transformType=S.svg&&Ae||!f&&3!==this._transformType?2:3),a&&(s[i]=a),l&&(s.scale=l),r},prefix:!0}),Ce("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),Ce("borderRadius",{defaultValue:"0px",parser:function(e,t,i,n,r,o){t=this.format(t);var s,a,l,u,c,f,h,p,d,g,m,v,_,y,x,b,w=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],T=e.style;for(d=parseFloat(e.offsetWidth),g=parseFloat(e.offsetHeight),s=t.split(" "),a=0;a<w.length;a++)this.p.indexOf("border")&&(w[a]=K(w[a])),-1!==(c=u=te(e,w[a],C,!1,"0px")).indexOf(" ")&&(c=(u=c.split(" "))[0],u=u[1]),f=l=s[a],h=parseFloat(c),v=c.substr((h+"").length),""===(m=(_="="===f.charAt(1))?(p=parseInt(f.charAt(0)+"1",10),f=f.substr(2),p*=parseFloat(f),f.substr((p+"").length-(p<0?1:0))||""):(p=parseFloat(f),f.substr((p+"").length)))&&(m=S[i]||v),m!==v&&(y=ie(e,"borderLeft",h,v),x=ie(e,"borderTop",h,v),u="%"===m?(c=y/d*100+"%",x/g*100+"%"):"em"===m?(c=y/(b=ie(e,"borderLeft",1,"em"))+"em",x/b+"em"):(c=y+"px",x+"px"),_&&(f=parseFloat(c)+p+m,l=parseFloat(u)+p+m)),r=Te(T,w[a],c+" "+u,f+" "+l,!1,"0px",r);return r},prefix:!0,formatter:_e("0px 0px 0px 0px",!1,!0)}),Ce("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius",{defaultValue:"0px",parser:function(e,t,i,n,r,o){return Te(e.style,i,this.format(te(e,i,C,!1,"0px 0px")),this.format(t),!1,"0px",r)},prefix:!0,formatter:_e("0px 0px",!1,!0)}),Ce("backgroundPosition",{defaultValue:"0 0",parser:function(e,t,i,n,r,o){var s,a,l,u,c,f,h="background-position",p=C||ee(e,null),d=this.format((p?P?p.getPropertyValue(h+"-x")+" "+p.getPropertyValue(h+"-y"):p.getPropertyValue(h):e.currentStyle.backgroundPositionX+" "+e.currentStyle.backgroundPositionY)||"0 0"),g=this.format(t);if(-1!==d.indexOf("%")!=(-1!==g.indexOf("%"))&&g.split(",").length<2&&((f=te(e,"backgroundImage").replace(T,""))&&"none"!==f)){for(s=d.split(" "),a=g.split(" "),W.setAttribute("src",f),l=2;-1<--l;)(u=-1!==(d=s[l]).indexOf("%"))!==(-1!==a[l].indexOf("%"))&&(c=0===l?e.offsetWidth-W.width:e.offsetHeight-W.height,s[l]=u?parseFloat(d)/100*c+"px":parseFloat(d)/c*100+"%");d=s.join(" ")}return this.parseComplex(e.style,d,g,r,o)},formatter:ue}),Ce("backgroundSize",{defaultValue:"0 0",formatter:function(e){return ue(-1===(e+="").indexOf(" ")?e+" "+e:e)}}),Ce("perspective",{defaultValue:"0px",prefix:!0}),Ce("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),Ce("transformStyle",{prefix:!0}),Ce("backfaceVisibility",{prefix:!0}),Ce("userSelect",{prefix:!0}),Ce("margin",{parser:ye("marginTop,marginRight,marginBottom,marginLeft")}),Ce("padding",{parser:ye("paddingTop,paddingRight,paddingBottom,paddingLeft")}),Ce("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(e,t,i,n,r,o){var s,a,l;return t=P<9?(a=e.currentStyle,l=P<8?" ":",",s="rect("+a.clipTop+l+a.clipRight+l+a.clipBottom+l+a.clipLeft+")",this.format(t).split(",").join(l)):(s=this.format(te(e,this.p,C,!1,this.dflt)),this.format(t)),this.parseComplex(e.style,s,t,r,o)}}),Ce("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),Ce("autoRound,strictUnits",{parser:function(e,t,i,n,r){return r}}),Ce("border",{defaultValue:"0px solid #000",parser:function(e,t,i,n,r,o){var s=te(e,"borderTopWidth",C,!1,"0px"),a=this.format(t).split(" "),l=a[0].replace(D,"");return"px"!==l&&(s=parseFloat(s)/ie(e,"borderTopWidth",1,l)+l),this.parseComplex(e.style,this.format(s+" "+te(e,"borderTopStyle",C,!1,"solid")+" "+te(e,"borderTopColor",C,!1,"#000")),a.join(" "),r,o)},color:!0,formatter:function(e){var t=e.split(" ");return t[0]+" "+(t[1]||"solid")+" "+(e.match(ve)||["#000"])[0]}}),Ce("borderWidth",{parser:ye("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}),Ce("float,cssFloat,styleFloat",{parser:function(e,t,i,n,r,o){var s=e.style,a="cssFloat"in s?"cssFloat":"styleFloat";return new be(s,a,0,0,r,-1,i,!1,0,s[a],t)}});var Ze=function(e){var t,i=this.t,n=i.filter||te(this.data,"filter")||"",r=this.s+this.c*e|0;100===r&&(t=-1===n.indexOf("atrix(")&&-1===n.indexOf("radient(")&&-1===n.indexOf("oader(")?(i.removeAttribute("filter"),!te(this.data,"filter")):(i.filter=n.replace(s,""),!0)),t||(this.xn1&&(i.filter=n=n||"alpha(opacity="+r+")"),-1===n.indexOf("pacity")?0===r&&this.xn1||(i.filter=n+" alpha(opacity="+r+")"):i.filter=n.replace(N,"opacity="+r))};Ce("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(e,t,i,n,r,o){var s=parseFloat(te(e,"opacity",C,!1,"1")),a=e.style,l="autoAlpha"===i;return"string"==typeof t&&"="===t.charAt(1)&&(t=("-"===t.charAt(0)?-1:1)*parseFloat(t.substr(2))+s),l&&1===s&&"hidden"===te(e,"visibility",C)&&0!==t&&(s=0),U?r=new be(a,"opacity",s,t-s,r):((r=new be(a,"opacity",100*s,100*(t-s),r)).xn1=l?1:0,a.zoom=1,r.type=2,r.b="alpha(opacity="+r.s+")",r.e="alpha(opacity="+(r.s+r.c)+")",r.data=e,r.plugin=o,r.setRatio=Ze),l&&((r=new be(a,"visibility",0,0,r,-1,null,!1,0,0!==s?"inherit":"hidden",0===t?"hidden":"inherit")).xs0="inherit",n._overwriteProps.push(r.n),n._overwriteProps.push(i)),r}});var Je=function(e,t){t&&(e.removeProperty?(("ms"===t.substr(0,2)||"webkit"===t.substr(0,6))&&(t="-"+t),e.removeProperty(t.replace(a,"-$1").toLowerCase())):e.removeAttribute(t))},Ke=function(e){if(this.t._gsClassPT=this,1===e||0===e){this.t.setAttribute("class",0===e?this.b:this.e);for(var t=this.data,i=this.t.style;t;)t.v?i[t.p]=t.v:Je(i,t.p),t=t._next;1===e&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute("class")!==this.e&&this.t.setAttribute("class",this.e)};Ce("className",{parser:function(e,t,i,n,r,o,s){var a,l,u,c,f,h=e.getAttribute("class")||"",p=e.style.cssText;if((r=n._classNamePT=new be(e,i,0,0,r,2)).setRatio=Ke,r.pr=-11,d=!0,r.b=h,l=re(e,C),u=e._gsClassPT){for(c={},f=u.data;f;)c[f.p]=1,f=f._next;u.setRatio(1)}return(e._gsClassPT=r).e="="!==t.charAt(1)?t:h.replace(new RegExp("(?:\\s|^)"+t.substr(2)+"(?![\\w-])"),"")+("+"===t.charAt(0)?" "+t.substr(2):""),e.setAttribute("class",r.e),a=oe(e,l,re(e),s,c),e.setAttribute("class",h),r.data=a.firstMPT,e.style.cssText=p,r.xfirst=n.parse(e,a.difs,r,o)}});var et=function(e){if((1===e||0===e)&&this.data._totalTime===this.data._totalDuration&&"isFromStart"!==this.data.data){var t,i,n,r,o,s=this.t.style,a=m.transform.parse;if("all"===this.e)r=!(s.cssText="");else for(n=(t=this.e.split(" ").join("").split(",")).length;-1<--n;)i=t[n],m[i]&&(m[i].parse===a?r=!0:i="transformOrigin"===i?je:m[i].p),Je(s,i);r&&(Je(s,Me),(o=this.t._gsTransform)&&(o.svg&&(this.t.removeAttribute("data-svg-origin"),this.t.removeAttribute("transform")),delete this.t._gsTransform))}};for(Ce("clearProps",{parser:function(e,t,i,n,r){return(r=new be(e,i,0,0,r,2)).setRatio=et,r.e=t,r.pr=-10,r.data=n._tween,d=!0,r}}),e="bezier,throwProps,physicsProps,physics2D".split(","),Se=e.length;Se--;)ke(e[Se]);(e=V.prototype)._firstPT=e._lastParsedTransform=e._transform=null,e._onInitTween=function(e,t,i,n){if(!e.nodeType)return!1;this._target=A=e,this._tween=i,this._vars=t,O=n,k=t.autoRound,d=!1,S=t.suffixMap||V.suffixMap,C=ee(e,""),g=this._overwriteProps;var r,o,s,a,l,u,c,f,h,p=e.style;if(v&&""===p.zIndex&&(("auto"===(r=te(e,"zIndex",C))||""===r)&&this._addLazySet(p,"zIndex",0)),"string"==typeof t&&(a=p.cssText,r=re(e,C),p.cssText=a+";"+t,r=oe(e,r,re(e)).difs,!U&&b.test(t)&&(r.opacity=parseFloat(RegExp.$1)),t=r,p.cssText=a),t.className?this._firstPT=o=m.className.parse(e,t.className,"className",this,null,null,t):this._firstPT=o=this.parse(e,t,null),this._transformType){for(h=3===this._transformType,Me?_&&(v=!0,""===p.zIndex&&(("auto"===(c=te(e,"zIndex",C))||""===c)&&this._addLazySet(p,"zIndex",0)),y&&this._addLazySet(p,"WebkitBackfaceVisibility",this._vars.WebkitBackfaceVisibility||(h?"visible":"hidden"))):p.zoom=1,s=o;s&&s._next;)s=s._next;f=new be(e,"transform",0,0,null,2),this._linkCSSP(f,null,s),f.setRatio=Me?Qe:Ye,f.data=this._transform||Ue(e,C,!0),f.tween=i,f.pr=-1,g.pop()}if(d){for(;o;){for(u=o._next,s=a;s&&s.pr>o.pr;)s=s._next;(o._prev=s?s._prev:l)?o._prev._next=o:a=o,(o._next=s)?s._prev=o:l=o,o=u}this._firstPT=a}return!0},e.parse=function(e,t,i,n){var r,o,s,a,l,u,c,f,h,p,d=e.style;for(r in t){if("function"==typeof(u=t[r])&&(u=u(O,A)),o=m[r])i=o.parse(e,u,r,this,i,n,t);else{if("--"===r.substr(0,2)){this._tween._propLookup[r]=this._addTween.call(this._tween,e.style,"setProperty",ee(e).getPropertyValue(r)+"",u+"",r,!1,r);continue}l=te(e,r,C)+"",h="string"==typeof u,"color"===r||"fill"===r||"stroke"===r||-1!==r.indexOf("Color")||h&&w.test(u)?(h||(u=(3<(u=ge(u)).length?"rgba(":"rgb(")+u.join(",")+")"),i=Te(d,r,l,u,!0,"transparent",i,0,n)):h&&j.test(u)?i=Te(d,r,l,u,!0,null,i,0,n):(c=(s=parseFloat(l))||0===s?l.substr((s+"").length):"",(""===l||"auto"===l)&&(c="width"===r||"height"===r?(s=le(e,r,C),"px"):"left"===r||"top"===r?(s=ne(e,r,C),"px"):(s="opacity"!==r?0:1,"")),""===(f=(p=h&&"="===u.charAt(1))?(a=parseInt(u.charAt(0)+"1",10),u=u.substr(2),a*=parseFloat(u),u.replace(D,"")):(a=parseFloat(u),h?u.replace(D,""):""))&&(f=r in S?S[r]:c),u=a||0===a?(p?a+s:a)+f:t[r],c!==f&&(""!==f||"lineHeight"===r)&&(a||0===a)&&s&&(s=ie(e,r,s,c),"%"===f?(s/=ie(e,r,100,"%")/100,!0!==t.strictUnits&&(l=s+"%")):"em"===f||"rem"===f||"vw"===f||"vh"===f?s/=ie(e,r,1,f):"px"!==f&&(a=ie(e,r,a,f),f="px"),p&&(a||0===a)&&(u=a+s+f)),p&&(a+=s),!s&&0!==s||!a&&0!==a?void 0!==d[r]&&(u||u+""!="NaN"&&null!=u)?(i=new be(d,r,a||s||0,0,i,-1,r,!1,0,l,u)).xs0="none"!==u||"display"!==r&&-1===r.indexOf("Style")?u:l:Q("invalid "+r+" tween value: "+t[r]):(i=new be(d,r,s,a-s,i,0,r,!1!==k&&("px"===f||"zIndex"===r),0,l,u)).xs0=f)}n&&i&&!i.plugin&&(i.plugin=n)}return i},e.setRatio=function(e){var t,i,n,r=this._firstPT;if(1!==e||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(e||this._tween._time!==this._tween._duration&&0!==this._tween._time||-1e-6===this._tween._rawPrevTime)for(;r;){if(t=r.c*e+r.s,r.r?t=Math.round(t):t<1e-6&&-1e-6<t&&(t=0),r.type)if(1===r.type)if(2===(n=r.l))r.t[r.p]=r.xs0+t+r.xs1+r.xn1+r.xs2;else if(3===n)r.t[r.p]=r.xs0+t+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3;else if(4===n)r.t[r.p]=r.xs0+t+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4;else if(5===n)r.t[r.p]=r.xs0+t+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4+r.xn4+r.xs5;else{for(i=r.xs0+t+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}else-1===r.type?r.t[r.p]=r.xs0:r.setRatio&&r.setRatio(e);else r.t[r.p]=t+r.xs0;r=r._next}else for(;r;)2!==r.type?r.t[r.p]=r.b:r.setRatio(e),r=r._next;else for(;r;){if(2!==r.type)if(r.r&&-1!==r.type)if(t=Math.round(r.s+r.c),r.type){if(1===r.type){for(n=r.l,i=r.xs0+t+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}}else r.t[r.p]=t+r.xs0;else r.t[r.p]=r.e;else r.setRatio(e);r=r._next}},e._enableTransforms=function(e){this._transform=this._transform||Ue(this._target,C,!0),this._transformType=this._transform.svg&&Ae||!e&&3!==this._transformType?2:3};var tt=function(e){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};e._addLazySet=function(e,t,i){var n=this._firstPT=new be(e,t,0,0,this._firstPT,2);n.e=i,n.setRatio=tt,n.data=this},e._linkCSSP=function(e,t,i,n){return e&&(t&&(t._prev=e),e._next&&(e._next._prev=e._prev),e._prev?e._prev._next=e._next:this._firstPT===e&&(this._firstPT=e._next,n=!0),i?i._next=e:n||null!==this._firstPT||(this._firstPT=e),e._next=t,e._prev=i),e},e._mod=function(e){for(var t=this._firstPT;t;)"function"==typeof e[t.p]&&e[t.p]===Math.round&&(t.r=1),t=t._next},e._kill=function(e){var t,i,n,r=e;if(e.autoAlpha||e.alpha){for(i in r={},e)r[i]=e[i];r.opacity=1,r.autoAlpha&&(r.visibility=1)}for(e.className&&(t=this._classNamePT)&&((n=t.xfirst)&&n._prev?this._linkCSSP(n._prev,t._next,n._prev._prev):n===this._firstPT&&(this._firstPT=t._next),t._next&&this._linkCSSP(t._next,t._next._next,n._prev),this._classNamePT=null),t=this._firstPT;t;)t.plugin&&t.plugin!==i&&t.plugin._kill&&(t.plugin._kill(e),i=t.plugin),t=t._next;return o.prototype._kill.call(this,r)};var it=function(e,t,i){var n,r,o,s;if(e.slice)for(r=e.length;-1<--r;)it(e[r],t,i);else for(r=(n=e.childNodes).length;-1<--r;)s=(o=n[r]).type,o.style&&(t.push(re(o)),i&&i.push(o)),1!==s&&9!==s&&11!==s||!o.childNodes.length||it(o,t,i)};return V.cascadeTo=function(e,t,i){var n,r,o,s,a=q.to(e,t,i),l=[a],u=[],c=[],f=[],h=q._internals.reservedProps;for(e=a._targets||a.target,it(e,u,f),a.render(t,!0,!0),it(e,c),a.render(0,!0,!0),a._enabled(!0),n=f.length;-1<--n;)if((r=oe(f[n],u[n],c[n])).firstMPT){for(o in r=r.difs,i)h[o]&&(r[o]=i[o]);for(o in s={},r)s[o]=u[n][o];l.push(q.fromTo(f[n],t,s,r))}return l},o.activate([V]),V},!0),e=_gsScope._gsDefine.plugin({propName:"roundProps",version:"1.6.0",priority:-1,API:2,init:function(e,t,i){return this._tween=i,!0}}),l=function(e){for(;e;)e.f||e.blob||(e.m=Math.round),e=e._next},(t=e.prototype)._onInitAllProps=function(){for(var e,t,i,n=this._tween,r=n.vars.roundProps.join?n.vars.roundProps:n.vars.roundProps.split(","),o=r.length,s={},a=n._propLookup.roundProps;-1<--o;)s[r[o]]=Math.round;for(o=r.length;-1<--o;)for(e=r[o],t=n._firstPT;t;)i=t._next,t.pg?t.t._mod(s):t.n===e&&(2===t.f&&t.t?l(t.t._firstPT):(this._add(t.t,e,t.s,t.c),i&&(i._prev=t._prev),t._prev?t._prev._next=i:n._firstPT===t&&(n._firstPT=i),t._next=t._prev=null,n._propLookup[e]=a)),t=i;return!1},t._add=function(e,t,i,n){this._addTween(e,t,i,i+n,t,Math.round),this._overwriteProps.push(t)},_gsScope._gsDefine.plugin({propName:"attr",API:2,version:"0.6.1",init:function(e,t,i,n){var r,o;if("function"!=typeof e.setAttribute)return!1;for(r in t)"function"==typeof(o=t[r])&&(o=o(n,e)),this._addTween(e,"setAttribute",e.getAttribute(r)+"",o+"",r,!1,r),this._overwriteProps.push(r);return!0}}),_gsScope._gsDefine.plugin({propName:"directionalRotation",version:"0.3.1",API:2,init:function(e,t,i,n){"object"!=typeof t&&(t={rotation:t}),this.finals={};var r,o,s,a,l,u,c=!0===t.useRadians?2*Math.PI:360;for(r in t)"useRadians"!==r&&("function"==typeof(a=t[r])&&(a=a(n,e)),o=(u=(a+"").split("_"))[0],s=parseFloat("function"!=typeof e[r]?e[r]:e[r.indexOf("set")||"function"!=typeof e["get"+r.substr(3)]?r:"get"+r.substr(3)]()),l=(a=this.finals[r]="string"==typeof o&&"="===o.charAt(1)?s+parseInt(o.charAt(0)+"1",10)*Number(o.substr(2)):Number(o)||0)-s,u.length&&(-1!==(o=u.join("_")).indexOf("short")&&((l%=c)!==l%(c/2)&&(l=l<0?l+c:l-c)),-1!==o.indexOf("_cw")&&l<0?l=(l+9999999999*c)%c-(l/c|0)*c:-1!==o.indexOf("ccw")&&0<l&&(l=(l-9999999999*c)%c-(l/c|0)*c)),(1e-6<l||l<-1e-6)&&(this._addTween(e,r,s,s+l,r),this._overwriteProps.push(r)));return!0},set:function(e){var t;if(1!==e)this._super.setRatio.call(this,e);else for(t=this._firstPT;t;)t.f?t.t[t.p](this.finals[t.p]):t.t[t.p]=this.finals[t.p],t=t._next}})._autoCSS=!0,_gsScope._gsDefine("easing.Back",["easing.Ease"],function(m){var i,t,e,n=_gsScope.GreenSockGlobals||_gsScope,r=n.com.greensock,o=2*Math.PI,s=Math.PI/2,a=r._class,l=function(e,t){var i=a("easing."+e,function(){},!0),n=i.prototype=new m;return n.constructor=i,n.getRatio=t,i},u=m.register||function(){},c=function(e,t,i,n,r){var o=a("easing."+e,{easeOut:new t,easeIn:new i,easeInOut:new n},!0);return u(o,e),o},v=function(e,t,i){this.t=e,this.v=t,i&&(((this.next=i).prev=this).c=i.v-t,this.gap=i.t-e)},f=function(e,t){var i=a("easing."+e,function(e){this._p1=e||0===e?e:1.70158,this._p2=1.525*this._p1},!0),n=i.prototype=new m;return n.constructor=i,n.getRatio=t,n.config=function(e){return new i(e)},i},h=c("Back",f("BackOut",function(e){return(e-=1)*e*((this._p1+1)*e+this._p1)+1}),f("BackIn",function(e){return e*e*((this._p1+1)*e-this._p1)}),f("BackInOut",function(e){return(e*=2)<1?.5*e*e*((this._p2+1)*e-this._p2):.5*((e-=2)*e*((this._p2+1)*e+this._p2)+2)})),p=a("easing.SlowMo",function(e,t,i){t=t||0===t?t:.7,null==e?e=.7:1<e&&(e=1),this._p=1!==e?t:0,this._p1=(1-e)/2,this._p2=e,this._p3=this._p1+this._p2,this._calcEnd=!0===i},!0),d=p.prototype=new m;return d.constructor=p,d.getRatio=function(e){var t=e+(.5-e)*this._p;return e<this._p1?this._calcEnd?1-(e=1-e/this._p1)*e:t-(e=1-e/this._p1)*e*e*e*t:e>this._p3?this._calcEnd?1===e?0:1-(e=(e-this._p3)/this._p1)*e:t+(e-t)*(e=(e-this._p3)/this._p1)*e*e*e:this._calcEnd?1:t},p.ease=new p(.7,.7),d.config=p.config=function(e,t,i){return new p(e,t,i)},(d=(i=a("easing.SteppedEase",function(e,t){e=e||1,this._p1=1/e,this._p2=e+(t?0:1),this._p3=t?1:0},!0)).prototype=new m).constructor=i,d.getRatio=function(e){return e<0?e=0:1<=e&&(e=.999999999),((this._p2*e|0)+this._p3)*this._p1},d.config=i.config=function(e,t){return new i(e,t)},(d=(t=a("easing.RoughEase",function(e){for(var t,i,n,r,o,s,a=(e=e||{}).taper||"none",l=[],u=0,c=0|(e.points||20),f=c,h=!1!==e.randomize,p=!0===e.clamp,d=e.template instanceof m?e.template:null,g="number"==typeof e.strength?.4*e.strength:.4;-1<--f;)t=h?Math.random():1/c*f,i=d?d.getRatio(t):t,n="none"===a?g:"out"===a?(r=1-t)*r*g:"in"===a?t*t*g:(r=t<.5?2*t:2*(1-t))*r*.5*g,h?i+=Math.random()*n-.5*n:f%2?i+=.5*n:i-=.5*n,p&&(1<i?i=1:i<0&&(i=0)),l[u++]={x:t,y:i};for(l.sort(function(e,t){return e.x-t.x}),s=new v(1,1,null),f=c;-1<--f;)o=l[f],s=new v(o.x,o.y,s);this._prev=new v(0,0,0!==s.t?s:s.next)},!0)).prototype=new m).constructor=t,d.getRatio=function(e){var t=this._prev;if(e>t.t){for(;t.next&&e>=t.t;)t=t.next;t=t.prev}else for(;t.prev&&e<=t.t;)t=t.prev;return(this._prev=t).v+(e-t.t)/t.gap*t.c},d.config=function(e){return new t(e)},t.ease=new t,c("Bounce",l("BounceOut",function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375}),l("BounceIn",function(e){return(e=1-e)<1/2.75?1-7.5625*e*e:e<2/2.75?1-(7.5625*(e-=1.5/2.75)*e+.75):e<2.5/2.75?1-(7.5625*(e-=2.25/2.75)*e+.9375):1-(7.5625*(e-=2.625/2.75)*e+.984375)}),l("BounceInOut",function(e){var t=e<.5;return e=(e=t?1-2*e:2*e-1)<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375,t?.5*(1-e):.5*e+.5})),c("Circ",l("CircOut",function(e){return Math.sqrt(1-(e-=1)*e)}),l("CircIn",function(e){return-(Math.sqrt(1-e*e)-1)}),l("CircInOut",function(e){return(e*=2)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)})),c("Elastic",(e=function(e,t,i){var n=a("easing."+e,function(e,t){this._p1=1<=e?e:1,this._p2=(t||i)/(e<1?e:1),this._p3=this._p2/o*(Math.asin(1/this._p1)||0),this._p2=o/this._p2},!0),r=n.prototype=new m;return r.constructor=n,r.getRatio=t,r.config=function(e,t){return new n(e,t)},n})("ElasticOut",function(e){return this._p1*Math.pow(2,-10*e)*Math.sin((e-this._p3)*this._p2)+1},.3),e("ElasticIn",function(e){return-this._p1*Math.pow(2,10*(e-=1))*Math.sin((e-this._p3)*this._p2)},.3),e("ElasticInOut",function(e){return(e*=2)<1?this._p1*Math.pow(2,10*(e-=1))*Math.sin((e-this._p3)*this._p2)*-.5:this._p1*Math.pow(2,-10*(e-=1))*Math.sin((e-this._p3)*this._p2)*.5+1},.45)),c("Expo",l("ExpoOut",function(e){return 1-Math.pow(2,-10*e)}),l("ExpoIn",function(e){return Math.pow(2,10*(e-1))-.001}),l("ExpoInOut",function(e){return(e*=2)<1?.5*Math.pow(2,10*(e-1)):.5*(2-Math.pow(2,-10*(e-1)))})),c("Sine",l("SineOut",function(e){return Math.sin(e*s)}),l("SineIn",function(e){return 1-Math.cos(e*s)}),l("SineInOut",function(e){return-.5*(Math.cos(Math.PI*e)-1)})),a("easing.EaseLookup",{find:function(e){return m.map[e]}},!0),u(n.SlowMo,"SlowMo","ease,"),u(t,"RoughEase","ease,"),u(i,"SteppedEase","ease,"),h},!0)}),_gsScope._gsDefine&&_gsScope._gsQueue.pop()(),function(h,p){"use strict";var t,i,d={},n=h.document,g=h.GreenSockGlobals=h.GreenSockGlobals||h;if(!g.TweenLite){var e,r,o,m,v,_=function(e){var t,i=e.split("."),n=g;for(t=0;t<i.length;t++)n[i[t]]=n=n[i[t]]||{};return n},f=_("com.greensock"),y=1e-10,l=function(e){var t,i=[],n=e.length;for(t=0;t!==n;i.push(e[t++]));return i},x=function(){},b=(t=Object.prototype.toString,i=t.call([]),function(e){return null!=e&&(e instanceof Array||"object"==typeof e&&!!e.push&&t.call(e)===i)}),w={},T=function(a,l,u,c){this.sc=w[a]?w[a].sc:[],(w[a]=this).gsClass=null,this.func=u;var f=[];this.check=function(e){for(var t,i,n,r,o=l.length,s=o;-1<--o;)(t=w[l[o]]||new T(l[o],[])).gsClass?(f[o]=t.gsClass,s--):e&&t.sc.push(this);if(0===s&&u){if(n=(i=("com.greensock."+a).split(".")).pop(),r=_(i.join("."))[n]=this.gsClass=u.apply(u,f),c)if(g[n]=d[n]=r,"undefined"!=typeof module&&module.exports)if(a===p)for(o in module.exports=d[p]=r,d)r[o]=d[o];else d[p]&&(d[p][n]=r);else"function"==typeof define&&define.amd&&define((h.GreenSockAMDPath?h.GreenSockAMDPath+"/":"")+a.split(".").pop(),[],function(){return r});for(o=0;o<this.sc.length;o++)this.sc[o].check()}},this.check(!0)},s=h._gsDefine=function(e,t,i,n){return new T(e,t,i,n)},S=f._class=function(e,t,i){return t=t||function(){},s(e,[],function(){return t},i),t};s.globals=g;var a=[0,0,1,1],P=S("easing.Ease",function(e,t,i,n){this._func=e,this._type=i||0,this._power=n||0,this._params=t?a.concat(t):a},!0),C=P.map={},u=P.register=function(e,t,i,n){for(var r,o,s,a,l=t.split(","),u=l.length,c=(i||"easeIn,easeOut,easeInOut").split(",");-1<--u;)for(o=l[u],r=n?S("easing."+o,null,!0):f.easing[o]||{},s=c.length;-1<--s;)a=c[s],C[o+"."+a]=C[a+o]=r[a]=e.getRatio?e:e[a]||new e};for((o=P.prototype)._calcEnd=!1,o.getRatio=function(e){if(this._func)return this._params[0]=e,this._func.apply(null,this._params);var t=this._type,i=this._power,n=1===t?1-e:2===t?e:e<.5?2*e:2*(1-e);return 1===i?n*=n:2===i?n*=n*n:3===i?n*=n*n*n:4===i&&(n*=n*n*n*n),1===t?1-n:2===t?n:e<.5?n/2:1-n/2},r=(e=["Linear","Quad","Cubic","Quart","Quint,Strong"]).length;-1<--r;)o=e[r]+",Power"+r,u(new P(null,null,1,r),o,"easeOut",!0),u(new P(null,null,2,r),o,"easeIn"+(0===r?",easeNone":"")),u(new P(null,null,3,r),o,"easeInOut");C.linear=f.easing.Linear.easeIn,C.swing=f.easing.Quad.easeInOut;var k=S("events.EventDispatcher",function(e){this._listeners={},this._eventTarget=e||this});(o=k.prototype).addEventListener=function(e,t,i,n,r){r=r||0;var o,s,a=this._listeners[e],l=0;for(this!==m||v||m.wake(),null==a&&(this._listeners[e]=a=[]),s=a.length;-1<--s;)(o=a[s]).c===t&&o.s===i?a.splice(s,1):0===l&&o.pr<r&&(l=s+1);a.splice(l,0,{c:t,s:i,up:n,pr:r})},o.removeEventListener=function(e,t){var i,n=this._listeners[e];if(n)for(i=n.length;-1<--i;)if(n[i].c===t)return void n.splice(i,1)},o.dispatchEvent=function(e){var t,i,n,r=this._listeners[e];if(r)for(1<(t=r.length)&&(r=r.slice(0)),i=this._eventTarget;-1<--t;)(n=r[t])&&(n.up?n.c.call(n.s||i,{type:e,target:i}):n.c.call(n.s||i))};var A=h.requestAnimationFrame,O=h.cancelAnimationFrame,R=Date.now||function(){return(new Date).getTime()},E=R();for(r=(e=["ms","moz","webkit","o"]).length;-1<--r&&!A;)A=h[e[r]+"RequestAnimationFrame"],O=h[e[r]+"CancelAnimationFrame"]||h[e[r]+"CancelRequestAnimationFrame"];S("Ticker",function(e,t){var r,o,s,a,l,u=this,c=R(),i=!(!1===t||!A)&&"auto",f=500,h=33,p=function(e){var t,i,n=R()-E;f<n&&(c+=n-h),E+=n,u.time=(E-c)/1e3,t=u.time-l,(!r||0<t||!0===e)&&(u.frame++,l+=t+(a<=t?.004:a-t),i=!0),!0!==e&&(s=o(p)),i&&u.dispatchEvent("tick")};k.call(u),u.time=u.frame=0,u.tick=function(){p(!0)},u.lagSmoothing=function(e,t){return arguments.length?(f=e||1e10,void(h=Math.min(t,f,0))):f<1e10},u.sleep=function(){null!=s&&(i&&O?O(s):clearTimeout(s),o=x,s=null,u===m&&(v=!1))},u.wake=function(e){null!==s?u.sleep():e?c+=-E+(E=R()):10<u.frame&&(E=R()-f+5),o=0===r?x:i&&A?A:function(e){return setTimeout(e,1e3*(l-u.time)+1|0)},u===m&&(v=!0),p(2)},u.fps=function(e){return arguments.length?(a=1/((r=e)||60),l=this.time+a,void u.wake()):r},u.useRAF=function(e){return arguments.length?(u.sleep(),i=e,void u.fps(r)):i},u.fps(e),setTimeout(function(){"auto"===i&&u.frame<5&&"hidden"!==n.visibilityState&&u.useRAF(!1)},1500)}),(o=f.Ticker.prototype=new f.events.EventDispatcher).constructor=f.Ticker;var c=S("core.Animation",function(e,t){if(this.vars=t=t||{},this._duration=this._totalDuration=e||0,this._delay=Number(t.delay)||0,this._timeScale=1,this._active=!0===t.immediateRender,this.data=t.data,this._reversed=!0===t.reversed,Q){v||m.wake();var i=this.vars.useFrames?Y:Q;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});m=c.ticker=new f.Ticker,(o=c.prototype)._dirty=o._gc=o._initted=o._paused=!1,o._totalTime=o._time=0,o._rawPrevTime=-1,o._next=o._last=o._onUpdate=o._timeline=o.timeline=null,o._paused=!1;var D=function(){v&&2e3<R()-E&&("hidden"!==n.visibilityState||!m.lagSmoothing())&&m.wake();var e=setTimeout(D,2e3);e.unref&&e.unref()};D(),o.play=function(e,t){return null!=e&&this.seek(e,t),this.reversed(!1).paused(!1)},o.pause=function(e,t){return null!=e&&this.seek(e,t),this.paused(!0)},o.resume=function(e,t){return null!=e&&this.seek(e,t),this.paused(!1)},o.seek=function(e,t){return this.totalTime(Number(e),!1!==t)},o.restart=function(e,t){return this.reversed(!1).paused(!1).totalTime(e?-this._delay:0,!1!==t,!0)},o.reverse=function(e,t){return null!=e&&this.seek(e||this.totalDuration(),t),this.reversed(!0).paused(!1)},o.render=function(e,t,i){},o.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,(this._gc||!this.timeline)&&this._enabled(!0),this},o.isActive=function(){var e,t=this._timeline,i=this._startTime;return!t||!this._gc&&!this._paused&&t.isActive()&&(e=t.rawTime(!0))>=i&&e<i+this.totalDuration()/this._timeScale-1e-7},o._enabled=function(e,t){return v||m.wake(),this._gc=!e,this._active=this.isActive(),!0!==t&&(e&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!e&&this.timeline&&this._timeline._remove(this,!0)),!1},o._kill=function(e,t){return this._enabled(!1,!1)},o.kill=function(e,t){return this._kill(e,t),this},o._uncache=function(e){for(var t=e?this:this.timeline;t;)t._dirty=!0,t=t.timeline;return this},o._swapSelfInParams=function(e){for(var t=e.length,i=e.concat();-1<--t;)"{self}"===e[t]&&(i[t]=this);return i},o._callback=function(e){var t=this.vars,i=t[e],n=t[e+"Params"],r=t[e+"Scope"]||t.callbackScope||this;switch(n?n.length:0){case 0:i.call(r);break;case 1:i.call(r,n[0]);break;case 2:i.call(r,n[0],n[1]);break;default:i.apply(r,n)}},o.eventCallback=function(e,t,i,n){if("on"===(e||"").substr(0,2)){var r=this.vars;if(1===arguments.length)return r[e];null==t?delete r[e]:(r[e]=t,r[e+"Params"]=b(i)&&-1!==i.join("").indexOf("{self}")?this._swapSelfInParams(i):i,r[e+"Scope"]=n),"onUpdate"===e&&(this._onUpdate=t)}return this},o.delay=function(e){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+e-this._delay),this._delay=e,this):this._delay},o.duration=function(e){return arguments.length?(this._duration=this._totalDuration=e,this._uncache(!0),this._timeline.smoothChildTiming&&0<this._time&&this._time<this._duration&&0!==e&&this.totalTime(this._totalTime*(e/this._duration),!0),this):(this._dirty=!1,this._duration)},o.totalDuration=function(e){return this._dirty=!1,arguments.length?this.duration(e):this._totalDuration},o.time=function(e,t){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(e>this._duration?this._duration:e,t)):this._time},o.totalTime=function(e,t,i){if(v||m.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(e<0&&!i&&(e+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var n=this._totalDuration,r=this._timeline;if(n<e&&!i&&(e=n),this._startTime=(this._paused?this._pauseTime:r._time)-(this._reversed?n-e:e)/this._timeScale,r._dirty||this._uncache(!1),r._timeline)for(;r._timeline;)r._timeline._time!==(r._startTime+r._totalTime)/r._timeScale&&r.totalTime(r._totalTime,!0),r=r._timeline}this._gc&&this._enabled(!0,!1),(this._totalTime!==e||0===this._duration)&&(j.length&&J(),this.render(e,t,!1),j.length&&J())}return this},o.progress=o.totalProgress=function(e,t){var i=this.duration();return arguments.length?this.totalTime(i*e,t):i?this._time/i:this.ratio},o.startTime=function(e){return arguments.length?(e!==this._startTime&&(this._startTime=e,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,e-this._delay)),this):this._startTime},o.endTime=function(e){return this._startTime+(0!=e?this.totalDuration():this.duration())/this._timeScale},o.timeScale=function(e){if(!arguments.length)return this._timeScale;var t,i;for(e=e||y,this._timeline&&this._timeline.smoothChildTiming&&(i=(t=this._pauseTime)||0===t?t:this._timeline.totalTime(),this._startTime=i-(i-this._startTime)*this._timeScale/e),this._timeScale=e,i=this.timeline;i&&i.timeline;)i._dirty=!0,i.totalDuration(),i=i.timeline;return this},o.reversed=function(e){return arguments.length?(e!=this._reversed&&(this._reversed=e,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},o.paused=function(e){if(!arguments.length)return this._paused;var t,i,n=this._timeline;return e!=this._paused&&n&&(v||e||m.wake(),i=(t=n.rawTime())-this._pauseTime,!e&&n.smoothChildTiming&&(this._startTime+=i,this._uncache(!1)),this._pauseTime=e?t:null,this._paused=e,this._active=this.isActive(),!e&&0!==i&&this._initted&&this.duration()&&(t=n.smoothChildTiming?this._totalTime:(t-this._startTime)/this._timeScale,this.render(t,t===this._totalTime,!0))),this._gc&&!e&&this._enabled(!0,!1),this};var N=S("core.SimpleTimeline",function(e){c.call(this,0,e),this.autoRemoveChildren=this.smoothChildTiming=!0});(o=N.prototype=new c).constructor=N,o.kill()._gc=!1,o._first=o._last=o._recent=null,o._sortChildren=!1,o.add=o.insert=function(e,t,i,n){var r,o;if(e._startTime=Number(t||0)+e._delay,e._paused&&this!==e._timeline&&(e._pauseTime=e._startTime+(this.rawTime()-e._startTime)/e._timeScale),e.timeline&&e.timeline._remove(e,!0),e.timeline=e._timeline=this,e._gc&&e._enabled(!0,!0),r=this._last,this._sortChildren)for(o=e._startTime;r&&r._startTime>o;)r=r._prev;return r?(e._next=r._next,r._next=e):(e._next=this._first,this._first=e),e._next?e._next._prev=e:this._last=e,e._prev=r,this._recent=e,this._timeline&&this._uncache(!0),this},o._remove=function(e,t){return e.timeline===this&&(t||e._enabled(!1,!0),e._prev?e._prev._next=e._next:this._first===e&&(this._first=e._next),e._next?e._next._prev=e._prev:this._last===e&&(this._last=e._prev),e._next=e._prev=e.timeline=null,e===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},o.render=function(e,t,i){var n,r=this._first;for(this._totalTime=this._time=this._rawPrevTime=e;r;)n=r._next,(r._active||e>=r._startTime&&!r._paused&&!r._gc)&&(r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(e-r._startTime)*r._timeScale,t,i):r.render((e-r._startTime)*r._timeScale,t,i)),r=n},o.rawTime=function(){return v||m.wake(),this._totalTime};var M=S("TweenLite",function(e,t,i){if(c.call(this,t,i),this.render=M.prototype.render,null==e)throw"Cannot tween a null target.";this.target=e="string"!=typeof e?e:M.selector(e)||e;var n,r,o,s=e.jquery||e.length&&e!==h&&e[0]&&(e[0]===h||e[0].nodeType&&e[0].style&&!e.nodeType),a=this.vars.overwrite;if(this._overwrite=a=null==a?U[M.defaultOverwrite]:"number"==typeof a?a>>0:U[a],(s||e instanceof Array||e.push&&b(e))&&"number"!=typeof e[0])for(this._targets=o=l(e),this._propLookup=[],this._siblings=[],n=0;n<o.length;n++)(r=o[n])?"string"!=typeof r?r.length&&r!==h&&r[0]&&(r[0]===h||r[0].nodeType&&r[0].style&&!r.nodeType)?(o.splice(n--,1),this._targets=o=o.concat(l(r))):(this._siblings[n]=K(r,this,!1),1===a&&1<this._siblings[n].length&&te(r,this,null,1,this._siblings[n])):"string"==typeof(r=o[n--]=M.selector(r))&&o.splice(n+1,1):o.splice(n--,1);else this._propLookup={},this._siblings=K(e,this,!1),1===a&&1<this._siblings.length&&te(e,this,null,1,this._siblings);(this.vars.immediateRender||0===t&&0===this._delay&&!1!==this.vars.immediateRender)&&(this._time=-y,this.render(Math.min(0,-this._delay)))},!0),L=function(e){return e&&e.length&&e!==h&&e[0]&&(e[0]===h||e[0].nodeType&&e[0].style&&!e.nodeType)};(o=M.prototype=new c).constructor=M,o.kill()._gc=!1,o.ratio=0,o._firstPT=o._targets=o._overwrittenProps=o._startAt=null,o._notifyPluginsOfEnabled=o._lazy=!1,M.version="1.20.3",M.defaultEase=o._ease=new P(null,null,1,1),M.defaultOverwrite="auto",M.ticker=m,M.autoSleep=120,M.lagSmoothing=function(e,t){m.lagSmoothing(e,t)},M.selector=h.$||h.jQuery||function(e){var t=h.$||h.jQuery;return t?(M.selector=t)(e):void 0===n?e:n.querySelectorAll?n.querySelectorAll(e):n.getElementById("#"===e.charAt(0)?e.substr(1):e)};var j=[],F={},I=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,z=/[\+-]=-?[\.\d]/,q=function(e){for(var t,i=this._firstPT;i;)t=i.blob?1===e&&null!=this.end?this.end:e?this.join(""):this.start:i.c*e+i.s,i.m?t=i.m(t,this._target||i.t):t<1e-6&&-1e-6<t&&!i.blob&&(t=0),i.f?i.fp?i.t[i.p](i.fp,t):i.t[i.p](t):i.t[i.p]=t,i=i._next},V=function(e,t,i,n){var r,o,s,a,l,u,c,f=[],h=0,p="",d=0;for(f.start=e,f.end=t,e=f[0]=e+"",t=f[1]=t+"",i&&(i(f),e=f[0],t=f[1]),f.length=0,r=e.match(I)||[],o=t.match(I)||[],n&&(n._next=null,n.blob=1,f._firstPT=f._applyPT=n),l=o.length,a=0;a<l;a++)c=o[a],p+=(u=t.substr(h,t.indexOf(c,h)-h))||!a?u:",",h+=u.length,d?d=(d+1)%5:"rgba("===u.substr(-5)&&(d=1),c===r[a]||r.length<=a?p+=c:(p&&(f.push(p),p=""),s=parseFloat(r[a]),f.push(s),f._firstPT={_next:f._firstPT,t:f,p:f.length-1,s:s,c:("="===c.charAt(1)?parseInt(c.charAt(0)+"1",10)*parseFloat(c.substr(2)):parseFloat(c)-s)||0,f:0,m:d&&d<4?Math.round:0}),h+=c.length;return(p+=t.substr(h))&&f.push(p),f.setRatio=q,z.test(t)&&(f.end=null),f},H=function(e,t,i,n,r,o,s,a,l){"function"==typeof n&&(n=n(l||0,e));var u=typeof e[t],c="function"!==u?"":t.indexOf("set")||"function"!=typeof e["get"+t.substr(3)]?t:"get"+t.substr(3),f="get"!==i?i:c?s?e[c](s):e[c]():e[t],h="string"==typeof n&&"="===n.charAt(1),p={t:e,p:t,s:f,f:"function"===u,pg:0,n:r||t,m:o?"function"==typeof o?o:Math.round:0,pr:0,c:h?parseInt(n.charAt(0)+"1",10)*parseFloat(n.substr(2)):parseFloat(n)-f||0};return("number"!=typeof f||"number"!=typeof n&&!h)&&(s||isNaN(f)||!h&&isNaN(n)||"boolean"==typeof f||"boolean"==typeof n?(p.fp=s,p={t:V(f,h?parseFloat(p.s)+p.c:n,a||M.defaultStringFilter,p),p:"setRatio",s:0,c:1,f:2,pg:0,n:r||t,pr:0,m:0}):(p.s=parseFloat(f),h||(p.c=parseFloat(n)-p.s||0))),p.c?((p._next=this._firstPT)&&(p._next._prev=p),this._firstPT=p):void 0},B=M._internals={isArray:b,isSelector:L,lazyTweens:j,blobDif:V},X=M._plugins={},G=B.tweenLookup={},W=0,$=B.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1,id:1,yoyoEase:1},U={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,true:1,false:0},Y=c._rootFramesTimeline=new N,Q=c._rootTimeline=new N,Z=30,J=B.lazyRender=function(){var e,t=j.length;for(F={};-1<--t;)(e=j[t])&&!1!==e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0),e._lazy=!1);j.length=0};Q._startTime=m.time,Y._startTime=m.frame,Q._active=Y._active=!0,setTimeout(J,1),c._updateRoot=M.render=function(){var e,t,i;if(j.length&&J(),Q.render((m.time-Q._startTime)*Q._timeScale,!1,!1),Y.render((m.frame-Y._startTime)*Y._timeScale,!1,!1),j.length&&J(),m.frame>=Z){for(i in Z=m.frame+(parseInt(M.autoSleep,10)||120),G){for(e=(t=G[i].tweens).length;-1<--e;)t[e]._gc&&t.splice(e,1);0===t.length&&delete G[i]}if((!(i=Q._first)||i._paused)&&M.autoSleep&&!Y._first&&1===m._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||m.sleep()}}},m.addEventListener("tick",c._updateRoot);var K=function(e,t,i){var n,r,o=e._gsTweenID;if(G[o||(e._gsTweenID=o="t"+W++)]||(G[o]={target:e,tweens:[]}),t&&((n=G[o].tweens)[r=n.length]=t,i))for(;-1<--r;)n[r]===t&&n.splice(r,1);return G[o].tweens},ee=function(e,t,i,n){var r,o,s=e.vars.onOverwrite;return s&&(r=s(e,t,i,n)),(s=M.onOverwrite)&&(o=s(e,t,i,n)),!1!==r&&!1!==o},te=function(e,t,i,n,r){var o,s,a,l;if(1===n||4<=n){for(l=r.length,o=0;o<l;o++)if((a=r[o])!==t)a._gc||a._kill(null,e,t)&&(s=!0);else if(5===n)break;return s}var u,c=t._startTime+y,f=[],h=0,p=0===t._duration;for(o=r.length;-1<--o;)(a=r[o])===t||a._gc||a._paused||(a._timeline!==t._timeline?(u=u||ie(t,0,p),0===ie(a,u,p)&&(f[h++]=a)):a._startTime<=c&&a._startTime+a.totalDuration()/a._timeScale>c&&((p||!a._initted)&&c-a._startTime<=2e-10||(f[h++]=a)));for(o=h;-1<--o;)if(a=f[o],2===n&&a._kill(i,e,t)&&(s=!0),2!==n||!a._firstPT&&a._initted){if(2!==n&&!ee(a,t))continue;a._enabled(!1,!1)&&(s=!0)}return s},ie=function(e,t,i){for(var n=e._timeline,r=n._timeScale,o=e._startTime;n._timeline;){if(o+=n._startTime,r*=n._timeScale,n._paused)return-100;n=n._timeline}return t<(o/=r)?o-t:i&&o===t||!e._initted&&o-t<2e-10?y:(o+=e.totalDuration()/e._timeScale/r)>t+y?0:o-t-y};o._init=function(){var e,t,i,n,r,o,s=this.vars,a=this._overwrittenProps,l=this._duration,u=!!s.immediateRender,c=s.ease;if(s.startAt){for(n in this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),r={},s.startAt)r[n]=s.startAt[n];if(r.data="isStart",r.overwrite=!1,r.immediateRender=!0,r.lazy=u&&!1!==s.lazy,r.startAt=r.delay=null,r.onUpdate=s.onUpdate,r.onUpdateParams=s.onUpdateParams,r.onUpdateScope=s.onUpdateScope||s.callbackScope||this,this._startAt=M.to(this.target,0,r),u)if(0<this._time)this._startAt=null;else if(0!==l)return}else if(s.runBackwards&&0!==l)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{for(n in 0!==this._time&&(u=!1),i={},s)$[n]&&"autoCSS"!==n||(i[n]=s[n]);if(i.overwrite=0,i.data="isFromStart",i.lazy=u&&!1!==s.lazy,i.immediateRender=u,this._startAt=M.to(this.target,0,i),u){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=c=c?c instanceof P?c:"function"==typeof c?new P(c,s.easeParams):C[c]||M.defaultEase:M.defaultEase,s.easeParams instanceof Array&&c.config&&(this._ease=c.config.apply(c,s.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(o=this._targets.length,e=0;e<o;e++)this._initProps(this._targets[e],this._propLookup[e]={},this._siblings[e],a?a[e]:null,e)&&(t=!0);else t=this._initProps(this.target,this._propLookup,this._siblings,a,0);if(t&&M._onPluginEvent("_onInitAllProps",this),a&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),s.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=s.onUpdate,this._initted=!0},o._initProps=function(e,t,i,n,r){var o,s,a,l,u,c;if(null==e)return!1;for(o in F[e._gsTweenID]&&J(),this.vars.css||e.style&&e!==h&&e.nodeType&&X.css&&!1!==this.vars.autoCSS&&function(e,t){var i,n={};for(i in e)$[i]||i in t&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!X[i]||X[i]&&X[i]._autoCSS)||(n[i]=e[i],delete e[i]);e.css=n}(this.vars,e),this.vars)if(c=this.vars[o],$[o])c&&(c instanceof Array||c.push&&b(c))&&-1!==c.join("").indexOf("{self}")&&(this.vars[o]=c=this._swapSelfInParams(c,this));else if(X[o]&&(l=new X[o])._onInitTween(e,this.vars[o],this,r)){for(this._firstPT=u={_next:this._firstPT,t:l,p:"setRatio",s:0,c:1,f:1,n:o,pg:1,pr:l._priority,m:0},s=l._overwriteProps.length;-1<--s;)t[l._overwriteProps[s]]=this._firstPT;(l._priority||l._onInitAllProps)&&(a=!0),(l._onDisable||l._onEnable)&&(this._notifyPluginsOfEnabled=!0),u._next&&(u._next._prev=u)}else t[o]=H.call(this,e,o,"get",c,o,0,null,this.vars.stringFilter,r);return n&&this._kill(n,e)?this._initProps(e,t,i,n,r):1<this._overwrite&&this._firstPT&&1<i.length&&te(e,this,t,this._overwrite,i)?(this._kill(t,e),this._initProps(e,t,i,n,r)):(this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration)&&(F[e._gsTweenID]=!0),a)},o.render=function(e,t,i){var n,r,o,s,a=this._time,l=this._duration,u=this._rawPrevTime;if(l-1e-7<=e&&0<=e)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(n=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===l&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(e=0),(u<0||e<=0&&-1e-7<=e||u===y&&"isPause"!==this.data)&&u!==e&&(i=!0,y<u&&(r="onReverseComplete")),this._rawPrevTime=s=!t||e||u===e?e:y);else if(e<1e-7)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==a||0===l&&0<u)&&(r="onReverseComplete",n=this._reversed),e<0&&(this._active=!1,0===l&&(this._initted||!this.vars.lazy||i)&&(0<=u&&(u!==y||"isPause"!==this.data)&&(i=!0),this._rawPrevTime=s=!t||e||u===e?e:y)),(!this._initted||this._startAt&&this._startAt.progress())&&(i=!0);else if(this._totalTime=this._time=e,this._easeType){var c=e/l,f=this._easeType,h=this._easePower;(1===f||3===f&&.5<=c)&&(c=1-c),3===f&&(c*=2),1===h?c*=c:2===h?c*=c*c:3===h?c*=c*c*c:4===h&&(c*=c*c*c*c),this.ratio=1===f?1-c:2===f?c:e/l<.5?c/2:1-c/2}else this.ratio=this._ease.getRatio(e/l);if(this._time!==a||i){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=a,this._rawPrevTime=u,j.push(this),void(this._lazy=[e,t]);this._time&&!n?this.ratio=this._ease.getRatio(this._time/l):n&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(!1!==this._lazy&&(this._lazy=!1),this._active||!this._paused&&this._time!==a&&0<=e&&(this._active=!0),0===a&&(this._startAt&&(0<=e?this._startAt.render(e,!0,i):r||(r="_dummyGS")),this.vars.onStart&&(0!==this._time||0===l)&&(t||this._callback("onStart"))),o=this._firstPT;o;)o.f?o.t[o.p](o.c*this.ratio+o.s):o.t[o.p]=o.c*this.ratio+o.s,o=o._next;this._onUpdate&&(e<0&&this._startAt&&-1e-4!==e&&this._startAt.render(e,!0,i),t||(this._time!==a||n||i)&&this._callback("onUpdate")),r&&(!this._gc||i)&&(e<0&&this._startAt&&!this._onUpdate&&-1e-4!==e&&this._startAt.render(e,!0,i),n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!t&&this.vars[r]&&this._callback(r),0===l&&this._rawPrevTime===y&&s!==y&&(this._rawPrevTime=0))}},o._kill=function(e,t,i){if("all"===e&&(e=null),null==e&&(null==t||t===this.target))return this._lazy=!1,this._enabled(!1,!1);t="string"!=typeof t?t||this._targets||this.target:M.selector(t)||t;var n,r,o,s,a,l,u,c,f,h=i&&this._time&&i._startTime===this._startTime&&this._timeline===i._timeline;if((b(t)||L(t))&&"number"!=typeof t[0])for(n=t.length;-1<--n;)this._kill(e,t[n],i)&&(l=!0);else{if(this._targets){for(n=this._targets.length;-1<--n;)if(t===this._targets[n]){a=this._propLookup[n]||{},this._overwrittenProps=this._overwrittenProps||[],r=this._overwrittenProps[n]=e?this._overwrittenProps[n]||{}:"all";break}}else{if(t!==this.target)return!1;a=this._propLookup,r=this._overwrittenProps=e?this._overwrittenProps||{}:"all"}if(a){if(u=e||a,c=e!==r&&"all"!==r&&e!==a&&("object"!=typeof e||!e._tempKill),i&&(M.onOverwrite||this.vars.onOverwrite)){for(o in u)a[o]&&(f||(f=[]),f.push(o));if((f||!e)&&!ee(this,i,t,f))return!1}for(o in u)(s=a[o])&&(h&&(s.f?s.t[s.p](s.s):s.t[s.p]=s.s,l=!0),s.pg&&s.t._kill(u)&&(l=!0),s.pg&&0!==s.t._overwriteProps.length||(s._prev?s._prev._next=s._next:s===this._firstPT&&(this._firstPT=s._next),s._next&&(s._next._prev=s._prev),s._next=s._prev=null),delete a[o]),c&&(r[o]=1);!this._firstPT&&this._initted&&this._enabled(!1,!1)}}return l},o.invalidate=function(){return this._notifyPluginsOfEnabled&&M._onPluginEvent("_onDisable",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],c.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-y,this.render(Math.min(0,-this._delay))),this},o._enabled=function(e,t){if(v||m.wake(),e&&this._gc){var i,n=this._targets;if(n)for(i=n.length;-1<--i;)this._siblings[i]=K(n[i],this,!0);else this._siblings=K(this.target,this,!0)}return c.prototype._enabled.call(this,e,t),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&M._onPluginEvent(e?"_onEnable":"_onDisable",this)},M.to=function(e,t,i){return new M(e,t,i)},M.from=function(e,t,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new M(e,t,i)},M.fromTo=function(e,t,i,n){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,new M(e,t,n)},M.delayedCall=function(e,t,i,n,r){return new M(t,0,{delay:e,onComplete:t,onCompleteParams:i,callbackScope:n,onReverseComplete:t,onReverseCompleteParams:i,immediateRender:!1,lazy:!1,useFrames:r,overwrite:0})},M.set=function(e,t){return new M(e,0,t)},M.getTweensOf=function(e,t){if(null==e)return[];var i,n,r,o;if(e="string"!=typeof e?e:M.selector(e)||e,(b(e)||L(e))&&"number"!=typeof e[0]){for(i=e.length,n=[];-1<--i;)n=n.concat(M.getTweensOf(e[i],t));for(i=n.length;-1<--i;)for(o=n[i],r=i;-1<--r;)o===n[r]&&n.splice(i,1)}else if(e._gsTweenID)for(i=(n=K(e).concat()).length;-1<--i;)(n[i]._gc||t&&!n[i].isActive())&&n.splice(i,1);return n||[]},M.killTweensOf=M.killDelayedCallsTo=function(e,t,i){"object"==typeof t&&(i=t,t=!1);for(var n=M.getTweensOf(e,t),r=n.length;-1<--r;)n[r]._kill(i,e)};var ne=S("plugins.TweenPlugin",function(e,t){this._overwriteProps=(e||"").split(","),this._propName=this._overwriteProps[0],this._priority=t||0,this._super=ne.prototype},!0);if(o=ne.prototype,ne.version="1.19.0",ne.API=2,o._firstPT=null,o._addTween=H,o.setRatio=q,o._kill=function(e){var t,i=this._overwriteProps,n=this._firstPT;if(null!=e[this._propName])this._overwriteProps=[];else for(t=i.length;-1<--t;)null!=e[i[t]]&&i.splice(t,1);for(;n;)null!=e[n.n]&&(n._next&&(n._next._prev=n._prev),n._prev?(n._prev._next=n._next,n._prev=null):this._firstPT===n&&(this._firstPT=n._next)),n=n._next;return!1},o._mod=o._roundProps=function(e){for(var t,i=this._firstPT;i;)(t=e[this._propName]||null!=i.n&&e[i.n.split(this._propName+"_").join("")])&&"function"==typeof t&&(2===i.f?i.t._applyPT.m=t:i.m=t),i=i._next},M._onPluginEvent=function(e,t){var i,n,r,o,s,a=t._firstPT;if("_onInitAllProps"===e){for(;a;){for(s=a._next,n=r;n&&n.pr>a.pr;)n=n._next;(a._prev=n?n._prev:o)?a._prev._next=a:r=a,(a._next=n)?n._prev=a:o=a,a=s}a=t._firstPT=r}for(;a;)a.pg&&"function"==typeof a.t[e]&&a.t[e]()&&(i=!0),a=a._next;return i},ne.activate=function(e){for(var t=e.length;-1<--t;)e[t].API===ne.API&&(X[(new e[t])._propName]=e[t]);return!0},s.plugin=function(e){if(!(e&&e.propName&&e.init&&e.API))throw"illegal plugin definition.";var t,i=e.propName,n=e.priority||0,r=e.overwriteProps,o={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_mod",mod:"_mod",initAll:"_onInitAllProps"},s=S("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){ne.call(this,i,n),this._overwriteProps=r||[]},!0===e.global),a=s.prototype=new ne(i);for(t in(a.constructor=s).API=e.API,o)"function"==typeof e[t]&&(a[o[t]]=e[t]);return s.version=e.version,ne.activate([s]),s},e=h._gsQueue){for(r=0;r<e.length;r++)e[r]();for(o in w)w[o].func||h.console.log("GSAP encountered missing dependency: "+o)}v=!1}}("undefined"!=typeof module&&module.exports&&"undefined"!=typeof global?global:this||window,"TweenMax"),function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.ScrollMagic=t()}(this,function(){"use strict";var E=function(){M.log(2,"(COMPATIBILITY NOTICE) -> As of ScrollMagic 2.0.0 you need to use 'new ScrollMagic.Controller()' to create a new controller instance. Use 'new ScrollMagic.Scene()' to instance a scene.")};E.version="2.0.3",window.addEventListener("mousewheel",function(){});var D="data-scrollmagic-pin-spacer";E.Controller=function(e){var i,n,r="ScrollMagic.Controller",o="FORWARD",s="REVERSE",t="PAUSED",a=k.defaults,l=this,u=M.extend({},a,e),c=[],f=!1,h=0,p=t,d=!0,g=0,m=!0,v=function(){0<u.refreshInterval&&(n=window.setTimeout(S,u.refreshInterval))},_=function(){return u.vertical?M.get.scrollTop(u.container):M.get.scrollLeft(u.container)},y=function(){return u.vertical?M.get.height(u.container):M.get.width(u.container)},x=this._setScrollPos=function(e){u.vertical?d?window.scrollTo(M.get.scrollLeft(),e):u.container.scrollTop=e:d?window.scrollTo(e,M.get.scrollTop()):u.container.scrollLeft=e},b=function(){if(m&&f){var i=M.type.Array(f)?f:c.slice(0);f=!1;var e=h,t=(h=l.scrollPos())-e;0!==t&&(p=0<t?o:s),p===s&&i.reverse(),i.forEach(function(e,t){P(3,"updating Scene "+(t+1)+"/"+i.length+" ("+c.length+" total)"),e.update(!0)}),0===i.length&&3<=u.loglevel&&P(3,"updating 0 Scenes (nothing added to controller)")}},w=function(){i=M.rAF(b)},T=function(e){P(3,"event fired causing an update:",e.type),"resize"==e.type&&(g=y(),p=t),!0!==f&&(f=!0,w())},S=function(){if(!d&&g!=y()){var t;try{t=new Event("resize",{bubbles:!1,cancelable:!1})}catch(e){(t=document.createEvent("Event")).initEvent("resize",!1,!1)}u.container.dispatchEvent(t)}c.forEach(function(e,t){e.refresh()}),v()},P=this._log=function(e,t){u.loglevel>=e&&(Array.prototype.splice.call(arguments,1,0,"("+r+") ->"),M.log.apply(window,arguments))};this._options=u;var C=function(e){if(e.length<=1)return e;var t=e.slice(0);return t.sort(function(e,t){return e.scrollOffset()>t.scrollOffset()?1:-1}),t};return this.addScene=function(e){if(M.type.Array(e))e.forEach(function(e,t){l.addScene(e)});else if(e instanceof E.Scene){if(e.controller()!==l)e.addTo(l);else if(c.indexOf(e)<0){for(var t in c.push(e),c=C(c),e.on("shift.controller_sort",function(){c=C(c)}),u.globalSceneOptions)e[t]&&e[t].call(e,u.globalSceneOptions[t]);P(3,"adding Scene (now "+c.length+" total)")}}else P(1,"ERROR: invalid argument supplied for '.addScene()'");return l},this.removeScene=function(e){if(M.type.Array(e))e.forEach(function(e,t){l.removeScene(e)});else{var t=c.indexOf(e);-1<t&&(e.off("shift.controller_sort"),c.splice(t,1),P(3,"removing Scene (now "+c.length+" left)"),e.remove())}return l},this.updateScene=function(e,i){return M.type.Array(e)?e.forEach(function(e,t){l.updateScene(e,i)}):i?e.update(!0):!0!==f&&e instanceof E.Scene&&(-1==(f=f||[]).indexOf(e)&&f.push(e),f=C(f),w()),l},this.update=function(e){return T({type:"resize"}),e&&b(),l},this.scrollTo=function(e,t){if(M.type.Number(e))x.call(u.container,e,t);else if(e instanceof E.Scene)e.controller()===l?l.scrollTo(e.scrollOffset(),t):P(2,"scrollTo(): The supplied scene does not belong to this controller. Scroll cancelled.",e);else if(M.type.Function(e))x=e;else{var i=M.get.elements(e)[0];if(i){for(;i.parentNode.hasAttribute(D);)i=i.parentNode;var n=u.vertical?"top":"left",r=M.get.offset(u.container),o=M.get.offset(i);d||(r[n]-=l.scrollPos()),l.scrollTo(o[n]-r[n],t)}else P(2,"scrollTo(): The supplied argument is invalid. Scroll cancelled.",e)}return l},this.scrollPos=function(e){return arguments.length?(M.type.Function(e)?_=e:P(2,"Provided value for method 'scrollPos' is not a function. To change the current scroll position use 'scrollTo()'."),l):_.call(l)},this.info=function(e){var t={size:g,vertical:u.vertical,scrollPos:h,scrollDirection:p,container:u.container,isDocument:d};return arguments.length?void 0!==t[e]?t[e]:void P(1,'ERROR: option "'+e+'" is not available'):t},this.loglevel=function(e){return arguments.length?(u.loglevel!=e&&(u.loglevel=e),l):u.loglevel},this.enabled=function(e){return arguments.length?(m!=e&&(m=!!e,l.updateScene(c,!0)),l):m},this.destroy=function(e){window.clearTimeout(n);for(var t=c.length;t--;)c[t].destroy(e);return u.container.removeEventListener("resize",T),u.container.removeEventListener("scroll",T),M.cAF(i),P(3,"destroyed "+r+" (reset: "+(e?"true":"false")+")"),null},function(){for(var e in u)a.hasOwnProperty(e)||(P(2,'WARNING: Unknown option "'+e+'"'),delete u[e]);if(u.container=M.get.elements(u.container)[0],!u.container)throw P(1,"ERROR creating object "+r+": No valid scroll container supplied"),r+" init failed.";(d=u.container===window||u.container===document.body||!document.body.contains(u.container))&&(u.container=window),g=y(),u.container.addEventListener("resize",T),u.container.addEventListener("scroll",T),u.refreshInterval=parseInt(u.refreshInterval)||a.refreshInterval,v(),P(3,"added new "+r+" controller (v"+E.version+")")}(),l};var k={defaults:{container:window,vertical:!0,globalSceneOptions:{},loglevel:2,refreshInterval:100}};E.Controller.addOption=function(e,t){k.defaults[e]=t},E.Controller.extend=function(e){var t=this;E.Controller=function(){return t.apply(this,arguments),this.$super=M.extend({},this),e.apply(this,arguments)||this},M.extend(E.Controller,t),E.Controller.prototype=t.prototype,E.Controller.prototype.constructor=E.Controller},E.Scene=function(e){var i,l,n="ScrollMagic.Scene",r=N.defaults,c=this,f=M.extend({},r,e),u="BEFORE",h=0,s={start:0,end:0},p=0,o=!0,d=this._log=function(e,t){f.loglevel>=e&&(Array.prototype.splice.call(arguments,1,0,"("+n+") ->"),M.log.apply(window,arguments))};this.addTo=function(e){return e instanceof E.Controller?l!=e&&(l&&l.removeScene(c),l=e,_(),t(!0),g(!0),a(),l.info("container").addEventListener("resize",m),e.addScene(c),c.trigger("add",{controller:l}),d(3,"added "+n+" to controller"),c.update()):d(1,"ERROR: supplied argument of 'addTo()' is not a valid ScrollMagic Controller"),c},this.enabled=function(e){return arguments.length?(o!=e&&(o=!!e,c.update(!0)),c):o},this.remove=function(){if(l){l.info("container").removeEventListener("resize",m);var e=l;l=void 0,e.removeScene(c),c.trigger("remove"),d(3,"removed "+n+" from controller")}return c},this.destroy=function(e){return c.trigger("destroy",{reset:e}),c.remove(),c.off("*.*"),d(3,"destroyed "+n+" (reset: "+(e?"true":"false")+")"),null},this.update=function(e){if(l)if(e)if(l.enabled()&&o){var t,i=l.info("scrollPos");t=0<f.duration?(i-s.start)/(s.end-s.start):i>=s.start?1:0,c.trigger("update",{startPos:s.start,endPos:s.end,scrollPos:i}),c.progress(t)}else b&&"DURING"===u&&S(!0);else l.updateScene(c,!1);return c},this.refresh=function(){return t(),g(),c},this.progress=function(e){if(arguments.length){var t=!1,i=u,n=l?l.info("scrollDirection"):"PAUSED",r=f.reverse||h<=e;if(0===f.duration?(t=h!=e,u=0===(h=e<1&&r?0:1)?"BEFORE":"DURING"):e<=0&&"BEFORE"!==u&&r?(u="BEFORE",t=!(h=0)):0<e&&e<1&&r?(h=e,u="DURING",t=!0):1<=e&&"AFTER"!==u?(h=1,u="AFTER",t=!0):"DURING"!==u||r||S(),t){var o={progress:h,state:u,scrollDirection:n},s=u!=i,a=function(e){c.trigger(e,o)};s&&"DURING"!==i&&(a("enter"),a("BEFORE"===i?"start":"end")),a("progress"),s&&"DURING"!==u&&(a("BEFORE"===u?"start":"end"),a("leave"))}return c}return h};var a=function(){s={start:p+f.offset},l&&f.triggerElement&&(s.start-=l.info("size")*f.triggerHook),s.end=s.start+f.duration},t=function(e){if(i){var t="duration";y(t,i.call(c))&&!e&&(c.trigger("change",{what:t,newval:f[t]}),c.trigger("shift",{reason:t}))}},g=function(e){var t=0,i=f.triggerElement;if(l&&i){for(var n=l.info(),r=M.get.offset(n.container),o=n.vertical?"top":"left";i.parentNode.hasAttribute(D);)i=i.parentNode;var s=M.get.offset(i);n.isDocument||(r[o]-=l.scrollPos()),t=s[o]-r[o]}var a=t!=p;p=t,a&&!e&&c.trigger("shift",{reason:"triggerElementPosition"})},m=function(e){0<f.triggerHook&&c.trigger("shift",{reason:"containerResize"})},v=M.extend(N.validate,{duration:function(t){if(M.type.String(t)&&t.match(/^(\.|\d)*\d+%$/)){var e=parseFloat(t)/100;t=function(){return l?l.info("size")*e:0}}if(M.type.Function(t)){i=t;try{t=parseFloat(i())}catch(e){t=-1}}if(t=parseFloat(t),!M.type.Number(t)||t<0)throw i?(i=void 0,['Invalid return value of supplied function for option "duration":',t]):['Invalid value for option "duration":',t];return t}}),_=function(e){(e=arguments.length?[e]:Object.keys(v)).forEach(function(t,e){var i;if(v[t])try{i=v[t](f[t])}catch(e){i=r[t];var n=M.type.String(e)?[e]:e;M.type.Array(n)?(n[0]="ERROR: "+n[0],n.unshift(1),d.apply(this,n)):d(1,"ERROR: Problem executing validation callback for option '"+t+"':",e.message)}finally{f[t]=i}})},y=function(e,t){var i=!1,n=f[e];return f[e]!=t&&(f[e]=t,_(e),i=n!=f[e]),i},x=function(t){c[t]||(c[t]=function(e){return arguments.length?("duration"===t&&(i=void 0),y(t,e)&&(c.trigger("change",{what:t,newval:f[t]}),-1<N.shifts.indexOf(t)&&c.trigger("shift",{reason:t})),c):f[t]})};this.controller=function(){return l},this.state=function(){return u},this.scrollOffset=function(){return s.start},this.triggerPosition=function(){var e=f.offset;return l&&(f.triggerElement?e+=p:e+=l.info("size")*c.triggerHook()),e};var b,w,T={};this.on=function(e,r){return M.type.Function(r)?(e=e.trim().split(" ")).forEach(function(e){var t=e.split("."),i=t[0],n=t[1];"*"!=i&&(T[i]||(T[i]=[]),T[i].push({namespace:n||"",callback:r}))}):d(1,"ERROR when calling '.on()': Supplied callback for '"+e+"' is not a valid function!"),c},this.off=function(e,o){return e?(e=e.trim().split(" ")).forEach(function(e,t){var i=e.split("."),n=i[0],r=i[1]||"";("*"===n?Object.keys(T):[n]).forEach(function(e){for(var t=T[e]||[],i=t.length;i--;){var n=t[i];!n||r!==n.namespace&&"*"!==r||o&&o!=n.callback||t.splice(i,1)}t.length||delete T[e]})}):d(1,"ERROR: Invalid event name supplied."),c},this.trigger=function(e,i){if(e){var t=e.trim().split("."),n=t[0],r=t[1],o=T[n];d(3,"event fired:",n,i?"->":"",i||""),o&&o.forEach(function(e,t){r&&r!==e.namespace||e.callback.call(c,new E.Event(n,e.namespace,c,i))})}else d(1,"ERROR: Invalid event name supplied.");return c},c.on("shift.internal",function(e){var t="duration"===e.reason;("AFTER"===u&&t||"DURING"===u&&0===f.duration)&&S(),t&&P()}).on("progress.internal",function(e){S()}).on("add.internal",function(e){P()}).on("destroy.internal",function(e){c.removePin(e.reset)});var S=function(e){if(b&&l){var t=l.info();if(e||"DURING"!==u){var i={position:w.inFlow?"relative":"absolute",top:0,left:0},n=M.css(b,"position")!=i.position;w.pushFollowers?0<f.duration&&("AFTER"===u&&0===parseFloat(M.css(w.spacer,"padding-top"))?n=!0:"BEFORE"===u&&0===parseFloat(M.css(w.spacer,"padding-bottom"))&&(n=!0)):i[t.vertical?"top":"left"]=f.duration*h,M.css(b,i),n&&P()}else{"fixed"!=M.css(b,"position")&&(M.css(b,{position:"fixed"}),P());var r=M.get.offset(w.spacer,!0),o=f.reverse||0===f.duration?t.scrollPos-s.start:Math.round(h*f.duration*10)/10;r[t.vertical?"top":"left"]+=o,M.css(b,{top:r.top,left:r.left})}}},P=function(){if(b&&l&&w.inFlow){var e="DURING"===u,t=l.info("vertical"),i=w.spacer.children[0],n=M.isMarginCollapseType(M.css(w.spacer,"display")),r={};w.relSize.width||w.relSize.autoFullWidth?e?M.css(b,{width:M.get.width(w.spacer)}):M.css(b,{width:"100%"}):(r["min-width"]=M.get.width(t?b:i,!0,!0),r.width=e?r["min-width"]:"auto"),w.relSize.height?e?M.css(b,{height:M.get.height(w.spacer)-(w.pushFollowers?f.duration:0)}):M.css(b,{height:"100%"}):(r["min-height"]=M.get.height(t?i:b,!0,!n),r.height=e?r["min-height"]:"auto"),w.pushFollowers&&(r["padding"+(t?"Top":"Left")]=f.duration*h,r["padding"+(t?"Bottom":"Right")]=f.duration*(1-h)),M.css(w.spacer,r)}},C=function(){l&&b&&"DURING"===u&&!l.info("isDocument")&&S()},k=function(){l&&b&&"DURING"===u&&((w.relSize.width||w.relSize.autoFullWidth)&&M.get.width(window)!=M.get.width(w.spacer.parentNode)||w.relSize.height&&M.get.height(window)!=M.get.height(w.spacer.parentNode))&&P()},A=function(e){l&&b&&"DURING"===u&&!l.info("isDocument")&&(e.preventDefault(),l._setScrollPos(l.info("scrollPos")-((e.wheelDelta||e[l.info("vertical")?"wheelDeltaY":"wheelDeltaX"])/3||30*-e.detail)))};this.setPin=function(e,t){if(t=M.extend({},{pushFollowers:!0,spacerClass:"scrollmagic-pin-spacer"},t),!(e=M.get.elements(e)[0]))return d(1,"ERROR calling method 'setPin()': Invalid pin element supplied."),c;if("fixed"===M.css(e,"position"))return d(1,"ERROR calling method 'setPin()': Pin does not work with elements that are positioned 'fixed'."),c;if(b){if(b===e)return c;c.removePin()}var i=(b=e).parentNode.style.display,n=["top","left","bottom","right","margin","marginLeft","marginRight","marginTop","marginBottom"];b.parentNode.style.display="none";var r="absolute"!=M.css(b,"position"),o=M.css(b,n.concat(["display"])),s=M.css(b,["width","height"]);b.parentNode.style.display=i,!r&&t.pushFollowers&&(d(2,"WARNING: If the pinned element is positioned absolutely pushFollowers will be disabled."),t.pushFollowers=!1),window.setTimeout(function(){b&&0===f.duration&&t.pushFollowers&&d(2,"WARNING: pushFollowers =",!0,"has no effect, when scene duration is 0.")},0);var a=b.parentNode.insertBefore(document.createElement("div"),b),l=M.extend(o,{position:r?"relative":"absolute",boxSizing:"content-box",mozBoxSizing:"content-box",webkitBoxSizing:"content-box"});if(r||M.extend(l,M.css(b,["width","height"])),M.css(a,l),a.setAttribute(D,""),M.addClass(a,t.spacerClass),w={spacer:a,relSize:{width:"%"===s.width.slice(-1),height:"%"===s.height.slice(-1),autoFullWidth:"auto"===s.width&&r&&M.isMarginCollapseType(o.display)},pushFollowers:t.pushFollowers,inFlow:r},!b.___origStyle){b.___origStyle={};var u=b.style;n.concat(["width","height","position","boxSizing","mozBoxSizing","webkitBoxSizing"]).forEach(function(e){b.___origStyle[e]=u[e]||""})}return w.relSize.width&&M.css(a,{width:s.width}),w.relSize.height&&M.css(a,{height:s.height}),a.appendChild(b),M.css(b,{position:r?"relative":"absolute",margin:"auto",top:"auto",left:"auto",bottom:"auto",right:"auto"}),(w.relSize.width||w.relSize.autoFullWidth)&&M.css(b,{boxSizing:"border-box",mozBoxSizing:"border-box",webkitBoxSizing:"border-box"}),window.addEventListener("scroll",C),window.addEventListener("resize",C),window.addEventListener("resize",k),b.addEventListener("mousewheel",A),b.addEventListener("DOMMouseScroll",A),d(3,"added pin"),S(),c},this.removePin=function(e){if(b){if("DURING"===u&&S(!0),e||!l){var t=w.spacer.children[0];if(t.hasAttribute(D)){var i=w.spacer.style;margins={},["margin","marginLeft","marginRight","marginTop","marginBottom"].forEach(function(e){margins[e]=i[e]||""}),M.css(t,margins)}w.spacer.parentNode.insertBefore(t,w.spacer),w.spacer.parentNode.removeChild(w.spacer),b.parentNode.hasAttribute(D)||(M.css(b,b.___origStyle),delete b.___origStyle)}window.removeEventListener("scroll",C),window.removeEventListener("resize",C),window.removeEventListener("resize",k),b.removeEventListener("mousewheel",A),b.removeEventListener("DOMMouseScroll",A),b=void 0,d(3,"removed pin (reset: "+(e?"true":"false")+")")}return c};var O,R=[];return c.on("destroy.internal",function(e){c.removeClassToggle(e.reset)}),this.setClassToggle=function(e,t){var i=M.get.elements(e);return 0!==i.length&&M.type.String(t)?(0<R.length&&c.removeClassToggle(),O=t,R=i,c.on("enter.internal_class leave.internal_class",function(e){var i="enter"===e.type?M.addClass:M.removeClass;R.forEach(function(e,t){i(e,O)})})):d(1,"ERROR calling method 'setClassToggle()': Invalid "+(0===i.length?"element":"classes")+" supplied."),c},this.removeClassToggle=function(e){return e&&R.forEach(function(e,t){M.removeClass(e,O)}),c.off("start.internal_class end.internal_class"),O=void 0,R=[],c},function(){for(var e in f)r.hasOwnProperty(e)||(d(2,'WARNING: Unknown option "'+e+'"'),delete f[e]);for(var t in r)x(t);_(),c.on("change.internal",function(e){"loglevel"!==e.what&&"tweenChanges"!==e.what&&("triggerElement"===e.what?g():"reverse"===e.what&&c.update())}).on("shift.internal",function(e){a(),c.update()})}(),c};var N={defaults:{duration:0,offset:0,triggerElement:void 0,triggerHook:.5,reverse:!0,loglevel:2},validate:{offset:function(e){if(e=parseFloat(e),!M.type.Number(e))throw['Invalid value for option "offset":',e];return e},triggerElement:function(e){if(e=e||void 0){var t=M.get.elements(e)[0];if(!t)throw['Element defined in option "triggerElement" was not found:',e];e=t}return e},triggerHook:function(e){var t={onCenter:.5,onEnter:1,onLeave:0};if(M.type.Number(e))e=Math.max(0,Math.min(parseFloat(e),1));else{if(!(e in t))throw['Invalid value for option "triggerHook": ',e];e=t[e]}return e},reverse:function(e){return!!e},loglevel:function(e){if(e=parseInt(e),!M.type.Number(e)||e<0||3<e)throw['Invalid value for option "loglevel":',e];return e}},shifts:["duration","offset","triggerHook"]};E.Scene.addOption=function(e,t,i,n){e in N.defaults?E._util.log(1,"[static] ScrollMagic.Scene -> Cannot add Scene option '"+e+"', because it already exists."):(N.defaults[e]=t,N.validate[e]=i,n&&N.shifts.push(e))},E.Scene.extend=function(e){var t=this;E.Scene=function(){return t.apply(this,arguments),this.$super=M.extend({},this),e.apply(this,arguments)||this},M.extend(E.Scene,t),E.Scene.prototype=t.prototype,E.Scene.prototype.constructor=E.Scene},E.Event=function(e,t,i,n){for(var r in n=n||{})this[r]=n[r];return this.type=e,this.target=this.currentTarget=i,this.namespace=t||"",this.timeStamp=this.timestamp=Date.now(),this};var M=E._util=function(s){var i,e={},a=function(e){return parseFloat(e)||0},l=function(e){return e.currentStyle?e.currentStyle:s.getComputedStyle(e)},n=function(e,t,i,n){if((t=t===document?s:t)===s)n=!1;else if(!d.DomElement(t))return 0;e=e.charAt(0).toUpperCase()+e.substr(1).toLowerCase();var r=(i?t["offset"+e]||t["outer"+e]:t["client"+e]||t["inner"+e])||0;if(i&&n){var o=l(t);r+="Height"===e?a(o.marginTop)+a(o.marginBottom):a(o.marginLeft)+a(o.marginRight)}return r},u=function(e){return e.replace(/^[^a-z]+([a-z])/g,"$1").replace(/-([a-z])/g,function(e){return e[1].toUpperCase()})};e.extend=function(e){for(e=e||{},i=1;i<arguments.length;i++)if(arguments[i])for(var t in arguments[i])arguments[i].hasOwnProperty(t)&&(e[t]=arguments[i][t]);return e},e.isMarginCollapseType=function(e){return-1<["block","flex","list-item","table","-webkit-box"].indexOf(e)};var r=0,t=["ms","moz","webkit","o"],o=s.requestAnimationFrame,c=s.cancelAnimationFrame;for(i=0;!o&&i<t.length;++i)o=s[t[i]+"RequestAnimationFrame"],c=s[t[i]+"CancelAnimationFrame"]||s[t[i]+"CancelRequestAnimationFrame"];o||(o=function(e){var t=(new Date).getTime(),i=Math.max(0,16-(t-r)),n=s.setTimeout(function(){e(t+i)},i);return r=t+i,n}),c||(c=function(e){s.clearTimeout(e)}),e.rAF=o.bind(s),e.cAF=c.bind(s);var f=["error","warn","log"],h=s.console||{};for(h.log=h.log||function(){},i=0;i<f.length;i++){var p=f[i];h[p]||(h[p]=h.log)}e.log=function(e){(f.length<e||e<=0)&&(e=f.length);var t=new Date,i=("0"+t.getHours()).slice(-2)+":"+("0"+t.getMinutes()).slice(-2)+":"+("0"+t.getSeconds()).slice(-2)+":"+("00"+t.getMilliseconds()).slice(-3),n=f[e-1],r=Array.prototype.splice.call(arguments,1),o=Function.prototype.bind.call(h[n],h);r.unshift(i),o.apply(h,r)};var d=e.type=function(e){return Object.prototype.toString.call(e).replace(/^\[object (.+)\]$/,"$1").toLowerCase()};d.String=function(e){return"string"===d(e)},d.Function=function(e){return"function"===d(e)},d.Array=function(e){return Array.isArray(e)},d.Number=function(e){return!d.Array(e)&&0<=e-parseFloat(e)+1},d.DomElement=function(e){return"object"==typeof HTMLElement?e instanceof HTMLElement:e&&"object"==typeof e&&null!==e&&1===e.nodeType&&"string"==typeof e.nodeName};var g=e.get={};return g.elements=function(e){var t=[];if(d.String(e))try{e=document.querySelectorAll(e)}catch(e){return t}if("nodelist"===d(e)||d.Array(e))for(var i=0,n=t.length=e.length;i<n;i++){var r=e[i];t[i]=d.DomElement(r)?r:g.elements(r)}else(d.DomElement(e)||e===document||e===s)&&(t=[e]);return t},g.scrollTop=function(e){return e&&"number"==typeof e.scrollTop?e.scrollTop:s.pageYOffset||0},g.scrollLeft=function(e){return e&&"number"==typeof e.scrollLeft?e.scrollLeft:s.pageXOffset||0},g.width=function(e,t,i){return n("width",e,t,i)},g.height=function(e,t,i){return n("height",e,t,i)},g.offset=function(e,t){var i={top:0,left:0};if(e&&e.getBoundingClientRect){var n=e.getBoundingClientRect();i.top=n.top,i.left=n.left,t||(i.top+=g.scrollTop(),i.left+=g.scrollLeft())}return i},e.addClass=function(e,t){t&&(e.classList?e.classList.add(t):e.className+=" "+t)},e.removeClass=function(e,t){t&&(e.classList?e.classList.remove(t):e.className=e.className.replace(new RegExp("(^|\\b)"+t.split(" ").join("|")+"(\\b|$)","gi")," "))},e.css=function(e,t){if(d.String(t))return l(e)[u(t)];if(d.Array(t)){var i={},n=l(e);return t.forEach(function(e,t){i[e]=n[u(e)]}),i}for(var r in t){var o=t[r];o==parseFloat(o)&&(o+="px"),e.style[u(r)]=o}},e}(window||{});return E.Scene.prototype.addIndicators=function(){return E._util.log(1,"(ScrollMagic.Scene) -> ERROR calling addIndicators() due to missing Plugin 'debug.addIndicators'. Please make sure to include plugins/debug.addIndicators.js"),this},E.Scene.prototype.removeIndicators=function(){return E._util.log(1,"(ScrollMagic.Scene) -> ERROR calling removeIndicators() due to missing Plugin 'debug.addIndicators'. Please make sure to include plugins/debug.addIndicators.js"),this},E.Scene.prototype.setTween=function(){return E._util.log(1,"(ScrollMagic.Scene) -> ERROR calling setTween() due to missing Plugin 'animation.gsap'. Please make sure to include plugins/animation.gsap.js"),this},E.Scene.prototype.removeTween=function(){return E._util.log(1,"(ScrollMagic.Scene) -> ERROR calling removeTween() due to missing Plugin 'animation.gsap'. Please make sure to include plugins/animation.gsap.js"),this},E.Scene.prototype.setVelocity=function(){return E._util.log(1,"(ScrollMagic.Scene) -> ERROR calling setVelocity() due to missing Plugin 'animation.velocity'. Please make sure to include plugins/animation.velocity.js"),this},E.Scene.prototype.removeVelocity=function(){return E._util.log(1,"(ScrollMagic.Scene) -> ERROR calling removeVelocity() due to missing Plugin 'animation.velocity'. Please make sure to include plugins/animation.velocity.js"),this},E}),function(e,t){"function"==typeof define&&define.amd?define(["ScrollMagic","TweenMax","TimelineMax"],t):"object"==typeof exports?(require("gsap"),t(require("scrollmagic"),TweenMax,TimelineMax)):t(e.ScrollMagic||e.jQuery&&e.jQuery.ScrollMagic,e.TweenMax||e.TweenLite,e.TimelineMax||e.TimelineLite)}(this,function(e,g,m){"use strict";var t="animation.gsap",i=window.console||{},n=Function.prototype.bind.call(i.error||i.log||function(){},i);e||n("("+t+") -> ERROR: The ScrollMagic main module could not be found. Please make sure it's loaded before this plugin or use an asynchronous loader like requirejs."),g||n("("+t+") -> ERROR: TweenLite or TweenMax could not be found. Please make sure GSAP is loaded before ScrollMagic or use an asynchronous loader like requirejs."),e.Scene.addOption("tweenChanges",!1,function(e){return!!e}),e.Scene.extend(function(){var f,h=this,p=function(){h._log&&(Array.prototype.splice.call(arguments,1,0,"("+t+")","->"),h._log.apply(this,arguments))};h.on("progress.plugin_gsap",function(){d()}),h.on("destroy.plugin_gsap",function(e){h.removeTween(e.reset)});var d=function(){if(f){var e=h.progress(),t=h.state();f.repeat&&-1===f.repeat()?"DURING"===t&&f.paused()?f.play():"DURING"===t||f.paused()||f.pause():e!=f.progress()&&(0===h.duration()?0<e?f.play():f.reverse():h.tweenChanges()&&f.tweenTo?f.tweenTo(e*f.duration()):f.progress(e).pause())}};h.setTween=function(e,t,i){var n;1<arguments.length&&(arguments.length<3&&(i=t,t=1),e=g.to(e,t,i));try{(n=m?new m({smoothChildTiming:!0}).add(e):e).pause()}catch(e){return p(1,"ERROR calling method 'setTween()': Supplied argument is not a valid TweenObject"),h}if(f&&h.removeTween(),f=n,e.repeat&&-1===e.repeat()&&(f.repeat(-1),f.yoyo(e.yoyo())),h.tweenChanges()&&!f.tweenTo&&p(2,"WARNING: tweenChanges will only work if the TimelineMax object is available for ScrollMagic."),f&&h.controller()&&h.triggerElement()&&2<=h.loglevel()){var r=g.getTweensOf(h.triggerElement()),o=h.controller().info("vertical");r.forEach(function(e,t){var i=e.vars.css||e.vars;if(o?void 0!==i.top||void 0!==i.bottom:void 0!==i.left||void 0!==i.right)return p(2,"WARNING: Tweening the position of the trigger element affects the scene timing and should be avoided!"),!1})}if(1.14<=parseFloat(TweenLite.version))for(var s,a,l=f.getChildren?f.getChildren(!0,!0,!1):[f],u=function(){p(2,"WARNING: tween was overwritten by another. To learn how to avoid this issue see here: https://github.com/janpaepke/ScrollMagic/wiki/WARNING:-tween-was-overwritten-by-another")},c=0;c<l.length;c++)s=l[c],a!==u&&(a=s.vars.onOverwrite,s.vars.onOverwrite=function(){a&&a.apply(this,arguments),u.apply(this,arguments)});return p(3,"added tween"),d(),h},h.removeTween=function(e){return f&&(e&&f.progress(0).pause(),f.kill(),f=void 0,p(3,"removed tween (reset: "+(e?"true":"false")+")")),h}})}),function(e,t){"function"==typeof define&&define.amd?define(["ScrollMagic","velocity"],t):"object"==typeof exports?t(require("scrollmagic"),require("velocity")):t(e.ScrollMagic||e.jQuery&&e.jQuery.ScrollMagic,e.Velocity||e.jQuery&&e.jQuery.Velocity)}(this,function(e,p){"use strict";var d="animation.velocity",t=Function.prototype.bind.call(console&&(console.error||console.log)||function(){},console);e||t("("+d+") -> ERROR: The ScrollMagic main module could not be found. Please make sure it's loaded before this plugin or use an asynchronous loader like requirejs."),p||t("("+d+") -> ERROR: Velocity could not be found. Please make sure it's loaded before ScrollMagic or use an asynchronous loader like requirejs.");var g=0;e.Scene.extend(function(){var r,o,s,a,l=this,u=e._util,t=0,c=function(){l._log&&(Array.prototype.splice.call(arguments,1,0,"("+d+")","->"),l._log.apply(this,arguments))};l.on("progress.plugin_velocity",function(){h()}),l.on("destroy.plugin_velocity",function(e){l.off("*.plugin_velocity"),l.removeVelocity(e.reset)});var n=function(e,t,i){u.type.Array(e)?e.forEach(function(e){n(e,t,i)}):(p.Utilities.data(e,a)||p.Utilities.data(e,a,{reverseProps:u.css(e,Object.keys(o))}),p(e,t,i),void 0!==i.queue&&p.Utilities.dequeue(e,i.queue))},f=function(e,t){if(u.type.Array(e))e.forEach(function(e){f(e,t)});else{var i=p.Utilities.data(e,a);i&&i.reverseProps&&(p(e,i.reverseProps,t),void 0!==t.queue&&p.Utilities.dequeue(e,t.queue))}},h=function(){if(r){var e=l.progress();e!=t&&(0===l.duration()&&(0<e?n(r,o,s):f(r,s)),t=e)}};l.setVelocity=function(e,t,i){r&&l.removeVelocity(),r=u.get.elements(e),o=t||{},a="ScrollMagic."+d+"["+g+++"]",void 0!==(s=i||{}).queue&&(s.queue=a+"_queue");var n=function(){0!==l.duration()&&c(1,"ERROR: The Velocity animation plugin does not support scrollbound animations (scenes with duration) yet.")};return l.on("change.plugin_velocity",function(e){"duration"==e.what&&n()}),n(),c(3,"added animation"),h(),l},l.removeVelocity=function(e){return r&&(void 0!==s.queue&&p(r,"stop",s.queue),e&&f(r,{duration:0}),r.forEach(function(e){p.Utilities.removeData(e,a)}),r=o=s=a=void 0),l}})}),function(e,t){"function"==typeof define&&define.amd?define(["ScrollMagic"],t):"object"==typeof exports?t(require("scrollmagic")):t(e.ScrollMagic||e.jQuery&&e.jQuery.ScrollMagic)}(this,function(n){"use strict";var v="debug.addIndicators",e=Function.prototype.bind.call(console&&(console.error||console.log)||function(){},console);n||e("("+v+") -> ERROR: The ScrollMagic main module could not be found. Please make sure it's loaded before this plugin or use an asynchronous loader like requirejs.");var _=n._util,y=0;n.Scene.extend(function(){var i,n=this;n.addIndicators=function(e){if(!i){var t={name:"",indent:0,parent:void 0,colorStart:"green",colorEnd:"red",colorTrigger:"blue"};e=_.extend({},t,e),y++,i=new r(n,e),n.on("add.plugin_addIndicators",i.add),n.on("remove.plugin_addIndicators",i.remove),n.on("destroy.plugin_addIndicators",n.removeIndicators),n.controller()&&i.add()}return n},n.removeIndicators=function(){return i&&(i.remove(),this.off("*.plugin_addIndicators"),i=void 0),n}}),n.Controller.addOption("addIndicators",!1),n.Controller.extend(function(){var h=this,e=h.info(),p=e.container,d=e.isDocument,g=e.vertical,m={groups:[]};h._indicators&&function(){h._log&&(Array.prototype.splice.call(arguments,1,0,"("+v+")","->"),h._log.apply(this,arguments))}(2,"WARNING: Scene already has a property '_indicators', which will be overwritten by plugin."),this._indicators=m;var t=function(){m.updateBoundsPositions()},i=function(){m.updateTriggerGroupPositions()};return p.addEventListener("resize",i),d||(window.addEventListener("resize",i),window.addEventListener("scroll",i)),p.addEventListener("resize",t),p.addEventListener("scroll",t),this._indicators.updateBoundsPositions=function(e){for(var t,i,n,r=e?[_.extend({},e.triggerGroup,{members:[e]})]:m.groups,o=r.length,s={},a=g?"left":"top",l=g?"width":"height",u=g?_.get.scrollLeft(p)+_.get.width(p)-15:_.get.scrollTop(p)+_.get.height(p)-15;o--;)for(t=(n=r[o]).members.length,i=_.get[l](n.element.firstChild);t--;)s[a]=u-i,_.css(n.members[t].bounds,s)},this._indicators.updateTriggerGroupPositions=function(e){for(var t,i,n,r,o=e?[e]:m.groups,s=o.length,a=d?document.body:p,l=d?{top:0,left:0}:_.get.offset(a,!0),u=g?_.get.width(p)-15:_.get.height(p)-15,c=g?"width":"height",f=g?"Y":"X";s--;)i=(t=o[s]).element,n=t.triggerHook*h.info("size"),r=_.get[c](i.firstChild.firstChild)<n?"translate"+f+"(-100%)":"",_.css(i,{top:l.top+(g?n:u-t.members[0].options.indent),left:l.left+(g?u-t.members[0].options.indent:n)}),_.css(i.firstChild.firstChild,{"-ms-transform":r,"-webkit-transform":r,transform:r})},this._indicators.updateTriggerGroupLabel=function(e){var t="trigger"+(1<e.members.length?"":" "+e.members[0].options.name),i=e.element.firstChild.firstChild;i.textContent!==t&&(i.textContent=t,g&&m.updateBoundsPositions())},this.addScene=function(e){this._options.addIndicators&&e instanceof n.Scene&&e.controller()===h&&e.addIndicators(),this.$super.addScene.apply(this,arguments)},this.destroy=function(){p.removeEventListener("resize",i),d||(window.removeEventListener("resize",i),window.removeEventListener("scroll",i)),p.removeEventListener("resize",t),p.removeEventListener("scroll",t),this.$super.destroy.apply(this,arguments)},h});var r=function(r,o){var s,a,l=this,i=x.bounds(),n=x.start(o.colorStart),u=x.end(o.colorEnd),c=o.parent&&_.get.elements(o.parent)[0],t=function(){r._log&&(Array.prototype.splice.call(arguments,1,0,"("+v+")","->"),r._log.apply(this,arguments))};o.name=o.name||y,n.firstChild.textContent+=" "+o.name,u.textContent+=" "+o.name,i.appendChild(n),i.appendChild(u),l.options=o,l.bounds=i,l.triggerGroup=void 0,this.add=function(){a=r.controller(),s=a.info("vertical");var e=a.info("isDocument");c||(c=e?document.body:a.info("container")),e||"static"!==_.css(c,"position")||_.css(c,{position:"relative"}),r.on("change.plugin_addIndicators",h),r.on("shift.plugin_addIndicators",f),m(),d(),setTimeout(function(){a._indicators.updateBoundsPositions(l)},0),t(3,"added indicators")},this.remove=function(){if(l.triggerGroup){if(r.off("change.plugin_addIndicators",h),r.off("shift.plugin_addIndicators",f),1<l.triggerGroup.members.length){var e=l.triggerGroup;e.members.splice(e.members.indexOf(l),1),a._indicators.updateTriggerGroupLabel(e),a._indicators.updateTriggerGroupPositions(e),l.triggerGroup=void 0}else g();p(),t(3,"removed indicators")}};var f=function(){d()},h=function(e){"triggerHook"===e.what&&m()},p=function(){i.parentNode.removeChild(i)},d=function(){var e;i.parentNode!==c&&(e=a.info("vertical"),_.css(n.firstChild,{"border-bottom-width":e?1:0,"border-right-width":e?0:1,bottom:e?-1:o.indent,right:e?o.indent:-1,padding:e?"0 8px":"2px 4px"}),_.css(u,{"border-top-width":e?1:0,"border-left-width":e?0:1,top:e?"100%":"",right:e?o.indent:"",bottom:e?"":o.indent,left:e?"":"100%",padding:e?"0 8px":"2px 4px"}),c.appendChild(i));var t={};t[s?"top":"left"]=r.triggerPosition(),t[s?"height":"width"]=r.duration(),_.css(i,t),_.css(u,{display:0<r.duration()?"":"none"})},g=function(){a._indicators.groups.splice(a._indicators.groups.indexOf(l.triggerGroup),1),l.triggerGroup.element.parentNode.removeChild(l.triggerGroup.element),l.triggerGroup=void 0},m=function(){var e=r.triggerHook();if(!(l.triggerGroup&&Math.abs(l.triggerGroup.triggerHook-e)<1e-4)){for(var t,i=a._indicators.groups,n=i.length;n--;)if(t=i[n],Math.abs(t.triggerHook-e)<1e-4)return l.triggerGroup&&(1===l.triggerGroup.members.length?g():(l.triggerGroup.members.splice(l.triggerGroup.members.indexOf(l),1),a._indicators.updateTriggerGroupLabel(l.triggerGroup),a._indicators.updateTriggerGroupPositions(l.triggerGroup))),t.members.push(l),l.triggerGroup=t,void a._indicators.updateTriggerGroupLabel(t);if(l.triggerGroup){if(1===l.triggerGroup.members.length)return l.triggerGroup.triggerHook=e,void a._indicators.updateTriggerGroupPositions(l.triggerGroup);l.triggerGroup.members.splice(l.triggerGroup.members.indexOf(l),1),a._indicators.updateTriggerGroupLabel(l.triggerGroup),a._indicators.updateTriggerGroupPositions(l.triggerGroup),l.triggerGroup=void 0}!function(){var e=x.trigger(o.colorTrigger),t={};t[s?"right":"bottom"]=0,t[s?"border-top-width":"border-left-width"]=1,_.css(e.firstChild,t),_.css(e.firstChild.firstChild,{padding:s?"0 8px 3px 8px":"3px 4px"}),document.body.appendChild(e);var i={triggerHook:r.triggerHook(),element:e,members:[l]};a._indicators.groups.push(i),l.triggerGroup=i,a._indicators.updateTriggerGroupLabel(i),a._indicators.updateTriggerGroupPositions(i)}()}}},x={start:function(e){var t=document.createElement("div");t.textContent="start",_.css(t,{position:"absolute",overflow:"visible","border-width":0,"border-style":"solid",color:e,"border-color":e});var i=document.createElement("div");return _.css(i,{position:"absolute",overflow:"visible",width:0,height:0}),i.appendChild(t),i},end:function(e){var t=document.createElement("div");return t.textContent="end",_.css(t,{position:"absolute",overflow:"visible","border-width":0,"border-style":"solid",color:e,"border-color":e}),t},bounds:function(){var e=document.createElement("div");return _.css(e,{position:"absolute",overflow:"visible","white-space":"nowrap","pointer-events":"none","font-size":"0.85em"}),e.style.zIndex="9999",e},trigger:function(e){var t=document.createElement("div");t.textContent="trigger",_.css(t,{position:"relative"});var i=document.createElement("div");_.css(i,{position:"absolute",overflow:"visible","border-width":0,"border-style":"solid",color:e,"border-color":e}),i.appendChild(t);var n=document.createElement("div");return _.css(n,{position:"fixed",overflow:"visible","white-space":"nowrap","pointer-events":"none","font-size":"0.85em"}),n.style.zIndex="9999",n.appendChild(i),n}}}),DEBUG=!1,slideNum=1,$(document).ready(function(){var e=new ScrollMagic.Controller;addSlide(e,"#trigger1","90%","0",[TweenMax.to("#scroll-prompt, #pen-key, #swoops",1,{opacity:0}),0,TweenMax.to("body",1,{backgroundColor:"#18633F"}),0,TweenMax.to("#get-started",1,{opacity:1}),"default",TweenMax.to("#checks",1,{left:"50%",ease:Power2.easeInOut}),"default"]),addSlide(e,"#trigger2","50%","0",[TweenMax.to("#checks #line2",1,{marginTop:"200%",ease:Power2.easeInOut}),"default",TweenMax.to("#slide2-bubble1",1,{opacity:1}),"default",TweenMax.to("#checks #line3",1,{marginTop:"300%",ease:Power2.easeInOut}),"default"]),addSlide(e,"#trigger3","50%","0",[TweenMax.to("#slide2-bubble1",1,{opacity:0}),0,TweenMax.to("#checks #line1",1,{opacity:0,display:"none"}),0,TweenMax.to("#checks #line2",1,{marginTop:"0",ease:Power2.easeInOut}),1,TweenMax.to("#slide2-bubble2",1,{opacity:1,ease:Power2.easeInOut}),2]),addSlide(e,"#trigger4","50%","0",[TweenMax.to("#slide2-bubble2",1,{opacity:0}),0,TweenMax.to("#checks #line2",1,{opacity:0,display:"none"}),0,TweenMax.to("#checks #line3",1,{marginTop:"0",ease:Power2.easeInOut}),1,TweenMax.to("#slide2-bubble3",1,{opacity:1,ease:Power2.easeInOut}),2]),addSlide(e,"#trigger5","50%","0",[TweenMax.to("#slide2-bubble3",1,{opacity:0}),0,TweenMax.to("#checks #line3",1,{opacity:0,display:"none"}),0,TweenMax.to("body",1,{backgroundColor:"#E76104"}),1,TweenMax.to("#work1",1,{css:{className:"+=selected"}},.01),"default",TweenMax.to("#portfolio-bubble1, #portfolio-feature1, .slide3 h2, #works",1,{opacity:1}),2,TweenMax.to("#works",1,{display:"flex"}),2]),addSlide(e,"#trigger6","50%","0",[TweenMax.to("#work1",1,{css:{className:"-=selected"}},.01),"default",TweenMax.to("#work2",1,{css:{className:"+=selected"}},.01),"default",TweenMax.to("#portfolio-bubble1, #portfolio-feature1",1,{opacity:0}),"default",TweenMax.to("#portfolio-bubble2, #portfolio-feature2",1,{opacity:1}),"default"]),addSlide(e,"#trigger7","50%","0",[TweenMax.to("#work2",1,{css:{className:"-=selected"}},.01),"default",TweenMax.to("#work3",1,{css:{className:"+=selected"}},.01),"default",TweenMax.to("#portfolio-bubble2, #portfolio-feature2",1,{opacity:0}),"default",TweenMax.to("#portfolio-bubble3, #portfolio-feature3",1,{opacity:1}),"default"]),addSlide(e,"#trigger8","50%","0",[TweenMax.to("body",1,{backgroundColor:"white"}),1,TweenMax.to("#portfolio-bubble3, #portfolio-feature3, .slide3 h2, #works",1,{opacity:0}),"default",TweenMax.to("#get-started",1,{right:"-100%"}),"default",TweenMax.to(".logo",1,{opacity:0}),"default",TweenMax.to(".logo, nav.nav-orig",1,{display:"none"}),"default",TweenMax.to(".logo-final, nav.nav-final, .contact-info",1,{opacity:1}),"default",TweenMax.to(".logo-final, nav.nav-final",1,{display:"inherit"}),"default",TweenMax.to(".contact-info",1,{display:"flex"}),"default",TweenMax.to("footer",1,{bottom:0,ease:Power2.easeInOut}),"default"]),addSlide(e,"#trigger9","50%","0",[TweenMax.to(".circled",1,{opacity:1}),1])});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
